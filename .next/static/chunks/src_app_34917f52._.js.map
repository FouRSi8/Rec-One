{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Rec%27One/rec-one/src/app/components/MatrixBackground.js"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport default function MatrixBackground() {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas?.getContext(\"2d\");\r\n    if (!ctx) return;\r\n\r\n    canvas.height = window.innerHeight;\r\n    canvas.width = window.innerWidth;\r\n\r\n    const chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    const fontSize = 14;\r\n    const columns = canvas.width / fontSize;\r\n    const drops = Array(Math.floor(columns)).fill(0);\r\n\r\n    const draw = () => {\r\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.05)\";\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      ctx.fillStyle = \"#22C55E\";\r\n      ctx.font = `${fontSize}px monospace`;\r\n\r\n      for (let i = 0; i < drops.length; i++) {\r\n        const text = chars.charAt(Math.floor(Math.random() * chars.length));\r\n        const x = i * fontSize;\r\n        const y = drops[i] * fontSize;\r\n        ctx.fillText(text, x, y);\r\n        if (y > canvas.height && Math.random() > 0.975) drops[i] = 0;\r\n        drops[i]++;\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(draw, 33);\r\n    const resizeCanvas = () => {\r\n      canvas.height = window.innerHeight;\r\n      canvas.width = window.innerWidth;\r\n    };\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      window.removeEventListener(\"resize\", resizeCanvas);\r\n    };\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef} className=\"absolute top-0 left-0 w-full h-full opacity-10 pointer-events-none\" />;\r\n}"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AAIe,SAAS;;IACtB,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAEzB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACR,MAAM,SAAS,UAAU,OAAO;YAChC,MAAM,MAAM,mBAAA,6BAAA,OAAQ,UAAU,CAAC;YAC/B,IAAI,CAAC,KAAK;YAEV,OAAO,MAAM,GAAG,OAAO,WAAW;YAClC,OAAO,KAAK,GAAG,OAAO,UAAU;YAEhC,MAAM,QAAQ;YACd,MAAM,WAAW;YACjB,MAAM,UAAU,OAAO,KAAK,GAAG;YAC/B,MAAM,QAAQ,MAAM,KAAK,KAAK,CAAC,UAAU,IAAI,CAAC;YAE9C,MAAM;mDAAO;oBACX,IAAI,SAAS,GAAG;oBAChB,IAAI,QAAQ,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;oBAC9C,IAAI,SAAS,GAAG;oBAChB,IAAI,IAAI,GAAG,AAAC,GAAW,OAAT,UAAS;oBAEvB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;wBACrC,MAAM,OAAO,MAAM,MAAM,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,MAAM;wBACjE,MAAM,IAAI,IAAI;wBACd,MAAM,IAAI,KAAK,CAAC,EAAE,GAAG;wBACrB,IAAI,QAAQ,CAAC,MAAM,GAAG;wBACtB,IAAI,IAAI,OAAO,MAAM,IAAI,KAAK,MAAM,KAAK,OAAO,KAAK,CAAC,EAAE,GAAG;wBAC3D,KAAK,CAAC,EAAE;oBACV;gBACF;;YAEA,MAAM,WAAW,YAAY,MAAM;YACnC,MAAM;2DAAe;oBACnB,OAAO,MAAM,GAAG,OAAO,WAAW;oBAClC,OAAO,KAAK,GAAG,OAAO,UAAU;gBAClC;;YACA,OAAO,gBAAgB,CAAC,UAAU;YAElC;8CAAO;oBACL,cAAc;oBACd,OAAO,mBAAmB,CAAC,UAAU;gBACvC;;QACF;qCAAG,EAAE;IAEL,qBAAO,6LAAC;QAAO,KAAK;QAAW,WAAU;;;;;;AAC3C;GA9CwB;KAAA","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Rec%27One/rec-one/src/app/movie/page.js"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSearchParams, useRouter } from \"next/navigation\";\r\nimport axios from \"axios\";\r\nimport MatrixBackground from \"../components/MatrixBackground\";\r\n\r\n// Mock data (replace with API data later)\r\nconst mockMovies = [\r\n  { id: 1, title: \"Inception\", year: 2010, language: \"English\", genres: [\"Action\", \"Sci-Fi\", \"Thriller\"], poster: \"https://via.placeholder.com/200x300\", description: \"A thief enters dreams to steal secrets.\" },\r\n  { id: 2, title: \"The Shawshank Redemption\", year: 1994, language: \"English\", genres: [\"Drama\"], poster: \"https://via.placeholder.com/200x300\", description: \"Hope and friendship in prison.\" },\r\n  { id: 3, title: \"Parasite\", year: 2019, language: \"Korean\", genres: [\"Drama\", \"Thriller\"], poster: \"https://via.placeholder.com/200x300\", description: \"A family cons their way into wealth.\" },\r\n  { id: 4, title: \"Spirited Away\", year: 2001, language: \"Japanese\", genres: [\"Animation\", \"Fantasy\"], poster: \"https://via.placeholder.com/200x300\", description: \"A girl navigates a magical world.\" },\r\n];\r\n\r\nexport default function MovieRecommendation() {\r\n  console.log(\"TMDB API Key:\", process.env.TMDB_API_KEY);\r\n}\r\n\r\n// Replace with your TMDB API key\r\nconst TMDB_API_KEY = \"YOUR_TMDB_API_KEY\";\r\n// Replace with your Reddit API credentials\r\nconst REDDIT_CLIENT_ID = \"YOUR_REDDIT_CLIENT_ID\";\r\nconst REDDIT_CLIENT_SECRET = \"YOUR_REDDIT_CLIENT_SECRET\";\r\nconst REDDIT_USERNAME = \"YOUR_REDDIT_USERNAME\";\r\nconst REDDIT_PASSWORD = \"YOUR_REDDIT_PASSWORD\";\r\n\r\nexport default function MovieRecommendation() {\r\n  const searchParams = useSearchParams();\r\n  const router = useRouter();\r\n  const year = parseInt(searchParams.get(\"year\")) || null;\r\n  const language = searchParams.get(\"language\") || \"\";\r\n  const genres = searchParams.get(\"genres\")?.split(\",\") || [];\r\n  const [currentMovieIndex, setCurrentMovieIndex] = useState(0);\r\n  const [movieDetails, setMovieDetails] = useState(null);\r\n  const [sentimentScore, setSentimentScore] = useState(null);\r\n\r\n  // Filter movies based on parameters\r\n  const filteredMovies = mockMovies.filter(\r\n    (movie) =>\r\n      (!year || movie.year >= year) &&\r\n      (!language || movie.language === language) &&\r\n      (!genres.length || genres.every((genre) => movie.genres.includes(genre)))\r\n  );\r\n\r\n  const currentMovie = filteredMovies[currentMovieIndex] || null;\r\n\r\n  useEffect(() => {\r\n    if (currentMovie) {\r\n      fetchMovieDetails(currentMovie.title);\r\n      fetchRedditSentiment(currentMovie.title);\r\n    }\r\n  }, [currentMovie]);\r\n\r\n  const fetchMovieDetails = async (title) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&query=${encodeURIComponent(title)}`\r\n      );\r\n      const movie = response.data.results[0];\r\n      if (movie) {\r\n        setMovieDetails({\r\n          rating: movie.vote_average,\r\n          runtime: movie.runtime,\r\n          overview: movie.overview,\r\n          release_date: movie.release_date,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching movie details:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchRedditSentiment = async (title) => {\r\n    try {\r\n      // Authenticate with Reddit API\r\n      const tokenResponse = await axios.post(\r\n        \"https://www.reddit.com/api/v1/access_token\",\r\n        `grant_type=password&username=${REDDIT_USERNAME}&password=${REDDIT_PASSWORD}`,\r\n        {\r\n          auth: { username: REDDIT_CLIENT_ID, password: REDDIT_CLIENT_SECRET },\r\n          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n        }\r\n      );\r\n      const token = tokenResponse.data.access_token;\r\n\r\n      // Search for posts in r/movies\r\n      const searchResponse = await axios.get(\r\n        `https://oauth.reddit.com/r/movies/search?q=${encodeURIComponent(title)}&limit=10`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      const posts = searchResponse.data.data.children;\r\n      let positive = 0, negative = 0, neutral = 0;\r\n\r\n      posts.forEach((post) => {\r\n        const text = post.data.title + \" \" + (post.data.selftext || \"\");\r\n        // Simple sentiment analysis (replace with VADER or a model later)\r\n        if (text.toLowerCase().includes(\"good\") || text.toLowerCase().includes(\"great\")) positive++;\r\n        else if (text.toLowerCase().includes(\"bad\") || text.toLowerCase().includes(\"terrible\")) negative++;\r\n        else neutral++;\r\n      });\r\n\r\n      const total = positive + negative + neutral;\r\n      const score = total > 0 ? (positive - negative) / total : 0;\r\n      setSentimentScore((score * 100).toFixed(1)); // Scale to percentage\r\n    } catch (error) {\r\n      console.error(\"Error fetching Reddit sentiment:\", error);\r\n    }\r\n  };\r\n\r\n  const handleNextMovie = () => {\r\n    setCurrentMovieIndex((prev) => (prev + 1) % filteredMovies.length || 0);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    router.push(`/language-mood`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-gradient-to-b from-black to-gray-900 text-white font-sans relative\">\r\n      <MatrixBackground />\r\n      <h1 className=\"text-6xl font-extrabold mb-8 text-white tracking-wider drop-shadow-[0_0_10px_rgba(34,197,94,0.7)] animate-pulse z-10\" style={{ fontFamily: \"'Cinzel', serif\" }}>\r\n        Rec&apos;One\r\n      </h1>\r\n      <p className=\"text-lg mb-6 text-gray-300 italic z-10\">Your movie recommendation</p>\r\n      <div className=\"text-center z-10\">\r\n        {currentMovie ? (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <img src={currentMovie.poster} alt={currentMovie.title} className=\"w-full h-auto rounded-lg mb-4\" />\r\n            <h2 className=\"text-2xl font-semibold text-gray-200\">{currentMovie.title} ({currentMovie.year})</h2>\r\n            <p className=\"text-gray-300 mb-2\">Language: {currentMovie.language}</p>\r\n            <p className=\"text-gray-300 mb-2\">Genres: {currentMovie.genres.join(\", \")}</p>\r\n            <p className=\"text-gray-400 mb-2\">Description: {currentMovie.description}</p>\r\n            {movieDetails && (\r\n              <>\r\n                <p className=\"text-gray-300 mb-2\">IMDb Rating: {movieDetails.rating}/10</p>\r\n                <p className=\"text-gray-300 mb-2\">Runtime: {movieDetails.runtime} mins</p>\r\n                <p className=\"text-gray-400 mb-2\">Plot: {movieDetails.overview}</p>\r\n                <p className=\"text-gray-300 mb-2\">Release Date: {movieDetails.release_date}</p>\r\n              </>\r\n            )}\r\n            {sentimentScore !== null && (\r\n              <p className=\"text-gray-300 mb-2\">Reddit Sentiment Score: {sentimentScore}%</p>\r\n            )}\r\n            <button\r\n              onClick={handleNextMovie}\r\n              className=\"px-6 py-2 bg-green-500 text-black font-semibold rounded-lg hover:bg-green-600 transition duration-300 transform hover:scale-105\"\r\n              aria-label=\"Get next movie recommendation\"\r\n            >\r\n              Rec&apos;One\r\n            </button>\r\n            <button\r\n              onClick={handleBack}\r\n              className=\"ml-4 px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition duration-300\"\r\n              aria-label=\"Return to genre selection\"\r\n            >\r\n              Back\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <p className=\"text-gray-400\">No movies found matching your criteria.</p>\r\n        )}\r\n      </div>\r\n      <div className=\"absolute bottom-4 text-gray-400 text-sm opacity-70 z-10\">Powered by subreddit sentiment analysis</div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}