{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Rec%27One/rec-one/src/app/api/recommendations/route.js"],"sourcesContent":["// import { NextResponse } from \"next/server\";\r\n// import axios from \"axios\";\r\n\r\n// export async function GET(request) {\r\n//   const { searchParams } = new URL(request.url);\r\n//   const movieIds = searchParams.get(\"movieIds\")?.split(\",\");\r\n//   const year = searchParams.get(\"year\");\r\n\r\n//   // Shorter timeout for individual requests\r\n//   const axiosConfig = { timeout: 8000 };\r\n  \r\n//   // Insert title-to-ID mapping here if IDs are not numeric\r\n//   let resolvedIds = movieIds;\r\n//   if (movieIds.some((id) => isNaN(id))) {\r\n//     const searchPromises = movieIds.map((title) =>\r\n//       axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.TMDB_API_KEY}&query=${encodeURIComponent(title)}`, axiosConfig)\r\n//         .catch(err => ({ data: { results: [] } })) // Handle individual failures\r\n//     );\r\n//     const searchResponses = await Promise.all(searchPromises);\r\n//     resolvedIds = searchResponses.map((res) => res.data.results[0]?.id).filter((id) => id);\r\n//     if (resolvedIds.length !== 3) {\r\n//       return NextResponse.json({ error: \"Could not map all titles to valid movie IDs\" }, { status: 400 });\r\n//     }\r\n//   }\r\n\r\n//   if (!resolvedIds || resolvedIds.length !== 3) {\r\n//     return NextResponse.json({ error: \"Exactly 3 movie IDs are required\" }, { status: 400 });\r\n//   }\r\n\r\n//   const TMDB_API_KEY = process.env.TMDB_API_KEY;\r\n//   const REDDIT_CLIENT_ID = process.env.REDDIT_CLIENT_ID;\r\n//   const REDDIT_CLIENT_SECRET = process.env.REDDIT_CLIENT_SECRET;\r\n\r\n//   if (!TMDB_API_KEY) {\r\n//     return NextResponse.json({ error: \"Missing TMDB_API_KEY environment variable\" }, { status: 500 });\r\n//   }\r\n\r\n//   try {\r\n//     console.log(\"Fetching movie details for IDs:\", resolvedIds);\r\n    \r\n//     // Fetch detailed movie information including credits\r\n//     const movieDetailsPromises = resolvedIds.map(async (id) => {\r\n//       try {\r\n//         const [movieDetails, credits, keywords] = await Promise.all([\r\n//           axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${TMDB_API_KEY}`, axiosConfig),\r\n//           axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${TMDB_API_KEY}`, axiosConfig),\r\n//           axios.get(`https://api.themoviedb.org/3/movie/${id}/keywords?api_key=${TMDB_API_KEY}`, axiosConfig).catch(() => ({ data: { keywords: [] } }))\r\n//         ]);\r\n//         return {\r\n//           ...movieDetails.data,\r\n//           credits: credits.data,\r\n//           keywords: keywords.data.keywords || []\r\n//         };\r\n//       } catch (error) {\r\n//         console.error(`Failed to fetch details for movie ${id}:`, error.message);\r\n//         throw error;\r\n//       }\r\n//     });\r\n\r\n//     const inputMovies = await Promise.all(movieDetailsPromises);\r\n//     console.log(\"Input movies:\", inputMovies.map(m => ({ title: m.title, id: m.id, original_language: m.original_language })));\r\n\r\n//     // Enhanced movie analysis with genre prioritization\r\n//     const movieAnalysis = analyzeInputMoviesEnhanced(inputMovies);\r\n//     console.log(\"Movie analysis:\", movieAnalysis);\r\n\r\n//     // Reddit recommendations with improved approach\r\n//     let redditRecommendations = [];\r\n//     let redditError = null;\r\n    \r\n//     if (REDDIT_CLIENT_ID && REDDIT_CLIENT_SECRET) {\r\n//       try {\r\n//         console.log(\"Attempting improved Reddit-based recommendations...\");\r\n//         const redditPromise = getImprovedRedditRecommendations(inputMovies, movieAnalysis, REDDIT_CLIENT_ID, REDDIT_CLIENT_SECRET, axiosConfig);\r\n//         const timeoutPromise = new Promise((_, reject) => \r\n//           setTimeout(() => reject(new Error('Reddit timeout')), 12000)\r\n//         );\r\n        \r\n//         redditRecommendations = await Promise.race([redditPromise, timeoutPromise]);\r\n//         console.log(\"Reddit recommendations found:\", redditRecommendations.length);\r\n//       } catch (error) {\r\n//         console.log(\"Reddit API failed, falling back to TMDB:\", error.message);\r\n//         redditError = error.message;\r\n//       }\r\n//     }\r\n\r\n//     // Enhanced strategies based on movie analysis - WITH PROPER TMDB IMPLEMENTATION\r\n//     const strategies = await getEnhancedStrategiesWithTMDB(inputMovies, movieAnalysis, TMDB_API_KEY, axiosConfig);\r\n\r\n//     // Collect recommendations more efficiently\r\n//     const allRecommendations = [];\r\n//     const minYear = parseInt(year, 10) || 2000;\r\n\r\n//     // Add Reddit recommendations if available (with year filtering)\r\n//     if (redditRecommendations.length > 0) {\r\n//       const redditCandidates = await enhanceRedditRecommendationsWithTMDB(\r\n//         redditRecommendations.slice(0, 8), // Increased limit for better results\r\n//         TMDB_API_KEY, \r\n//         axiosConfig\r\n//       );\r\n//       redditCandidates\r\n//         .filter(candidate => {\r\n//           if (!candidate.release_date) return false;\r\n//           const releaseYear = new Date(candidate.release_date).getFullYear();\r\n//           return releaseYear >= minYear;\r\n//         })\r\n//         .forEach(candidate => {\r\n//           allRecommendations.push({\r\n//             ...candidate,\r\n//             strategyName: \"Reddit Community Recommendation\",\r\n//             strategyPriority: 10,\r\n//             source: \"reddit\"\r\n//           });\r\n//         });\r\n//     }\r\n\r\n//     // Process TMDB strategies in parallel with limited concurrency\r\n//     const strategyPromises = strategies.map(async (strategy) => {\r\n//       try {\r\n//         console.log(`Trying strategy: ${strategy.name}`);\r\n        \r\n//         let candidates = [];\r\n\r\n//         // Handle custom search strategies (like franchise search)\r\n//         if (strategy.customSearch) {\r\n//           candidates = await strategy.customSearch(TMDB_API_KEY, axiosConfig, resolvedIds, minYear);\r\n//         } else {\r\n//           // Handle regular discover API strategies\r\n//           const params = strategy.getParams();\r\n//           if (!params) return [];\r\n\r\n//           let discoveryUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}`;\r\n//           discoveryUrl += `&primary_release_date.gte=${minYear}-01-01`;\r\n          \r\n//           Object.entries(params).forEach(([key, value]) => {\r\n//             if (value) discoveryUrl += `&${key}=${value}`;\r\n//           });\r\n\r\n//           const discoveryResponse = await axios.get(discoveryUrl, axiosConfig);\r\n//           candidates = discoveryResponse.data.results;\r\n//         }\r\n\r\n//         // Filter by year constraint\r\n//         candidates = candidates\r\n//           .filter(movie => {\r\n//             if (!resolvedIds.includes(movie.id.toString())) {\r\n//               if (!movie.release_date) return false;\r\n//               const releaseYear = new Date(movie.release_date).getFullYear();\r\n//               return releaseYear >= minYear;\r\n//             }\r\n//             return false;\r\n//           })\r\n//           .slice(0, 5); // Take top 5 from each strategy\r\n\r\n//         return candidates.map(candidate => ({\r\n//           ...candidate,\r\n//           strategyName: strategy.name,\r\n//           strategyPriority: strategy.priority,\r\n//           source: \"tmdb\"\r\n//         }));\r\n//       } catch (error) {\r\n//         console.log(`Strategy ${strategy.name} failed:`, error.message);\r\n//         return [];\r\n//       }\r\n//     });\r\n\r\n//     // Wait for all strategies but don't let any single one block\r\n//     const strategyResults = await Promise.allSettled(strategyPromises);\r\n//     strategyResults.forEach(result => {\r\n//       if (result.status === 'fulfilled') {\r\n//         allRecommendations.push(...result.value);\r\n//       }\r\n//     });\r\n\r\n//     console.log(`Total recommendations collected: ${allRecommendations.length}`);\r\n\r\n//     if (allRecommendations.length === 0) {\r\n//       // Enhanced fallback with franchise/language consideration\r\n//       const fallbackMovie = await getEnhancedFallback(inputMovies, movieAnalysis, TMDB_API_KEY, axiosConfig, resolvedIds);\r\n//       if (fallbackMovie) {\r\n//         allRecommendations.push({\r\n//           ...fallbackMovie,\r\n//           strategyName: \"Enhanced Fallback\",\r\n//           strategyPriority: 4,\r\n//           source: \"tmdb\"\r\n//         });\r\n//       }\r\n//     }\r\n\r\n//     if (allRecommendations.length === 0) {\r\n//       throw new Error(\"No recommendations found from any strategy\");\r\n//     }\r\n\r\n//     // Enhanced scoring with movie analysis consideration and genre prioritization\r\n//     const scoredRecommendations = scoreRecommendationsEnhanced(allRecommendations, inputMovies, movieAnalysis);\r\n    \r\n//     // Sort by total score and get the best recommendation\r\n//     scoredRecommendations.sort((a, b) => b.totalScore - a.totalScore);\r\n    \r\n//     const bestRecommendation = scoredRecommendations[0];\r\n    \r\n//     // Get detailed info for the best recommendation only\r\n//     const detailedMovie = await axios.get(\r\n//       `https://api.themoviedb.org/3/movie/${bestRecommendation.id}?api_key=${TMDB_API_KEY}&append_to_response=credits`,\r\n//       axiosConfig\r\n//     );\r\n\r\n//     console.log(\"Best recommendation:\", bestRecommendation.title, \"Strategy:\", bestRecommendation.strategyName, \"Score:\", bestRecommendation.totalScore);\r\n\r\n//     return NextResponse.json({\r\n//       recommendedMovie: {\r\n//         ...detailedMovie.data,\r\n//         totalScore: bestRecommendation.totalScore,\r\n//         strategyUsed: bestRecommendation.strategyName,\r\n//         strategyPriority: bestRecommendation.strategyPriority,\r\n//         source: bestRecommendation.source,\r\n//         redditData: bestRecommendation.redditData || null,\r\n//         movieAnalysis: movieAnalysis,\r\n//         genreMatchDetails: bestRecommendation.genreMatchDetails,\r\n//         alternativeStrategies: scoredRecommendations.slice(1, 4).map(r => ({\r\n//           title: r.title,\r\n//           strategy: r.strategyName,\r\n//           score: r.totalScore,\r\n//           genreMatch: r.genreMatchDetails?.dominantGenreMatch || false\r\n//         })),\r\n//         redditFallbackUsed: redditError ? true : false,\r\n//         redditError: redditError\r\n//       },\r\n//     });\r\n\r\n//   } catch (error) {\r\n//     console.error(\"API Error:\", {\r\n//       message: error.message,\r\n//       code: error.code,\r\n//       status: error.response?.status,\r\n//       data: error.response?.data,\r\n//     });\r\n//     return NextResponse.json(\r\n//       { error: `Failed to fetch recommendation: ${error.message}` },\r\n//       { status: error.response?.status || 500 }\r\n//     );\r\n//   }\r\n// }\r\n\r\n// // Enhanced function to analyze input movies with genre prioritization\r\n// function analyzeInputMoviesEnhanced(inputMovies) {\r\n//   const analysis = {\r\n//     isAnimated: false,\r\n//     isAnime: false,\r\n//     commonLanguage: null,\r\n//     commonCountry: null,\r\n//     franchisePattern: null,\r\n//     franchiseKeywords: [],\r\n//     themes: [],\r\n//     avgRating: 0,\r\n//     avgYear: 0,\r\n//     // NEW: Enhanced genre analysis\r\n//     genreAnalysis: {\r\n//       dominantGenres: [],\r\n//       genreFrequency: {},\r\n//       genreWeights: {},\r\n//       primaryGenre: null,\r\n//       secondaryGenres: [],\r\n//       genreCombo: null\r\n//     },\r\n//     // NEW: Enhanced thematic analysis\r\n//     thematicAnalysis: {\r\n//       commonKeywords: [],\r\n//       thematicPatterns: [],\r\n//       moodIndicators: []\r\n//     },\r\n//     // NEW: Quality indicators\r\n//     qualityIndicators: {\r\n//       avgRating: 0,\r\n//       avgPopularity: 0,\r\n//       ratingRange: [0, 0],\r\n//       qualityTier: 'standard'\r\n//     }\r\n//   };\r\n\r\n//   // Enhanced genre analysis with frequency weighting\r\n//   const allGenres = inputMovies.flatMap(m => m.genres || []);\r\n//   const genreCounts = {};\r\n//   const genreIds = {};\r\n  \r\n//   allGenres.forEach(genre => {\r\n//     genreCounts[genre.name] = (genreCounts[genre.name] || 0) + 1;\r\n//     genreIds[genre.name] = genre.id;\r\n//   });\r\n\r\n//   // Sort genres by frequency (most recurring first)\r\n//   const sortedGenres = Object.entries(genreCounts)\r\n//     .sort(([,a], [,b]) => b - a)\r\n//     .map(([name, count]) => ({ name, count, id: genreIds[name] }));\r\n\r\n//   analysis.genreAnalysis.genreFrequency = genreCounts;\r\n//   analysis.genreAnalysis.dominantGenres = sortedGenres;\r\n\r\n//   if (sortedGenres.length > 0) {\r\n//     analysis.genreAnalysis.primaryGenre = sortedGenres[0];\r\n//     analysis.genreAnalysis.secondaryGenres = sortedGenres.slice(1, 3);\r\n    \r\n//     // Create genre weights based on frequency\r\n//     const maxCount = sortedGenres[0].count;\r\n//     sortedGenres.forEach(genre => {\r\n//       analysis.genreAnalysis.genreWeights[genre.name] = genre.count / maxCount;\r\n//     });\r\n\r\n//     // Create genre combination signature\r\n//     if (sortedGenres.length > 1 && sortedGenres[0].count > 1) {\r\n//       analysis.genreAnalysis.genreCombo = sortedGenres\r\n//         .filter(g => g.count > 1)\r\n//         .map(g => g.name)\r\n//         .join('-');\r\n//     }\r\n//   }\r\n\r\n//   // Enhanced thematic analysis\r\n//   const allKeywords = inputMovies.flatMap(m => m.keywords || []);\r\n//   const keywordCounts = {};\r\n  \r\n//   allKeywords.forEach(keyword => {\r\n//     const keyName = keyword.name.toLowerCase();\r\n//     keywordCounts[keyName] = (keywordCounts[keyName] || 0) + 1;\r\n//   });\r\n\r\n//   // Find recurring thematic elements\r\n//   analysis.thematicAnalysis.commonKeywords = Object.entries(keywordCounts)\r\n//     .filter(([, count]) => count > 1)\r\n//     .sort(([,a], [,b]) => b - a)\r\n//     .map(([name, count]) => ({ name, count }))\r\n//     .slice(0, 5);\r\n\r\n//   // Quality analysis\r\n//   const ratings = inputMovies.map(m => m.vote_average || 0);\r\n//   const popularities = inputMovies.map(m => m.popularity || 0);\r\n  \r\n//   analysis.qualityIndicators.avgRating = ratings.reduce((a, b) => a + b, 0) / ratings.length;\r\n//   analysis.qualityIndicators.avgPopularity = popularities.reduce((a, b) => a + b, 0) / popularities.length;\r\n//   analysis.qualityIndicators.ratingRange = [Math.min(...ratings), Math.max(...ratings)];\r\n  \r\n//   // Determine quality tier\r\n//   if (analysis.qualityIndicators.avgRating >= 7.5) {\r\n//     analysis.qualityIndicators.qualityTier = 'premium';\r\n//   } else if (analysis.qualityIndicators.avgRating >= 6.5) {\r\n//     analysis.qualityIndicators.qualityTier = 'good';\r\n//   } else {\r\n//     analysis.qualityIndicators.qualityTier = 'standard';\r\n//   }\r\n\r\n//   // Original analysis (preserved)\r\n//   const animationKeywords = ['animation', 'anime', 'cartoon', 'animated'];\r\n//   const animeKeywords = ['anime', 'manga', 'japanese animation'];\r\n  \r\n//   const allKeywordNames = allKeywords.map(k => k.name.toLowerCase());\r\n//   const allGenreNames = allGenres.map(g => g.name.toLowerCase());\r\n  \r\n//   analysis.isAnimated = allGenreNames.some(g => g.includes('animation')) || \r\n//                       allKeywordNames.some(k => animationKeywords.some(ak => k.includes(ak)));\r\n  \r\n//   analysis.isAnime = inputMovies.some(m => m.original_language === 'ja') ||\r\n//                     allKeywordNames.some(k => animeKeywords.some(ak => k.includes(ak))) ||\r\n//                     inputMovies.some(m => m.production_countries?.some(c => c.iso_3166_1 === 'JP'));\r\n\r\n//   // Enhanced franchise detection\r\n//   const titles = inputMovies.map(m => m.title.toLowerCase());\r\n  \r\n//   const allWords = titles.flatMap(title => \r\n//     title.split(/\\s+|[^\\w\\s]/).filter(word => word.length > 2)\r\n//   );\r\n  \r\n//   const wordCounts = {};\r\n//   allWords.forEach(word => {\r\n//     const cleanWord = word.toLowerCase();\r\n//     wordCounts[cleanWord] = (wordCounts[cleanWord] || 0) + 1;\r\n//   });\r\n  \r\n//   const franchiseWords = Object.entries(wordCounts)\r\n//     .filter(([word, count]) => count >= 2 && word.length > 2)\r\n//     .map(([word]) => word);\r\n  \r\n//   if (franchiseWords.length > 0) {\r\n//     analysis.franchisePattern = franchiseWords[0];\r\n//     analysis.franchiseKeywords = franchiseWords;\r\n//   }\r\n\r\n//   // Language analysis\r\n//   const languages = inputMovies.map(m => m.original_language);\r\n//   const languageCounts = {};\r\n//   languages.forEach(lang => {\r\n//     languageCounts[lang] = (languageCounts[lang] || 0) + 1;\r\n//   });\r\n//   const mostCommonLang = Object.entries(languageCounts).sort(([,a], [,b]) => b - a)[0];\r\n//   if (mostCommonLang && mostCommonLang[1] >= 2) {\r\n//     analysis.commonLanguage = mostCommonLang[0];\r\n//   }\r\n\r\n//   // Country analysis\r\n//   const countries = inputMovies.flatMap(m => m.production_countries?.map(c => c.iso_3166_1) || []);\r\n//   const countryCounts = {};\r\n//   countries.forEach(country => {\r\n//     countryCounts[country] = (countryCounts[country] || 0) + 1;\r\n//   });\r\n//   const mostCommonCountry = Object.entries(countryCounts).sort(([,a], [,b]) => b - a)[0];\r\n//   if (mostCommonCountry && mostCommonCountry[1] >= 2) {\r\n//     analysis.commonCountry = mostCommonCountry[0];\r\n//   }\r\n\r\n//   analysis.avgRating = analysis.qualityIndicators.avgRating;\r\n//   analysis.avgYear = Math.round(inputMovies.reduce((sum, m) => {\r\n//     const year = new Date(m.release_date).getFullYear();\r\n//     return sum + year;\r\n//   }, 0) / inputMovies.length);\r\n\r\n//   return analysis;\r\n// }\r\n\r\n// // Enhanced strategies with genre prioritization\r\n// async function getEnhancedStrategiesWithTMDB(inputMovies, analysis, TMDB_API_KEY, axiosConfig) {\r\n//   const genres = inputMovies.map(m => m.genres || []);\r\n//   const directors = inputMovies.map(m => \r\n//     m.credits.crew?.filter(c => c.job === 'Director') || []\r\n//   );\r\n//   const studios = inputMovies.map(m => m.production_companies || []);\r\n//   const keywords = inputMovies.map(m => m.keywords || []);\r\n\r\n//   const strategies = [];\r\n\r\n//   // DOMINANT GENRE STRATEGY - NEW AND HIGHEST PRIORITY\r\n//   if (analysis.genreAnalysis.primaryGenre && analysis.genreAnalysis.primaryGenre.count > 1) {\r\n//     const primaryGenre = analysis.genreAnalysis.primaryGenre;\r\n    \r\n//     strategies.push({\r\n//       name: `Dominant ${primaryGenre.name} Films`,\r\n//       priority: 25, // HIGHEST PRIORITY for recurring genres\r\n//       getParams: () => {\r\n//         const params = {\r\n//           with_genres: primaryGenre.id,\r\n//           sort_by: 'vote_average.desc',\r\n//           'vote_count.gte': analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : 500\r\n//         };\r\n\r\n//         // Add secondary genres if they also recur\r\n//         const secondaryRecurringGenres = analysis.genreAnalysis.secondaryGenres\r\n//           .filter(g => g.count > 1)\r\n//           .slice(0, 2);\r\n        \r\n//         if (secondaryRecurringGenres.length > 0) {\r\n//           params.with_genres += ',' + secondaryRecurringGenres.map(g => g.id).join(',');\r\n//         }\r\n\r\n//         // Quality-based filtering\r\n//         if (analysis.qualityIndicators.qualityTier === 'premium') {\r\n//           params['vote_average.gte'] = 7.0;\r\n//         } else if (analysis.qualityIndicators.qualityTier === 'good') {\r\n//           params['vote_average.gte'] = 6.0;\r\n//         }\r\n\r\n//         return params;\r\n//       }\r\n//     });\r\n\r\n//     // Genre combination strategy for complex tastes\r\n//     if (analysis.genreAnalysis.genreCombo) {\r\n//       strategies.push({\r\n//         name: `${analysis.genreAnalysis.genreCombo} Combination`,\r\n//         priority: 22,\r\n//         getParams: () => {\r\n//           const recurringGenres = analysis.genreAnalysis.dominantGenres\r\n//             .filter(g => g.count > 1)\r\n//             .slice(0, 3);\r\n          \r\n//           return {\r\n//             with_genres: recurringGenres.map(g => g.id).join(','),\r\n//             sort_by: 'vote_average.desc',\r\n//             'vote_count.gte': 300\r\n//           };\r\n//         }\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   // FRANCHISE STRATEGY (enhanced priority when combined with genre)\r\n//   if (analysis.franchisePattern || analysis.franchiseKeywords.length > 0) {\r\n//     const basePriority = analysis.genreAnalysis.primaryGenre?.count > 1 ? 20 : 18;\r\n    \r\n//     strategies.push({\r\n//       name: \"Same Franchise/Series\",\r\n//       priority: basePriority,\r\n//       customSearch: async (apiKey, config, excludeIds, minYear) => {\r\n//         const franchiseTerms = analysis.franchiseKeywords.length > 0 \r\n//           ? analysis.franchiseKeywords \r\n//           : [analysis.franchisePattern];\r\n        \r\n//         console.log(\"Searching for franchise terms:\", franchiseTerms);\r\n        \r\n//         const searchResults = [];\r\n        \r\n//         for (const term of franchiseTerms.slice(0, 3)) {\r\n//           try {\r\n//             const searchResponse = await axios.get(\r\n//               `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(term)}&sort_by=popularity.desc`,\r\n//               config\r\n//             );\r\n            \r\n//             let results = searchResponse.data.results\r\n//               .filter(movie => {\r\n//                 if (excludeIds.includes(movie.id.toString())) return false;\r\n//                 if (movie.vote_count < 10) return false;\r\n//                 if (!movie.title.toLowerCase().includes(term.toLowerCase())) return false;\r\n                \r\n//                 if (movie.release_date) {\r\n//                   const releaseYear = new Date(movie.release_date).getFullYear();\r\n//                   if (releaseYear < minYear) return false;\r\n//                 }\r\n                \r\n//                 return true;\r\n//               });\r\n\r\n//             // NEW: Prioritize movies that match the dominant genre within franchise\r\n//             if (analysis.genreAnalysis.primaryGenre) {\r\n//               results = results.sort((a, b) => {\r\n//                 const aHasGenre = a.genre_ids?.includes(analysis.genreAnalysis.primaryGenre.id);\r\n//                 const bHasGenre = b.genre_ids?.includes(analysis.genreAnalysis.primaryGenre.id);\r\n//                 if (aHasGenre && !bHasGenre) return -1;\r\n//                 if (!aHasGenre && bHasGenre) return 1;\r\n//                 return b.popularity - a.popularity;\r\n//               });\r\n//             }\r\n\r\n//             searchResults.push(...results.slice(0, 8));\r\n//             console.log(`Found ${results.length} movies for term \"${term}\" after ${minYear}`);\r\n//           } catch (error) {\r\n//             console.log(`Franchise search failed for term \"${term}\":`, error.message);\r\n//           }\r\n//         }\r\n        \r\n//         const uniqueResults = searchResults.filter((movie, index, self) => \r\n//           index === self.findIndex(m => m.id === movie.id)\r\n//         );\r\n        \r\n//         return uniqueResults\r\n//           .sort((a, b) => b.popularity - a.popularity)\r\n//           .slice(0, 10);\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   // THEMATIC KEYWORD STRATEGY - NEW\r\n//   if (analysis.thematicAnalysis.commonKeywords.length > 0) {\r\n//     const topKeyword = analysis.thematicAnalysis.commonKeywords[0];\r\n    \r\n//     strategies.push({\r\n//       name: `Thematic Match: ${topKeyword.name}`,\r\n//       priority: 16,\r\n//       customSearch: async (apiKey, config, excludeIds, minYear) => {\r\n//         try {\r\n//           // Search for movies with similar keywords\r\n//           const keywordSearch = await axios.get(\r\n//             `https://api.themoviedb.org/3/search/keyword?api_key=${apiKey}&query=${encodeURIComponent(topKeyword.name)}`,\r\n//             config\r\n//           );\r\n          \r\n//           if (keywordSearch.data.results.length > 0) {\r\n//             const keywordId = keywordSearch.data.results[0].id;\r\n            \r\n//             const moviesResponse = await axios.get(\r\n//               `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_keywords=${keywordId}&sort_by=vote_average.desc&vote_count.gte=100&primary_release_date.gte=${minYear}-01-01`,\r\n//               config\r\n//             );\r\n            \r\n//             return moviesResponse.data.results\r\n//               .filter(movie => !excludeIds.includes(movie.id.toString()))\r\n//               .slice(0, 8);\r\n//           }\r\n//         } catch (error) {\r\n//           console.log(`Thematic search failed for \"${topKeyword.name}\":`, error.message);\r\n//         }\r\n//         return [];\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   // Existing strategies with adjusted priorities\r\n//   if (analysis.isAnime) {\r\n//     strategies.push({\r\n//       name: \"Anime Movies\",\r\n//       priority: 14,\r\n//       customSearch: async (apiKey, config, excludeIds, minYear) => {\r\n//         const searches = [\r\n//           axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_original_language=ja&with_genres=16&sort_by=vote_average.desc&vote_count.gte=50&primary_release_date.gte=${minYear}-01-01`, config),\r\n//           axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_keywords=210024&sort_by=popularity.desc&primary_release_date.gte=${minYear}-01-01`, config),\r\n//           axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_companies=10342,2251&sort_by=vote_average.desc&primary_release_date.gte=${minYear}-01-01`, config)\r\n//         ];\r\n        \r\n//         const results = await Promise.allSettled(searches);\r\n//         const allMovies = [];\r\n        \r\n//         results.forEach(result => {\r\n//           if (result.status === 'fulfilled') {\r\n//             allMovies.push(...result.value.data.results);\r\n//           }\r\n//         });\r\n        \r\n//         return allMovies\r\n//           .filter(movie => !excludeIds.includes(movie.id.toString()))\r\n//           .filter((movie, index, self) => index === self.findIndex(m => m.id === movie.id))\r\n//           .slice(0, 10);\r\n//       }\r\n//     });\r\n//   } else if (analysis.isAnimated) {\r\n//     strategies.push({\r\n//       name: \"Animation Movies\",\r\n//       priority: 13,\r\n//       getParams: () => ({\r\n//         with_genres: '16',\r\n//         sort_by: 'vote_average.desc',\r\n//         'vote_count.gte': 500\r\n//       })\r\n//     });\r\n//   }\r\n\r\n//   // Language strategy with genre consideration\r\n//   if (analysis.commonLanguage && analysis.commonLanguage !== 'en') {\r\n//     strategies.push({\r\n//       name: `${analysis.commonLanguage.toUpperCase()} Language Films`,\r\n//       priority: 12,\r\n//       getParams: () => {\r\n//         const params = {\r\n//           with_original_language: analysis.commonLanguage,\r\n//           sort_by: 'vote_average.desc',\r\n//           'vote_count.gte': 100\r\n//         };\r\n\r\n//         // Include dominant genre if available\r\n//         if (analysis.genreAnalysis.primaryGenre) {\r\n//           params.with_genres = analysis.genreAnalysis.primaryGenre.id;\r\n//         }\r\n\r\n//         return params;\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   // Enhanced existing strategies with lower priorities\r\n//   const commonDirector = findMostCommonPerson(directors);\r\n//   if (commonDirector) {\r\n//     const directorId = directors.flat().find(d => d.name === commonDirector)?.id;\r\n//     if (directorId) {\r\n//       strategies.push({\r\n//         name: \"Same Director Different Style\",\r\n//         priority: 10,\r\n//         getParams: () => ({\r\n//           with_crew: directorId,\r\n//           sort_by: 'vote_average.desc'\r\n//         })\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   const commonStudio = findMostCommonStudio(studios);\r\n//   if (commonStudio) {\r\n//     const studioId = studios.flat().find(s => s.name === commonStudio)?.id;\r\n//     if (studioId) {\r\n//       strategies.push({\r\n//         name: \"Same Studio Production\",\r\n//         priority: 9,\r\n//         getParams: () => ({\r\n//           with_companies: studioId,\r\n//           sort_by: 'vote_average.desc'\r\n//         })\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   return strategies;\r\n// }\r\n\r\n// // Enhanced scoring function with genre prioritization\r\n// function scoreRecommendationsEnhanced(allRecommendations, inputMovies, analysis) {\r\n//   return allRecommendations.map(candidate => {\r\n//     let totalScore = 0;\r\n//     let genreMatchDetails = {\r\n//       dominantGenreMatch: false,\r\n//       secondaryGenreMatches: 0,\r\n//       genreOverlapScore: 0,\r\n//       thematicBonus: 0\r\n//     };\r\n    \r\n//     // Base TMDB scoring\r\n//     totalScore += (candidate.vote_average || 0) * 4;\r\n//     totalScore += Math.log10((candidate.popularity || 1)) * 10;\r\n    \r\n//     // Strategy priority bonus\r\n//     totalScore += (candidate.strategyPriority || 0) * 8;\r\n    \r\n//     // Reddit-specific scoring with confidence\r\n//     if (candidate.redditData) {\r\n//       totalScore += (candidate.redditData.redditScore || 0) * 3;\r\n//       totalScore += (candidate.redditData.mentions || 0) * 4;\r\n//       totalScore += (candidate.redditData.confidence || 0) * 5;\r\n//       totalScore += candidate.redditData.subreddets?.length || 0 * 6;\r\n//     }\r\n    \r\n//     // ENHANCED GENRE MATCHING WITH PRIORITIZATION\r\n//     if (analysis.genreAnalysis.primaryGenre && candidate.genre_ids) {\r\n//       const candidateGenres = candidate.genre_ids;\r\n      \r\n//       // DOMINANT GENRE MATCH - MASSIVE BONUS\r\n//       if (candidateGenres.includes(analysis.genreAnalysis.primaryGenre.id)) {\r\n//         const dominantGenreBonus = 80 * analysis.genreAnalysis.genreWeights[analysis.genreAnalysis.primaryGenre.name];\r\n//         totalScore += dominantGenreBonus;\r\n//         genreMatchDetails.dominantGenreMatch = true;\r\n//         genreMatchDetails.genreOverlapScore += dominantGenreBonus;\r\n//       }\r\n      \r\n//       // SECONDARY GENRE MATCHES - Weighted by frequency\r\n//       analysis.genreAnalysis.secondaryGenres.forEach(secondaryGenre => {\r\n//         if (candidateGenres.includes(secondaryGenre.id)) {\r\n//           const secondaryBonus = 40 * analysis.genreAnalysis.genreWeights[secondaryGenre.name];\r\n//           totalScore += secondaryBonus;\r\n//           genreMatchDetails.secondaryGenreMatches++;\r\n//           genreMatchDetails.genreOverlapScore += secondaryBonus;\r\n//         }\r\n//       });\r\n      \r\n//       // GENRE COMBINATION BONUS - When multiple recurring genres match\r\n//       const recurringGenreMatches = analysis.genreAnalysis.dominantGenres\r\n//         .filter(g => g.count > 1 && candidateGenres.includes(g.id))\r\n//         .length;\r\n      \r\n//       if (recurringGenreMatches >= 2) {\r\n//         const comboBonus = 30 * recurringGenreMatches;\r\n//         totalScore += comboBonus;\r\n//         genreMatchDetails.genreOverlapScore += comboBonus;\r\n//       }\r\n//     }\r\n    \r\n//     // THEMATIC KEYWORD MATCHING\r\n//     if (analysis.thematicAnalysis.commonKeywords.length > 0 && candidate.overview) {\r\n//       const overviewLower = candidate.overview.toLowerCase();\r\n//       analysis.thematicAnalysis.commonKeywords.forEach(keyword => {\r\n//         if (overviewLower.includes(keyword.name.toLowerCase())) {\r\n//           const thematicBonus = 20 * keyword.count;\r\n//           totalScore += thematicBonus;\r\n//           genreMatchDetails.thematicBonus += thematicBonus;\r\n//         }\r\n//       });\r\n//     }\r\n    \r\n//     // FRANCHISE MATCHING - Enhanced with genre consideration\r\n//     if (analysis.franchisePattern) {\r\n//       const titleLower = (candidate.title || '').toLowerCase();\r\n//       if (titleLower.includes(analysis.franchisePattern.toLowerCase())) {\r\n//         let franchiseBonus = 100;\r\n//         // Extra bonus if franchise movie also matches dominant genre\r\n//         if (genreMatchDetails.dominantGenreMatch) {\r\n//           franchiseBonus += 50;\r\n//         }\r\n//         totalScore += franchiseBonus;\r\n//       }\r\n      \r\n//       analysis.franchiseKeywords?.forEach(keyword => {\r\n//         if (titleLower.includes(keyword.toLowerCase())) {\r\n//           let keywordBonus = 60;\r\n//           if (genreMatchDetails.dominantGenreMatch) {\r\n//             keywordBonus += 30;\r\n//           }\r\n//           totalScore += keywordBonus;\r\n//         }\r\n//       });\r\n//     }\r\n    \r\n//     // QUALITY ALIGNMENT BONUS\r\n//     const qualityAlignment = calculateQualityAlignment(candidate, analysis.qualityIndicators);\r\n//     totalScore += qualityAlignment * 15;\r\n    \r\n//     // RATING SIMILARITY BONUS - Enhanced\r\n//     const ratingDiff = Math.abs((candidate.vote_average || 0) - analysis.avgRating);\r\n//     if (ratingDiff <= 0.5) totalScore += 25;\r\n//     else if (ratingDiff <= 1) totalScore += 15;\r\n//     else if (ratingDiff <= 1.5) totalScore += 8;\r\n    \r\n//     // LANGUAGE MATCHING\r\n//     if (analysis.commonLanguage && candidate.original_language === analysis.commonLanguage) {\r\n//       let langBonus = 25;\r\n//       // Extra bonus for non-English languages (more specific preference)\r\n//       if (analysis.commonLanguage !== 'en') {\r\n//         langBonus += 20;\r\n//       }\r\n//       totalScore += langBonus;\r\n//     }\r\n    \r\n//     // ANIMATION/ANIME MATCHING\r\n//     if (analysis.isAnime && candidate.original_language === 'ja') {\r\n//       totalScore += 40;\r\n//     }\r\n//     if (analysis.isAnimated && candidate.genre_ids?.includes(16)) {\r\n//       totalScore += 35;\r\n//     }\r\n    \r\n//     // RECENCY BONUS - Weighted by quality tier\r\n//     if (candidate.release_date) {\r\n//       const releaseYear = new Date(candidate.release_date).getFullYear();\r\n//       const recencyMultiplier = analysis.qualityIndicators.qualityTier === 'premium' ? 1.5 : 1.0;\r\n      \r\n//       if (releaseYear >= 2020) totalScore += 15 * recencyMultiplier;\r\n//       else if (releaseYear >= 2015) totalScore += 10 * recencyMultiplier;\r\n//       else if (releaseYear >= 2010) totalScore += 5 * recencyMultiplier;\r\n//     }\r\n    \r\n//     // POPULARITY vs QUALITY BALANCE\r\n//     const popularityScore = Math.log10((candidate.popularity || 1)) * 3;\r\n//     const qualityScore = (candidate.vote_average || 0) * 8;\r\n//     const voteCountReliability = candidate.vote_count >= 500 ? 20 : \r\n//                                 candidate.vote_count >= 100 ? 10 : \r\n//                                 candidate.vote_count >= 50 ? 5 : 0;\r\n    \r\n//     totalScore += popularityScore + qualityScore + voteCountReliability;\r\n    \r\n//     // DIVERSITY vs SIMILARITY BALANCE\r\n//     // Small bonus for movies that have some different genres (discovery factor)\r\n//     const inputGenreIds = inputMovies.flatMap(m => m.genres?.map(g => g.id) || []);\r\n//     const candidateGenreIds = candidate.genre_ids || [];\r\n//     const genreOverlap = candidateGenreIds.filter(g => inputGenreIds.includes(g)).length;\r\n//     const genreDiversity = candidateGenreIds.length - genreOverlap;\r\n    \r\n//     totalScore += genreOverlap * 12; // Familiarity bonus\r\n//     totalScore += Math.min(genreDiversity * 4, 12); // Discovery bonus (capped)\r\n    \r\n//     // VOTE COUNT RELIABILITY TIERS\r\n//     if (candidate.vote_count >= 5000) totalScore += 25;\r\n//     else if (candidate.vote_count >= 1000) totalScore += 15;\r\n//     else if (candidate.vote_count >= 500) totalScore += 10;\r\n    \r\n//     return {\r\n//       ...candidate,\r\n//       totalScore: Math.round(totalScore),\r\n//       genreMatchDetails\r\n//     };\r\n//   });\r\n// }\r\n\r\n// // NEW: Quality alignment calculation\r\n// function calculateQualityAlignment(candidate, qualityIndicators) {\r\n//   const candidateRating = candidate.vote_average || 0;\r\n//   const candidatePopularity = candidate.popularity || 0;\r\n  \r\n//   let alignmentScore = 0;\r\n  \r\n//   // Rating alignment\r\n//   const ratingDiff = Math.abs(candidateRating - qualityIndicators.avgRating);\r\n//   if (ratingDiff <= 0.5) alignmentScore += 3;\r\n//   else if (ratingDiff <= 1.0) alignmentScore += 2;\r\n//   else if (ratingDiff <= 1.5) alignmentScore += 1;\r\n  \r\n//   // Quality tier alignment\r\n//   if (qualityIndicators.qualityTier === 'premium' && candidateRating >= 7.5) {\r\n//     alignmentScore += 3;\r\n//   } else if (qualityIndicators.qualityTier === 'good' && candidateRating >= 6.5) {\r\n//     alignmentScore += 2;\r\n//   } else if (qualityIndicators.qualityTier === 'standard' && candidateRating >= 5.5) {\r\n//     alignmentScore += 1;\r\n//   }\r\n  \r\n//   // Popularity alignment (if input movies are very popular, prefer popular recommendations)\r\n//   if (qualityIndicators.avgPopularity > 50 && candidatePopularity > 30) {\r\n//     alignmentScore += 2;\r\n//   }\r\n  \r\n//   return alignmentScore;\r\n// }\r\n\r\n// // Enhanced Reddit recommendations with improved approach\r\n// async function getImprovedRedditRecommendations(inputMovies, analysis, clientId, clientSecret, axiosConfig) {\r\n//   const accessToken = await getRedditAccessToken(clientId, clientSecret, axiosConfig);\r\n//   const recommendations = new Map();\r\n  \r\n//   // Enhanced subreddit selection based on analysis\r\n//   let subreddits = ['MovieSuggestions', 'movies'];\r\n  \r\n//   if (analysis.isAnime) {\r\n//     subreddits = ['anime', 'AnimeSuggest', 'MovieSuggestions'];\r\n//   } else if (analysis.isAnimated) {\r\n//     subreddits = ['MovieSuggestions', 'movies', 'animation'];\r\n//   } else if (analysis.genreAnalysis.primaryGenre) {\r\n//     // Add genre-specific subreddits if available\r\n//     const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n//     if (genreName === 'horror') subreddits.push('horror');\r\n//     if (genreName === 'science fiction') subreddits.push('scifi');\r\n//   }\r\n\r\n//   // Enhanced search queries with genre focus\r\n//   const searchQueries = generateEnhancedSearchQueries(inputMovies, analysis);\r\n  \r\n//   console.log(\"Reddit search queries:\", searchQueries);\r\n//   console.log(\"Reddit subreddits:\", subreddits);\r\n\r\n//   const searchPromises = [];\r\n  \r\n//   for (const subreddit of subreddits.slice(0, 2)) {\r\n//     for (const query of searchQueries.slice(0, 3)) {\r\n//       const searchUrl = `https://oauth.reddit.com/r/${subreddit}/search?q=${encodeURIComponent(query)}&restrict_sr=1&sort=top&t=year&limit=25`;\r\n      \r\n//       searchPromises.push(\r\n//         axios.get(searchUrl, {\r\n//           ...axiosConfig,\r\n//           timeout: 5000,\r\n//           headers: {\r\n//             'Authorization': `Bearer ${accessToken}`,\r\n//             'User-Agent': 'MovieRecommendationBot/1.0'\r\n//           }\r\n//         }).then(response => ({ subreddit, query, posts: response.data.data.children }))\r\n//         .catch(error => ({ subreddit, query, posts: [], error: error.message }))\r\n//       );\r\n//     }\r\n//   }\r\n\r\n//   const searchResults = await Promise.all(searchPromises);\r\n  \r\n//   for (const { subreddit, posts } of searchResults) {\r\n//     for (const post of posts) {\r\n//       const postData = post.data;\r\n//       if (postData.score < 2) continue;\r\n      \r\n//       const extractedMovies = extractMovieRecommendationsEnhanced(postData, inputMovies, analysis);\r\n      \r\n//       extractedMovies.forEach(movie => {\r\n//         const key = movie.title.toLowerCase();\r\n//         if (!recommendations.has(key)) {\r\n//           recommendations.set(key, {\r\n//             title: movie.title,\r\n//             redditScore: 0,\r\n//             upvotes: 0,\r\n//             mentions: 0,\r\n//             subreddits: new Set(),\r\n//             confidence: 0,\r\n//             genreHints: movie.genreHints || []\r\n//           });\r\n//         }\r\n        \r\n//         const rec = recommendations.get(key);\r\n//         rec.redditScore += movie.score;\r\n//         rec.upvotes += movie.upvotes;\r\n//         rec.mentions += 1;\r\n//         rec.confidence += movie.confidence || 1;\r\n//         rec.subreddits.add(subreddit);\r\n//         if (movie.genreHints) {\r\n//           rec.genreHints.push(...movie.genreHints);\r\n//         }\r\n//       });\r\n//     }\r\n//   }\r\n  \r\n//   console.log(\"Reddit raw recommendations found:\", recommendations.size);\r\n  \r\n//   return Array.from(recommendations.values())\r\n//     .filter(rec => rec.mentions >= 1)\r\n//     .sort((a, b) => (b.redditScore * b.confidence) - (a.redditScore * a.confidence))\r\n//     .slice(0, 10);\r\n// }\r\n\r\n// // Enhanced search query generation\r\n// function generateEnhancedSearchQueries(inputMovies, analysis) {\r\n//   const queries = [];\r\n  \r\n//   // Genre-first queries (NEW - highest priority)\r\n//   if (analysis.genreAnalysis.primaryGenre) {\r\n//     const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n//     queries.push(`best ${genreName} movies`);\r\n//     queries.push(`${genreName} recommendations`);\r\n    \r\n//     if (analysis.genreAnalysis.genreCombo) {\r\n//       queries.push(`${analysis.genreAnalysis.genreCombo.replace('-', ' ')} movies`);\r\n//     }\r\n//   }\r\n  \r\n//   // Franchise-based queries\r\n//   if (analysis.franchisePattern) {\r\n//     queries.push(`${analysis.franchisePattern} movie recommendations`);\r\n//     queries.push(`best ${analysis.franchisePattern} films`);\r\n//   }\r\n\r\n//   // Direct movie queries\r\n//   queries.push(`movies like ${inputMovies[0].title}`);\r\n//   queries.push(`similar to ${inputMovies[0].title}`);\r\n  \r\n//   // Enhanced thematic queries\r\n//   if (analysis.thematicAnalysis.commonKeywords.length > 0) {\r\n//     const topKeyword = analysis.thematicAnalysis.commonKeywords[0];\r\n//     queries.push(`${topKeyword.name} movies`);\r\n//   }\r\n\r\n//   return queries.slice(0, 5);\r\n// }\r\n\r\n// // Enhanced movie extraction from Reddit posts\r\n// function extractMovieRecommendationsEnhanced(postData, inputMovies, analysis) {\r\n//   const recommendations = [];\r\n//   const fullText = (postData.title + ' ' + (postData.selftext || ''));\r\n//   const textLower = fullText.toLowerCase();\r\n//   const inputTitles = inputMovies.map(m => m.title.toLowerCase());\r\n  \r\n//   // Skip posts that only mention input movies\r\n//   const onlyMentionsInput = inputTitles.some(title => textLower.includes(title));\r\n//   if (onlyMentionsInput && !textLower.includes('recommend') && !textLower.includes('similar')) {\r\n//     return [];\r\n//   }\r\n\r\n//   // Enhanced patterns for movie extraction\r\n//   const patterns = [\r\n//     { regex: /\"([^\"]{2,40})\"/g, confidence: 3 },\r\n//     { regex: /'([^']{2,40})'/g, confidence: 3 },\r\n//     { regex: /\\*\\*([^*]{2,40})\\*\\*/g, confidence: 3 },\r\n//     { regex: /__([^_]{2,40})__/g, confidence: 3 },\r\n//     { regex: /([A-Z][a-zA-Z\\s&:'-]{2,35})\\s*\\((\\d{4})\\)/g, confidence: 4 },\r\n//     { regex: /(?:watch|try|check out|recommend)\\s+([A-Z][a-zA-Z\\s&:'-]{2,35})/g, confidence: 3 },\r\n//     { regex: /([A-Z][a-zA-Z\\s&:'-]{2,35})\\s+is\\s+(?:great|amazing|good|excellent)/g, confidence: 3 },\r\n//     { regex: /^\\s*[-*•]\\s*([A-Z][a-zA-Z\\s&:'-]{2,35})/gm, confidence: 2 },\r\n//     { regex: /^\\s*\\d+\\.\\s*([A-Z][a-zA-Z\\s&:'-]{2,35})/gm, confidence: 2 },\r\n//     { regex: /\\b([A-Z][a-zA-Z]{2,25}(?:\\s+[A-Z][a-zA-Z]{2,25}){0,3})\\b/g, confidence: 1 }\r\n//   ];\r\n  \r\n//   patterns.forEach(pattern => {\r\n//     let match;\r\n//     while ((match = pattern.regex.exec(fullText)) !== null) {\r\n//       let title = match[1].trim();\r\n      \r\n//       title = title.replace(/[.,!?;:]$/, '');\r\n      \r\n//       if (title.length < 3 || title.length > 50) continue;\r\n//       if (inputTitles.some(inputTitle => \r\n//         title.toLowerCase().includes(inputTitle) || inputTitle.includes(title.toLowerCase())\r\n//       )) continue;\r\n      \r\n//       const falsePositives = [\r\n//         'movie', 'film', 'cinema', 'theater', 'netflix', 'hulu', 'amazon', 'disney',\r\n//         'watch', 'seen', 'recommend', 'suggestion', 'looking', 'similar', 'like',\r\n//         'genre', 'director', 'actor', 'year', 'time', 'story', 'plot', 'character',\r\n//         'good', 'great', 'bad', 'best', 'worst', 'love', 'hate', 'think', 'feel'\r\n//       ];\r\n      \r\n//       if (falsePositives.some(fp => title.toLowerCase() === fp || title.toLowerCase().includes(fp + ' '))) {\r\n//         continue;\r\n//       }\r\n      \r\n//       let confidenceBoost = 0;\r\n//       const genreHints = [];\r\n      \r\n//       // Franchise pattern matching\r\n//       if (analysis.franchisePattern && title.toLowerCase().includes(analysis.franchisePattern.toLowerCase())) {\r\n//         confidenceBoost += 3;\r\n//       }\r\n      \r\n//       // Genre context detection (NEW)\r\n//       if (analysis.genreAnalysis.primaryGenre) {\r\n//         const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n//         const contextWords = fullText.toLowerCase().split(/\\s+/);\r\n//         const titleIndex = contextWords.findIndex(word => word.includes(title.toLowerCase().split(' ')[0]));\r\n        \r\n//         if (titleIndex !== -1) {\r\n//           const contextWindow = contextWords.slice(Math.max(0, titleIndex - 5), titleIndex + 6);\r\n//           if (contextWindow.some(word => word.includes(genreName))) {\r\n//             confidenceBoost += 2;\r\n//             genreHints.push(genreName);\r\n//           }\r\n//         }\r\n//       }\r\n      \r\n//       recommendations.push({\r\n//         title: title,\r\n//         score: postData.score,\r\n//         upvotes: postData.ups || postData.score,\r\n//         confidence: pattern.confidence + confidenceBoost,\r\n//         genreHints: genreHints\r\n//       });\r\n//     }\r\n//   });\r\n  \r\n//   const uniqueRecs = [];\r\n//   const seenTitles = new Set();\r\n  \r\n//   recommendations\r\n//     .sort((a, b) => b.confidence - a.confidence)\r\n//     .forEach(rec => {\r\n//       const titleKey = rec.title.toLowerCase();\r\n//       if (!seenTitles.has(titleKey)) {\r\n//         seenTitles.add(titleKey);\r\n//         uniqueRecs.push(rec);\r\n//       }\r\n//     });\r\n  \r\n//   return uniqueRecs.slice(0, 8);\r\n// }\r\n\r\n// // Enhanced fallback strategy\r\n// async function getEnhancedFallback(inputMovies, analysis, apiKey, axiosConfig, resolvedIds) {\r\n//   try {\r\n//     // Priority 1: Dominant genre + quality tier matching\r\n//     if (analysis.genreAnalysis.primaryGenre) {\r\n//       console.log(\"Trying dominant genre fallback:\", analysis.genreAnalysis.primaryGenre.name);\r\n      \r\n//       const voteCountMin = analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : \r\n//                           analysis.qualityIndicators.qualityTier === 'good' ? 500 : 100;\r\n      \r\n//       const genreResponse = await axios.get(\r\n//         `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=${analysis.genreAnalysis.primaryGenre.id}&sort_by=vote_average.desc&vote_count.gte=${voteCountMin}`,\r\n//         axiosConfig\r\n//       );\r\n      \r\n//       const candidate = genreResponse.data.results.find(movie => \r\n//         !resolvedIds.includes(movie.id.toString()) && \r\n//         movie.vote_average >= (analysis.avgRating - 1.0)\r\n//       );\r\n      \r\n//       if (candidate) {\r\n//         console.log(\"Found genre-based fallback:\", candidate.title);\r\n//         return candidate;\r\n//       }\r\n//     }\r\n\r\n//     // Priority 2: Franchise search\r\n//     if (analysis.franchisePattern) {\r\n//       console.log(\"Trying franchise fallback for:\", analysis.franchisePattern);\r\n//       const searchResponse = await axios.get(\r\n//         `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(analysis.franchisePattern)}&sort_by=popularity.desc`,\r\n//         axiosConfig\r\n//       );\r\n//       const candidate = searchResponse.data.results.find(movie => \r\n//         !resolvedIds.includes(movie.id.toString()) && \r\n//         movie.vote_count > 10 &&\r\n//         movie.title.toLowerCase().includes(analysis.franchisePattern.toLowerCase())\r\n//       );\r\n//       if (candidate) {\r\n//         console.log(\"Found franchise fallback:\", candidate.title);\r\n//         return candidate;\r\n//       }\r\n//     }\r\n\r\n//     // Priority 3: Language-specific search with genre\r\n//     if (analysis.commonLanguage && analysis.commonLanguage !== 'en') {\r\n//       let langQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_original_language=${analysis.commonLanguage}&sort_by=vote_average.desc&vote_count.gte=50`;\r\n      \r\n//       if (analysis.genreAnalysis.primaryGenre) {\r\n//         langQuery += `&with_genres=${analysis.genreAnalysis.primaryGenre.id}`;\r\n//       }\r\n      \r\n//       const langResponse = await axios.get(langQuery, axiosConfig);\r\n//       const candidate = langResponse.data.results.find(movie => \r\n//         !resolvedIds.includes(movie.id.toString())\r\n//       );\r\n//       if (candidate) return candidate;\r\n//     }\r\n\r\n//     // Priority 4: Animation/Anime specific\r\n//     if (analysis.isAnimated) {\r\n//       let animQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=16&sort_by=vote_average.desc&vote_count.gte=100`;\r\n      \r\n//       if (analysis.isAnime) {\r\n//         animQuery += '&with_original_language=ja';\r\n//       }\r\n      \r\n//       const animResponse = await axios.get(animQuery, axiosConfig);\r\n//       const candidate = animResponse.data.results.find(movie => \r\n//         !resolvedIds.includes(movie.id.toString())\r\n//       );\r\n//       if (candidate) return candidate;\r\n//     }\r\n\r\n//     return null;\r\n//   } catch (error) {\r\n//     console.error(\"Enhanced fallback failed:\", error);\r\n//     return null;\r\n//   }\r\n// }\r\n\r\n// // Keep all other existing helper functions unchanged\r\n// async function getRedditAccessToken(clientId, clientSecret, axiosConfig) {\r\n//   const auth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\r\n  \r\n//   const response = await axios.post(\r\n//     'https://www.reddit.com/api/v1/access_token',\r\n//     'grant_type=client_credentials',\r\n//     {\r\n//       ...axiosConfig,\r\n//       timeout: 5000,\r\n//       headers: {\r\n//         'Authorization': `Basic ${auth}`,\r\n//         'Content-Type': 'application/x-www-form-urlencoded',\r\n//         'User-Agent': 'MovieRecommendationBot/1.0'\r\n//       }\r\n//     }\r\n//   );\r\n//   return response.data.access_token;\r\n// }\r\n\r\n// async function enhanceRedditRecommendationsWithTMDB(redditRecs, apiKey, axiosConfig) {\r\n//   const enhancedRecs = [];\r\n  \r\n//   const enhancePromises = redditRecs.map(async (rec) => {\r\n//     try {\r\n//       let searchResponse = await axios.get(\r\n//         `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(rec.title)}`,\r\n//         { ...axiosConfig, timeout: 4000 }\r\n//       );\r\n      \r\n//       let tmdbResults = searchResponse.data.results;\r\n      \r\n//       if (tmdbResults.length === 0 && rec.title.includes(' ')) {\r\n//         const words = rec.title.split(' ');\r\n//         const partialTitle = words.slice(0, Math.min(3, words.length)).join(' ');\r\n//         searchResponse = await axios.get(\r\n//           `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(partialTitle)}`,\r\n//           { ...axiosConfig, timeout: 4000 }\r\n//         );\r\n//         tmdbResults = searchResponse.data.results;\r\n//       }\r\n      \r\n//       if (tmdbResults.length > 0) {\r\n//         const bestMatch = tmdbResults\r\n//           .filter(movie => movie.vote_count > 5)\r\n//           .reduce((best, current) => {\r\n//             const bestSimilarity = calculateTitleSimilarity(rec.title, best.title);\r\n//             const currentSimilarity = calculateTitleSimilarity(rec.title, current.title);\r\n            \r\n//             const bestScore = bestSimilarity * 0.7 + (best.popularity || 0) * 0.3;\r\n//             const currentScore = currentSimilarity * 0.7 + (current.popularity || 0) * 0.3;\r\n            \r\n//             return currentScore > bestScore ? current : best;\r\n//           });\r\n        \r\n//         if (calculateTitleSimilarity(rec.title, bestMatch.title) > 0.3) {\r\n//           return {\r\n//             ...bestMatch,\r\n//             redditData: {\r\n//               originalTitle: rec.title,\r\n//               redditScore: rec.redditScore,\r\n//               mentions: rec.mentions,\r\n//               upvotes: rec.upvotes,\r\n//               confidence: rec.confidence,\r\n//               subreddits: Array.from(rec.subreddits),\r\n//               genreHints: rec.genreHints || []\r\n//             }\r\n//           };\r\n//         }\r\n//       }\r\n//     } catch (error) {\r\n//       console.log(`Error enhancing Reddit recommendation ${rec.title}:`, error.message);\r\n//     }\r\n//     return null;\r\n//   });\r\n  \r\n//   const results = await Promise.allSettled(enhancePromises);\r\n//   return results\r\n//     .filter(result => result.status === 'fulfilled' && result.value !== null)\r\n//     .map(result => result.value);\r\n// }\r\n\r\n// function calculateTitleSimilarity(title1, title2) {\r\n//   const t1 = title1.toLowerCase().replace(/[^a-z0-9\\s]/g, '').trim();\r\n//   const t2 = title2.toLowerCase().replace(/[^a-z0-9\\s]/g, '').trim();\r\n  \r\n//   if (t1 === t2) return 1.0;\r\n  \r\n//   const words1 = new Set(t1.split(/\\s+/).filter(w => w.length > 0));\r\n//   const words2 = new Set(t2.split(/\\s+/).filter(w => w.length > 0));\r\n  \r\n//   if (words1.size === 0 || words2.size === 0) return 0;\r\n  \r\n//   const intersection = new Set([...words1].filter(x => words2.has(x)));\r\n//   const union = new Set([...words1, ...words2]);\r\n  \r\n//   return intersection.size / union.size;\r\n// }\r\n\r\n// function findMostCommonGenre(genreArrays) {\r\n//   const allGenres = genreArrays.flat();\r\n//   const genreCounts = {};\r\n  \r\n//   allGenres.forEach(genre => {\r\n//     genreCounts[genre.id] = (genreCounts[genre.id] || 0) + 1;\r\n//   });\r\n  \r\n//   const mostCommon = Object.entries(genreCounts)\r\n//     .sort(([,a], [,b]) => b - a)[0];\r\n  \r\n//   return mostCommon ? mostCommon[0] : null;\r\n// }\r\n\r\n// function findMostCommonPerson(personArrays) {\r\n//   const allPeople = personArrays.flat();\r\n//   const personCounts = {};\r\n  \r\n//   allPeople.forEach(person => {\r\n//     personCounts[person.name] = (personCounts[person.name] || 0) + 1;\r\n//   });\r\n  \r\n//   const mostCommon = Object.entries(personCounts)\r\n//     .sort(([,a], [,b]) => b - a)[0];\r\n  \r\n//   return mostCommon && mostCommon[1] > 1 ? mostCommon[0] : null;\r\n// }\r\n\r\n// function findMostCommonStudio(studioArrays) {\r\n//   const allStudios = studioArrays.flat();\r\n//   const studioCounts = {};\r\n  \r\n//   allStudios.forEach(studio => {\r\n//     studioCounts[studio.name] = (studioCounts[studio.name] || 0) + 1;\r\n//   });\r\n  \r\n//   const mostCommon = Object.entries(studioCounts)\r\n//     .sort(([,a], [,b]) => b - a)[0];\r\n  \r\n//   return mostCommon && mostCommon[1] > 1 ? mostCommon[0] : null;\r\n// }\r\n\r\n// function findMostCommonKeyword(keywordArrays) {\r\n//   const allKeywords = keywordArrays.flat();\r\n//   const keywordCounts = {};\r\n  \r\n//   allKeywords.forEach(keyword => {\r\n//     keywordCounts[keyword.id] = (keywordCounts[keyword.id] || 0) + 1;\r\n//   });\r\n  \r\n//   const mostCommon = Object.entries(keywordCounts)\r\n//     .sort(([,a], [,b]) => b - a)[0];\r\n  \r\n//   return mostCommon && mostCommon[1] > 1 ? mostCommon[0] : null;\r\n// }\r\n\r\nimport { NextResponse } from \"next/server\";\r\nimport axios from \"axios\";\r\n\r\nexport async function GET(request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const movieIds = searchParams.get(\"movieIds\")?.split(\",\");\r\n  const year = searchParams.get(\"year\");\r\n\r\n  const axiosConfig = { timeout: 8000 };\r\n  \r\n  let resolvedIds = movieIds;\r\n  if (movieIds.some((id) => isNaN(id))) {\r\n    const searchPromises = movieIds.map((title) =>\r\n      axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.TMDB_API_KEY}&query=${encodeURIComponent(title)}`, axiosConfig)\r\n        .catch(err => ({ data: { results: [] } }))\r\n    );\r\n    const searchResponses = await Promise.all(searchPromises);\r\n    resolvedIds = searchResponses.map((res) => res.data.results[0]?.id).filter((id) => id);\r\n    if (resolvedIds.length !== 3) {\r\n      return NextResponse.json({ error: \"Could not map all titles to valid movie IDs\" }, { status: 400 });\r\n    }\r\n  }\r\n\r\n  if (!resolvedIds || resolvedIds.length !== 3) {\r\n    return NextResponse.json({ error: \"Exactly 3 movie IDs are required\" }, { status: 400 });\r\n  }\r\n\r\n  const TMDB_API_KEY = process.env.TMDB_API_KEY;\r\n  const REDDIT_CLIENT_ID = process.env.REDDIT_CLIENT_ID;\r\n  const REDDIT_CLIENT_SECRET = process.env.REDDIT_CLIENT_SECRET;\r\n\r\n  if (!TMDB_API_KEY) {\r\n    return NextResponse.json({ error: \"Missing TMDB_API_KEY environment variable\" }, { status: 500 });\r\n  }\r\n\r\n  try {\r\n    console.log(\"Fetching movie details for IDs:\", resolvedIds);\r\n    \r\n    const movieDetailsPromises = resolvedIds.map(async (id) => {\r\n      try {\r\n        const [movieDetails, credits, keywords] = await Promise.all([\r\n          axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${TMDB_API_KEY}`, axiosConfig),\r\n          axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${TMDB_API_KEY}`, axiosConfig),\r\n          axios.get(`https://api.themoviedb.org/3/movie/${id}/keywords?api_key=${TMDB_API_KEY}`, axiosConfig).catch(() => ({ data: { keywords: [] } }))\r\n        ]);\r\n        return {\r\n          ...movieDetails.data,\r\n          credits: credits.data,\r\n          keywords: keywords.data.keywords || []\r\n        };\r\n      } catch (error) {\r\n        console.error(`Failed to fetch details for movie ${id}:`, error.message);\r\n        throw error;\r\n      }\r\n    });\r\n\r\n    const inputMovies = await Promise.all(movieDetailsPromises);\r\n    console.log(\"Input movies:\", inputMovies.map(m => ({ title: m.title, id: m.id, original_language: m.original_language })));\r\n\r\n    const movieAnalysis = analyzeInputMoviesEnhanced(inputMovies);\r\n    console.log(\"Movie analysis:\", movieAnalysis);\r\n\r\n    let redditRecommendations = [];\r\n    let redditError = null;\r\n    \r\n    if (REDDIT_CLIENT_ID && REDDIT_CLIENT_SECRET) {\r\n      try {\r\n        console.log(\"Attempting improved Reddit-based recommendations...\");\r\n        const redditPromise = getImprovedRedditRecommendations(inputMovies, movieAnalysis, REDDIT_CLIENT_ID, REDDIT_CLIENT_SECRET, axiosConfig);\r\n        const timeoutPromise = new Promise((_, reject) => \r\n          setTimeout(() => reject(new Error('Reddit timeout')), 12000)\r\n        );\r\n        \r\n        redditRecommendations = await Promise.race([redditPromise, timeoutPromise]);\r\n        console.log(\"Reddit recommendations found:\", redditRecommendations.length);\r\n      } catch (error) {\r\n        console.log(\"Reddit API failed, falling back to TMDB:\", error.message);\r\n        redditError = error.message;\r\n      }\r\n    }\r\n\r\n    const strategies = await getEnhancedStrategiesWithTMDB(inputMovies, movieAnalysis, TMDB_API_KEY, axiosConfig);\r\n\r\n    const allRecommendations = [];\r\n    const minYear = parseInt(year, 10) || 2000;\r\n\r\n    if (redditRecommendations.length > 0) {\r\n      const redditCandidates = await enhanceRedditRecommendationsWithTMDB(\r\n        redditRecommendations.slice(0, 8),\r\n        TMDB_API_KEY, \r\n        axiosConfig,\r\n        movieAnalysis\r\n      );\r\n      redditCandidates\r\n        .filter(candidate => {\r\n          if (!candidate.release_date) return false;\r\n          const releaseYear = new Date(candidate.release_date).getFullYear();\r\n          return releaseYear >= minYear;\r\n        })\r\n        .forEach(candidate => {\r\n          allRecommendations.push({\r\n            ...candidate,\r\n            strategyName: \"Reddit Community Recommendation\",\r\n            strategyPriority: 10,\r\n            source: \"reddit\"\r\n          });\r\n        });\r\n    }\r\n\r\n    const strategyPromises = strategies.map(async (strategy) => {\r\n      try {\r\n        console.log(`Trying strategy: ${strategy.name}`);\r\n        \r\n        let candidates = [];\r\n\r\n        if (strategy.customSearch) {\r\n          candidates = await strategy.customSearch(TMDB_API_KEY, axiosConfig, resolvedIds, minYear);\r\n        } else {\r\n          const params = strategy.getParams();\r\n          if (!params) return [];\r\n\r\n          let discoveryUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}`;\r\n          discoveryUrl += `&primary_release_date.gte=${minYear}-01-01`;\r\n          \r\n          Object.entries(params).forEach(([key, value]) => {\r\n            if (value) discoveryUrl += `&${key}=${value}`;\r\n          });\r\n\r\n          const discoveryResponse = await axios.get(discoveryUrl, axiosConfig);\r\n          candidates = discoveryResponse.data.results;\r\n        }\r\n\r\n        candidates = candidates\r\n          .filter(movie => {\r\n            if (!resolvedIds.includes(movie.id.toString())) {\r\n              if (!movie.release_date) return false;\r\n              const releaseYear = new Date(movie.release_date).getFullYear();\r\n              return releaseYear >= minYear;\r\n            }\r\n            return false;\r\n          })\r\n          .slice(0, 5);\r\n\r\n        return candidates.map(candidate => ({\r\n          ...candidate,\r\n          strategyName: strategy.name,\r\n          strategyPriority: strategy.priority,\r\n          source: \"tmdb\"\r\n        }));\r\n      } catch (error) {\r\n        console.log(`Strategy ${strategy.name} failed:`, error.message);\r\n        return [];\r\n      }\r\n    });\r\n\r\n    const strategyResults = await Promise.allSettled(strategyPromises);\r\n    strategyResults.forEach(result => {\r\n      if (result.status === 'fulfilled') {\r\n        allRecommendations.push(...result.value);\r\n      }\r\n    });\r\n\r\n    console.log(`Total recommendations collected: ${allRecommendations.length}`);\r\n\r\n    if (allRecommendations.length === 0) {\r\n      const fallbackMovie = await getEnhancedFallback(inputMovies, movieAnalysis, TMDB_API_KEY, axiosConfig, resolvedIds);\r\n      if (fallbackMovie) {\r\n        allRecommendations.push({\r\n          ...fallbackMovie,\r\n          strategyName: \"Enhanced Fallback\",\r\n          strategyPriority: 4,\r\n          source: \"tmdb\"\r\n        });\r\n      }\r\n    }\r\n\r\n    if (allRecommendations.length === 0) {\r\n      throw new Error(\"No recommendations found from any strategy\");\r\n    }\r\n\r\n    const scoredRecommendations = scoreRecommendationsEnhanced(allRecommendations, inputMovies, movieAnalysis);\r\n    \r\n    scoredRecommendations.sort((a, b) => b.totalScore - a.totalScore);\r\n    \r\n    const bestRecommendation = scoredRecommendations[0];\r\n    \r\n    const detailedMovie = await axios.get(\r\n      `https://api.themoviedb.org/3/movie/${bestRecommendation.id}?api_key=${TMDB_API_KEY}&append_to_response=credits`,\r\n      axiosConfig\r\n    );\r\n\r\n    console.log(\"Best recommendation:\", bestRecommendation.title, \"Strategy:\", bestRecommendation.strategyName, \"Score:\", bestRecommendation.totalScore);\r\n\r\n    return NextResponse.json({\r\n      recommendedMovie: {\r\n        ...detailedMovie.data,\r\n        totalScore: bestRecommendation.totalScore,\r\n        strategyUsed: bestRecommendation.strategyName,\r\n        strategyPriority: bestRecommendation.strategyPriority,\r\n        source: bestRecommendation.source,\r\n        redditData: bestRecommendation.redditData || null,\r\n        movieAnalysis: movieAnalysis,\r\n        genreMatchDetails: bestRecommendation.genreMatchDetails,\r\n        alternativeStrategies: scoredRecommendations.slice(1, 4).map(r => ({\r\n          title: r.title,\r\n          strategy: r.strategyName,\r\n          score: r.totalScore,\r\n          genreMatch: r.genreMatchDetails?.dominantGenreMatch || false\r\n        })),\r\n        redditFallbackUsed: redditError ? true : false,\r\n        redditError: redditError\r\n      },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"API Error:\", {\r\n      message: error.message,\r\n      code: error.code,\r\n      status: error.response?.status,\r\n      data: error.response?.data,\r\n    });\r\n    return NextResponse.json(\r\n      { error: `Failed to fetch recommendation: ${error.message}` },\r\n      { status: error.response?.status || 500 }\r\n    );\r\n  }\r\n}\r\n\r\nfunction analyzeInputMoviesEnhanced(inputMovies) {\r\n  const analysis = {\r\n    isAnimated: false,\r\n    isAnime: false,\r\n    commonLanguage: null,\r\n    commonCountry: null,\r\n    franchisePattern: null,\r\n    franchiseKeywords: [],\r\n    themes: [],\r\n    avgRating: 0,\r\n    avgYear: 0,\r\n    genreAnalysis: {\r\n      dominantGenres: [],\r\n      genreFrequency: {},\r\n      genreWeights: {},\r\n      primaryGenre: null,\r\n      secondaryGenres: [],\r\n      genreCombo: null\r\n    },\r\n    thematicAnalysis: {\r\n      commonKeywords: [],\r\n      thematicPatterns: [],\r\n      moodIndicators: []\r\n    },\r\n    qualityIndicators: {\r\n      avgRating: 0,\r\n      avgPopularity: 0,\r\n      ratingRange: [0, 0],\r\n      qualityTier: 'standard'\r\n    }\r\n  };\r\n\r\n  const allGenres = inputMovies.flatMap(m => m.genres || []);\r\n  const genreCounts = {};\r\n  const genreIds = {};\r\n  \r\n  allGenres.forEach(genre => {\r\n    genreCounts[genre.name] = (genreCounts[genre.name] || 0) + 1;\r\n    genreIds[genre.name] = genre.id;\r\n  });\r\n\r\n  const sortedGenres = Object.entries(genreCounts)\r\n    .sort(([,a], [,b]) => b - a)\r\n    .map(([name, count]) => ({ name, count, id: genreIds[name] }));\r\n\r\n  analysis.genreAnalysis.genreFrequency = genreCounts;\r\n  analysis.genreAnalysis.dominantGenres = sortedGenres;\r\n\r\n  if (sortedGenres.length > 0) {\r\n    analysis.genreAnalysis.primaryGenre = sortedGenres[0];\r\n    analysis.genreAnalysis.secondaryGenres = sortedGenres.slice(1, 3);\r\n    \r\n    const maxCount = sortedGenres[0].count;\r\n    sortedGenres.forEach(genre => {\r\n      analysis.genreAnalysis.genreWeights[genre.name] = genre.count / maxCount;\r\n    });\r\n\r\n    if (sortedGenres.length > 1 && sortedGenres[0].count > 1) {\r\n      analysis.genreAnalysis.genreCombo = sortedGenres\r\n        .filter(g => g.count > 1)\r\n        .map(g => g.name)\r\n        .join('-');\r\n    }\r\n  }\r\n\r\n  const allKeywords = inputMovies.flatMap(m => m.keywords || []);\r\n  const keywordCounts = {};\r\n  \r\n  allKeywords.forEach(keyword => {\r\n    const keyName = keyword.name.toLowerCase();\r\n    keywordCounts[keyName] = (keywordCounts[keyName] || 0) + 1;\r\n  });\r\n\r\n  analysis.thematicAnalysis.commonKeywords = Object.entries(keywordCounts)\r\n    .filter(([, count]) => count > 1)\r\n    .sort(([,a], [,b]) => b - a)\r\n    .map(([name, count]) => ({ name, count }))\r\n    .slice(0, 5);\r\n\r\n  const ratings = inputMovies.map(m => m.vote_average || 0);\r\n  const popularities = inputMovies.map(m => m.popularity || 0);\r\n  \r\n  analysis.qualityIndicators.avgRating = ratings.reduce((a, b) => a + b, 0) / ratings.length;\r\n  analysis.qualityIndicators.avgPopularity = popularities.reduce((a, b) => a + b, 0) / popularities.length;\r\n  analysis.qualityIndicators.ratingRange = [Math.min(...ratings), Math.max(...ratings)];\r\n  \r\n  if (analysis.qualityIndicators.avgRating >= 7.5) {\r\n    analysis.qualityIndicators.qualityTier = 'premium';\r\n  } else if (analysis.qualityIndicators.avgRating >= 6.5) {\r\n    analysis.qualityIndicators.qualityTier = 'good';\r\n  } else {\r\n    analysis.qualityIndicators.qualityTier = 'standard';\r\n  }\r\n\r\n  const animationKeywords = ['animation', 'anime', 'cartoon', 'animated'];\r\n  const animeKeywords = ['anime', 'manga', 'japanese animation'];\r\n  \r\n  const allKeywordNames = allKeywords.map(k => k.name.toLowerCase());\r\n  const allGenreNames = allGenres.map(g => g.name.toLowerCase());\r\n  \r\n  analysis.isAnimated = allGenreNames.some(g => g.includes('animation')) || \r\n                      allKeywordNames.some(k => animationKeywords.some(ak => k.includes(ak)));\r\n  \r\n  analysis.isAnime = inputMovies.some(m => m.original_language === 'ja') ||\r\n                    allKeywordNames.some(k => animeKeywords.some(ak => k.includes(ak))) ||\r\n                    inputMovies.some(m => m.production_countries?.some(c => c.iso_3166_1 === 'JP'));\r\n\r\n  const titles = inputMovies.map(m => m.title.toLowerCase());\r\n  \r\n  const allWords = titles.flatMap(title => \r\n    title.split(/\\s+|[^\\w\\s]/).filter(word => word.length > 2)\r\n  );\r\n  \r\n  const wordCounts = {};\r\n  allWords.forEach(word => {\r\n    const cleanWord = word.toLowerCase();\r\n    wordCounts[cleanWord] = (wordCounts[cleanWord] || 0) + 1;\r\n  });\r\n  \r\n  const franchiseWords = Object.entries(wordCounts)\r\n    .filter(([word, count]) => count >= 2 && word.length > 2)\r\n    .map(([word]) => word);\r\n  \r\n  if (franchiseWords.length > 0) {\r\n    analysis.franchisePattern = franchiseWords[0];\r\n    analysis.franchiseKeywords = franchiseWords;\r\n  }\r\n\r\n  const languages = inputMovies.map(m => m.original_language);\r\n  const languageCounts = {};\r\n  languages.forEach(lang => {\r\n    languageCounts[lang] = (languageCounts[lang] || 0) + 1;\r\n  });\r\n  const mostCommonLang = Object.entries(languageCounts).sort(([,a], [,b]) => b - a)[0];\r\n  if (mostCommonLang && mostCommonLang[1] >= 2) {\r\n    analysis.commonLanguage = mostCommonLang[0];\r\n  }\r\n\r\n  const countries = inputMovies.flatMap(m => m.production_countries?.map(c => c.iso_3166_1) || []);\r\n  const countryCounts = {};\r\n  countries.forEach(country => {\r\n    countryCounts[country] = (countryCounts[country] || 0) + 1;\r\n  });\r\n  const mostCommonCountry = Object.entries(countryCounts).sort(([,a], [,b]) => b - a)[0];\r\n  if (mostCommonCountry && mostCommonCountry[1] >= 2) {\r\n    analysis.commonCountry = mostCommonCountry[0];\r\n  }\r\n\r\n  analysis.avgRating = analysis.qualityIndicators.avgRating;\r\n  analysis.avgYear = Math.round(inputMovies.reduce((sum, m) => {\r\n    const year = new Date(m.release_date).getFullYear();\r\n    return sum + year;\r\n  }, 0) / inputMovies.length);\r\n\r\n  return analysis;\r\n}\r\n\r\nasync function getEnhancedStrategiesWithTMDB(inputMovies, analysis, TMDB_API_KEY, axiosConfig) {\r\n  const genres = inputMovies.map(m => m.genres || []);\r\n  const directors = inputMovies.map(m => \r\n    m.credits.crew?.filter(c => c.job === 'Director') || []\r\n  );\r\n  const studios = inputMovies.map(m => m.production_companies || []);\r\n  const keywords = inputMovies.map(m => m.keywords || []);\r\n\r\n  const strategies = [];\r\n\r\n  if (analysis.commonLanguage) {\r\n    strategies.push({\r\n      name: `${analysis.commonLanguage.toUpperCase()} Language Films`,\r\n      priority: 30,\r\n      getParams: () => {\r\n        const params = {\r\n          with_original_language: analysis.commonLanguage,\r\n          sort_by: 'vote_average.desc',\r\n          'vote_count.gte': 100\r\n        };\r\n\r\n        if (analysis.genreAnalysis.primaryGenre) {\r\n          params.with_genres = analysis.genreAnalysis.primaryGenre.id;\r\n        }\r\n\r\n        if (analysis.qualityIndicators.qualityTier === 'premium') {\r\n          params['vote_average.gte'] = 7.0;\r\n        } else if (analysis.qualityIndicators.qualityTier === 'good') {\r\n          params['vote_average.gte'] = 6.0;\r\n        }\r\n\r\n        if (analysis.isAnimated === false) {\r\n          params.without_genres = '16';\r\n        }\r\n\r\n        return params;\r\n      }\r\n    });\r\n  }\r\n\r\n  if (analysis.genreAnalysis.primaryGenre && analysis.genreAnalysis.primaryGenre.count > 1) {\r\n    const primaryGenre = analysis.genreAnalysis.primaryGenre;\r\n    \r\n    strategies.push({\r\n      name: `Dominant ${primaryGenre.name} Films`,\r\n      priority: 25,\r\n      getParams: () => {\r\n        const params = {\r\n          with_genres: primaryGenre.id,\r\n          sort_by: 'vote_average.desc',\r\n          'vote_count.gte': analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : 500\r\n        };\r\n\r\n        if (analysis.commonLanguage) {\r\n          params.with_original_language = analysis.commonLanguage;\r\n        }\r\n\r\n        const secondaryRecurringGenres = analysis.genreAnalysis.secondaryGenres\r\n          .filter(g => g.count > 1)\r\n          .slice(0, 2);\r\n        \r\n        if (secondaryRecurringGenres.length > 0) {\r\n          params.with_genres += ',' + secondaryRecurringGenres.map(g => g.id).join(',');\r\n        }\r\n\r\n        if (analysis.qualityIndicators.qualityTier === 'premium') {\r\n          params['vote_average.gte'] = 7.0;\r\n        } else if (analysis.qualityIndicators.qualityTier === 'good') {\r\n          params['vote_average.gte'] = 6.0;\r\n        }\r\n\r\n        if (analysis.isAnimated === false) {\r\n          params.without_genres = '16';\r\n        }\r\n\r\n        return params;\r\n      }\r\n    });\r\n\r\n    if (analysis.genreAnalysis.genreCombo) {\r\n      strategies.push({\r\n        name: `${analysis.genreAnalysis.genreCombo} Combination`,\r\n        priority: 22,\r\n        getParams: () => {\r\n          const recurringGenres = analysis.genreAnalysis.dominantGenres\r\n            .filter(g => g.count > 1)\r\n            .slice(0, 3);\r\n          \r\n          const params = {\r\n            with_genres: recurringGenres.map(g => g.id).join(','),\r\n            sort_by: 'vote_average.desc',\r\n            'vote_count.gte': 300\r\n          };\r\n\r\n          if (analysis.commonLanguage) {\r\n            params.with_original_language = analysis.commonLanguage;\r\n          }\r\n\r\n          if (analysis.isAnimated === false) {\r\n            params.without_genres = '16';\r\n          }\r\n\r\n          return params;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  if (analysis.franchisePattern || analysis.franchiseKeywords.length > 0) {\r\n    const basePriority = analysis.franchisePattern ? 35 : 18;\r\n    \r\n    strategies.push({\r\n      name: \"Same Franchise/Series\",\r\n      priority: basePriority,\r\n      customSearch: async (apiKey, config, excludeIds, minYear) => {\r\n        const franchiseTerms = analysis.franchiseKeywords.length > 0 \r\n          ? analysis.franchiseKeywords \r\n          : [analysis.franchisePattern];\r\n        \r\n        console.log(\"Searching for franchise terms:\", franchiseTerms);\r\n        \r\n        const searchResults = [];\r\n        \r\n        for (const term of franchiseTerms.slice(0, 3)) {\r\n          try {\r\n            let searchUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(term)}&sort_by=vote_average.desc`; // Changed to vote_average.desc\r\n            if (analysis.commonLanguage) {\r\n              searchUrl += `&with_original_language=${analysis.commonLanguage}`;\r\n            }\r\n            \r\n            const searchResponse = await axios.get(searchUrl, config);\r\n            \r\n            let results = searchResponse.data.results\r\n              .filter(movie => {\r\n                if (excludeIds.includes(movie.id.toString())) return false;\r\n                if (movie.vote_count < 100) return false; // Increased vote_count threshold\r\n                if (!movie.title.toLowerCase().includes(term.toLowerCase())) return false;\r\n                if (analysis.isAnimated === false && movie.genre_ids?.includes(16)) return false;\r\n                \r\n                if (movie.release_date) {\r\n                  const releaseYear = new Date(movie.release_date).getFullYear();\r\n                  if (releaseYear < minYear) return false;\r\n                }\r\n                \r\n                return true;\r\n              });\r\n\r\n            searchResults.push(...results.slice(0, 10)); // Increased to 10 candidates\r\n            console.log(`Found ${results.length} movies for term \"${term}\" after ${minYear}`);\r\n          } catch (error) {\r\n            console.log(`Franchise search failed for term \"${term}\":`, error.message);\r\n          }\r\n        }\r\n        \r\n        const uniqueResults = searchResults.filter((movie, index, self) => \r\n          index === self.findIndex(m => m.id === movie.id)\r\n        );\r\n        \r\n        return uniqueResults\r\n          .sort((a, b) => b.vote_average - a.vote_average) // Sort by vote_average\r\n          .slice(0, 10);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (analysis.thematicAnalysis.commonKeywords.length > 0) {\r\n    const topKeyword = analysis.thematicAnalysis.commonKeywords[0];\r\n    \r\n    strategies.push({\r\n      name: `Thematic Match: ${topKeyword.name}`,\r\n      priority: 16,\r\n      customSearch: async (apiKey, config, excludeIds, minYear) => {\r\n        try {\r\n          const keywordSearch = await axios.get(\r\n            `https://api.themoviedb.org/3/search/keyword?api_key=${apiKey}&query=${encodeURIComponent(topKeyword.name)}`,\r\n            config\r\n          );\r\n          \r\n          if (keywordSearch.data.results.length > 0) {\r\n            const keywordId = keywordSearch.data.results[0].id;\r\n            \r\n            let moviesUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_keywords=${keywordId}&sort_by=vote_average.desc&vote_count.gte=100&primary_release_date.gte=${minYear}-01-01`;\r\n            if (analysis.commonLanguage) {\r\n              moviesUrl += `&with_original_language=${analysis.commonLanguage}`;\r\n            }\r\n            if (analysis.isAnimated === false) {\r\n              moviesUrl += `&without_genres=16`;\r\n            }\r\n            \r\n            const moviesResponse = await axios.get(moviesUrl, config);\r\n            \r\n            return moviesResponse.data.results\r\n              .filter(movie => !excludeIds.includes(movie.id.toString()))\r\n              .slice(0, 8);\r\n          }\r\n        } catch (error) {\r\n          console.log(`Thematic search failed for \"${topKeyword.name}\":`, error.message);\r\n        }\r\n        return [];\r\n      }\r\n    });\r\n  }\r\n\r\n  if (analysis.isAnime) {\r\n    strategies.push({\r\n      name: \"Anime Movies\",\r\n      priority: 35,\r\n      customSearch: async (apiKey, config, excludeIds, minYear) => {\r\n        const searches = [\r\n          axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_original_language=ja&with_genres=16&sort_by=vote_average.desc&vote_count.gte=50&primary_release_date.gte=${minYear}-01-01`, config),\r\n          axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_keywords=210024&sort_by=popularity.desc&primary_release_date.gte=${minYear}-01-01`, config),\r\n          axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_companies=10342,2251&sort_by=vote_average.desc&primary_release_date.gte=${minYear}-01-01`, config)\r\n        ];\r\n        \r\n        const results = await Promise.allSettled(searches);\r\n        const allMovies = [];\r\n        \r\n        results.forEach(result => {\r\n          if (result.status === 'fulfilled') {\r\n            allMovies.push(...result.value.data.results);\r\n          }\r\n        });\r\n        \r\n        return allMovies\r\n          .filter(movie => !excludeIds.includes(movie.id.toString()))\r\n          .filter((movie, index, self) => index === self.findIndex(m => m.id === movie.id))\r\n          .slice(0, 10);\r\n      }\r\n    });\r\n  } else if (analysis.isAnimated) {\r\n    strategies.push({\r\n      name: \"Animation Movies\",\r\n      priority: 13,\r\n      getParams: () => {\r\n        const params = {\r\n          with_genres: '16',\r\n          sort_by: 'vote_average.desc',\r\n          'vote_count.gte': 500\r\n        };\r\n        if (analysis.commonLanguage) {\r\n          params.with_original_language = analysis.commonLanguage;\r\n        }\r\n        return params;\r\n      }\r\n    });\r\n  }\r\n\r\n  const commonDirector = findMostCommonPerson(directors);\r\n  if (commonDirector) {\r\n    const directorId = directors.flat().find(d => d.name === commonDirector)?.id;\r\n    if (directorId) {\r\n      strategies.push({\r\n        name: \"Same Director Different Style\",\r\n        priority: 10,\r\n        getParams: () => {\r\n          const params = {\r\n            with_crew: directorId,\r\n            sort_by: 'vote_average.desc'\r\n          };\r\n          if (analysis.commonLanguage) {\r\n            params.with_original_language = analysis.commonLanguage;\r\n          }\r\n          if (analysis.isAnimated === false) {\r\n            params.without_genres = '16';\r\n          }\r\n          return params;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const commonStudio = findMostCommonStudio(studios);\r\n  if (commonStudio) {\r\n    const studioId = studios.flat().find(s => s.name === commonStudio)?.id;\r\n    if (studioId) {\r\n      strategies.push({\r\n        name: \"Same Studio Production\",\r\n        priority: 9,\r\n        getParams: () => {\r\n          const params = {\r\n            with_companies: studioId,\r\n            sort_by: 'vote_average.desc'\r\n          };\r\n          if (analysis.commonLanguage) {\r\n            params.with_original_language = analysis.commonLanguage;\r\n          }\r\n          if (analysis.isAnimated === false) {\r\n            params.without_genres = '16';\r\n          }\r\n          return params;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return strategies;\r\n}\r\n\r\nfunction scoreRecommendationsEnhanced(allRecommendations, inputMovies, analysis) {\r\n  return allRecommendations.map(candidate => {\r\n    let totalScore = 0;\r\n    let genreMatchDetails = {\r\n      dominantGenreMatch: false,\r\n      secondaryGenreMatches: 0,\r\n      genreOverlapScore: 0,\r\n      thematicBonus: 0\r\n    };\r\n    \r\n    totalScore += (candidate.vote_average || 0) * 4;\r\n    totalScore += Math.log10((candidate.popularity || 1)) * 10;\r\n    \r\n    totalScore += (candidate.strategyPriority || 0) * 8;\r\n    \r\n    if (candidate.redditData) {\r\n      totalScore += (candidate.redditData.redditScore || 0) * 3;\r\n      totalScore += (candidate.redditData.mentions || 0) * 4;\r\n      totalScore += (candidate.redditData.confidence || 0) * 5;\r\n      totalScore += candidate.redditData.subreddits?.length || 0 * 6;\r\n    }\r\n    \r\n    if (analysis.genreAnalysis.primaryGenre && candidate.genre_ids) {\r\n      const candidateGenres = candidate.genre_ids;\r\n      \r\n      if (candidateGenres.includes(analysis.genreAnalysis.primaryGenre.id)) {\r\n        const dominantGenreBonus = 100 * analysis.genreAnalysis.genreWeights[analysis.genreAnalysis.primaryGenre.name];\r\n        totalScore += dominantGenreBonus;\r\n        genreMatchDetails.dominantGenreMatch = true;\r\n        genreMatchDetails.genreOverlapScore += dominantGenreBonus;\r\n      }\r\n      \r\n      analysis.genreAnalysis.secondaryGenres.forEach(secondaryGenre => {\r\n        if (candidateGenres.includes(secondaryGenre.id)) {\r\n          const secondaryBonus = 50 * analysis.genreAnalysis.genreWeights[secondaryGenre.name];\r\n          totalScore += secondaryBonus;\r\n          genreMatchDetails.secondaryGenreMatches++;\r\n          genreMatchDetails.genreOverlapScore += secondaryBonus;\r\n        }\r\n      });\r\n      \r\n      const recurringGenreMatches = analysis.genreAnalysis.dominantGenres\r\n        .filter(g => g.count > 1 && candidateGenres.includes(g.id))\r\n        .length;\r\n      \r\n      if (recurringGenreMatches >= 2) {\r\n        const comboBonus = 40 * recurringGenreMatches;\r\n        totalScore += comboBonus;\r\n        genreMatchDetails.genreOverlapScore += comboBonus;\r\n      }\r\n    }\r\n    \r\n    if (analysis.thematicAnalysis.commonKeywords.length > 0 && candidate.overview) {\r\n      const overviewLower = candidate.overview.toLowerCase();\r\n      analysis.thematicAnalysis.commonKeywords.forEach(keyword => {\r\n        if (overviewLower.includes(keyword.name.toLowerCase())) {\r\n          const thematicBonus = 20 * keyword.count;\r\n          totalScore += thematicBonus;\r\n          genreMatchDetails.thematicBonus += thematicBonus;\r\n        }\r\n      });\r\n    }\r\n    \r\n    if (analysis.franchisePattern) {\r\n      const titleLower = (candidate.title || '').toLowerCase();\r\n      if (titleLower.includes(analysis.franchisePattern.toLowerCase())) {\r\n        let franchiseBonus = 200; // Increased franchise bonus\r\n        if (genreMatchDetails.dominantGenreMatch) {\r\n          franchiseBonus += 100; // Increased bonus for genre match\r\n        }\r\n        totalScore += franchiseBonus;\r\n      }\r\n      \r\n      analysis.franchiseKeywords?.forEach(keyword => {\r\n        if (titleLower.includes(keyword.toLowerCase())) {\r\n          let keywordBonus = 100; // Increased keyword bonus\r\n          if (genreMatchDetails.dominantGenreMatch) {\r\n            keywordBonus += 50;\r\n          }\r\n          totalScore += keywordBonus;\r\n        }\r\n      });\r\n    }\r\n    \r\n    const qualityAlignment = calculateQualityAlignment(candidate, analysis.qualityIndicators);\r\n    totalScore += qualityAlignment * 15;\r\n    \r\n    if (analysis.qualityIndicators.qualityTier === 'premium' && candidate.vote_average >= 7.5) {\r\n      totalScore += 50; // Quality tier bonus for premium\r\n    }\r\n    \r\n    const ratingDiff = Math.abs((candidate.vote_average || 0) - analysis.avgRating);\r\n    if (ratingDiff <= 0.5) totalScore += 25;\r\n    else if (ratingDiff <= 1) totalScore += 15;\r\n    else if (ratingDiff <= 1.5) totalScore += 8;\r\n    \r\n    if (analysis.commonLanguage && candidate.original_language === analysis.commonLanguage) {\r\n      let langBonus = 50;\r\n      if (analysis.commonLanguage !== 'en') {\r\n        langBonus += 50;\r\n      }\r\n      totalScore += langBonus;\r\n    }\r\n    \r\n    if (analysis.isAnime && candidate.original_language === 'ja') {\r\n      totalScore += 100;\r\n    }\r\n    if (analysis.isAnimated && candidate.genre_ids?.includes(16)) {\r\n      totalScore += 80;\r\n    }\r\n    if (analysis.isAnimated === false && !candidate.genre_ids?.includes(16)) {\r\n      totalScore += 100;\r\n    }\r\n    \r\n    if (candidate.release_date) {\r\n      const releaseYear = new Date(candidate.release_date).getFullYear();\r\n      const recencyMultiplier = analysis.qualityIndicators.qualityTier === 'premium' ? 1.5 : 1.0;\r\n      \r\n      if (releaseYear >= 2020) totalScore += 15 * recencyMultiplier;\r\n      else if (releaseYear >= 2015) totalScore += 10 * recencyMultiplier;\r\n      else if (releaseYear >= 2010) totalScore += 5 * recencyMultiplier;\r\n    }\r\n    \r\n    const popularityScore = Math.log10((candidate.popularity || 1)) * 3;\r\n    const qualityScore = (candidate.vote_average || 0) * 8;\r\n    const voteCountReliability = candidate.vote_count >= 500 ? 20 : \r\n                                candidate.vote_count >= 100 ? 10 : \r\n                                candidate.vote_count >= 50 ? 5 : 0;\r\n    \r\n    totalScore += popularityScore + qualityScore + voteCountReliability;\r\n    \r\n    const inputGenreIds = inputMovies.flatMap(m => m.genres?.map(g => g.id) || []);\r\n    const candidateGenreIds = candidate.genre_ids || [];\r\n    const genreOverlap = candidateGenreIds.filter(g => inputGenreIds.includes(g)).length;\r\n    const genreDiversity = candidateGenreIds.length - genreOverlap;\r\n    \r\n    totalScore += genreOverlap * 12;\r\n    totalScore += Math.min(genreDiversity * 4, 12);\r\n    \r\n    if (candidate.vote_count >= 5000) totalScore += 25;\r\n    else if (candidate.vote_count >= 1000) totalScore += 15;\r\n    else if (candidate.vote_count >= 500) totalScore += 10;\r\n    \r\n    return {\r\n      ...candidate,\r\n      totalScore: Math.round(totalScore),\r\n      genreMatchDetails\r\n    };\r\n  });\r\n}\r\n\r\nfunction calculateQualityAlignment(candidate, qualityIndicators) {\r\n  const candidateRating = candidate.vote_average || 0;\r\n  const candidatePopularity = candidate.popularity || 0;\r\n  \r\n  let alignmentScore = 0;\r\n  \r\n  const ratingDiff = Math.abs(candidateRating - qualityIndicators.avgRating);\r\n  if (ratingDiff <= 0.5) alignmentScore += 3;\r\n  else if (ratingDiff <= 1.0) alignmentScore += 2;\r\n  else if (ratingDiff <= 1.5) alignmentScore += 1;\r\n  \r\n  if (qualityIndicators.qualityTier === 'premium' && candidateRating >= 7.5) {\r\n    alignmentScore += 3;\r\n  } else if (qualityIndicators.qualityTier === 'good' && candidateRating >= 6.5) {\r\n    alignmentScore += 2;\r\n  } else if (qualityIndicators.qualityTier === 'standard' && candidateRating >= 5.5) {\r\n    alignmentScore += 1;\r\n  }\r\n  \r\n  if (qualityIndicators.avgPopularity > 50 && candidatePopularity > 30) {\r\n    alignmentScore += 2;\r\n  }\r\n  \r\n  return alignmentScore;\r\n}\r\n\r\nasync function getImprovedRedditRecommendations(inputMovies, analysis, clientId, clientSecret, axiosConfig) {\r\n  const accessToken = await getRedditAccessToken(clientId, clientSecret, axiosConfig);\r\n  const recommendations = new Map();\r\n  \r\n  let subreddits = ['MovieSuggestions', 'movies'];\r\n  \r\n  if (analysis.isAnime) {\r\n    subreddits = ['anime', 'AnimeSuggest', 'MovieSuggestions'];\r\n  } else if (analysis.isAnimated) {\r\n    subreddits = ['MovieSuggestions', 'movies', 'animation'];\r\n  } else if (analysis.genreAnalysis.primaryGenre) {\r\n    const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n    if (genreName === 'horror') subreddits.push('horror');\r\n    if (genreName === 'science fiction') subreddits.push('scifi');\r\n    if (genreName === 'adventure') subreddits.push('movies'); // Adventure often discussed in movies\r\n  }\r\n\r\n  const searchQueries = generateEnhancedSearchQueries(inputMovies, analysis);\r\n  \r\n  console.log(\"Reddit search queries:\", searchQueries);\r\n  console.log(\"Reddit subreddits:\", subreddits);\r\n\r\n  const searchPromises = [];\r\n  \r\n  for (const subreddit of subreddits.slice(0, 2)) {\r\n    for (const query of searchQueries.slice(0, 3)) {\r\n      const searchUrl = `https://oauth.reddit.com/r/${subreddit}/search?q=${encodeURIComponent(query)}&restrict_sr=1&sort=top&t=year&limit=25`;\r\n      \r\n      searchPromises.push(\r\n        axios.get(searchUrl, {\r\n          ...axiosConfig,\r\n          timeout: 5000,\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'User-Agent': 'MovieRecommendationBot/1.0'\r\n          }\r\n        }).then(response => ({ subreddit, query, posts: response.data.data.children }))\r\n        .catch(error => ({ subreddit, query, posts: [], error: error.message }))\r\n      );\r\n    }\r\n  }\r\n\r\n  const searchResults = await Promise.all(searchPromises);\r\n  \r\n  for (const { subreddit, posts } of searchResults) {\r\n    for (const post of posts) {\r\n      const postData = post.data;\r\n      if (postData.score < 2) continue;\r\n      \r\n      const extractedMovies = extractMovieRecommendationsEnhanced(postData, inputMovies, analysis);\r\n      \r\n      extractedMovies.forEach(movie => {\r\n        const key = movie.title.toLowerCase();\r\n        if (!recommendations.has(key)) {\r\n          recommendations.set(key, {\r\n            title: movie.title,\r\n            redditScore: 0,\r\n            upvotes: 0,\r\n            mentions: 0,\r\n            subreddits: new Set(),\r\n            confidence: 0,\r\n            genreHints: movie.genreHints || []\r\n          });\r\n        }\r\n        \r\n        const rec = recommendations.get(key);\r\n        rec.redditScore += movie.score;\r\n        rec.upvotes += movie.upvotes;\r\n        rec.mentions += 1;\r\n        rec.confidence += movie.confidence || 1;\r\n        rec.subreddits.add(subreddit);\r\n        if (movie.genreHints) {\r\n          rec.genreHints.push(...movie.genreHints);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  console.log(\"Reddit raw recommendations found:\", recommendations.size);\r\n  \r\n  return Array.from(recommendations.values())\r\n    .filter(rec => rec.mentions >= 1)\r\n    .sort((a, b) => (b.redditScore * b.confidence) - (a.redditScore * a.confidence))\r\n    .slice(0, 10);\r\n}\r\n\r\nfunction generateEnhancedSearchQueries(inputMovies, analysis) {\r\n  const queries = [];\r\n  \r\n  if (analysis.genreAnalysis.primaryGenre) {\r\n    const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n    queries.push(`best ${genreName} movies`);\r\n    queries.push(`${genreName} recommendations`);\r\n    \r\n    if (analysis.genreAnalysis.genreCombo) {\r\n      queries.push(`${analysis.genreAnalysis.genreCombo.replace('-', ' ')} movies`);\r\n    }\r\n  }\r\n  \r\n  if (analysis.franchisePattern) {\r\n    queries.push(`${analysis.franchisePattern} movie recommendations`);\r\n    queries.push(`best ${analysis.franchisePattern} films`);\r\n  }\r\n\r\n  queries.push(`movies like ${inputMovies[0].title}`);\r\n  queries.push(`similar to ${inputMovies[0].title}`);\r\n  \r\n  if (analysis.thematicAnalysis.commonKeywords.length > 0) {\r\n    const topKeyword = analysis.thematicAnalysis.commonKeywords[0];\r\n    queries.push(`${topKeyword.name} movies`);\r\n  }\r\n\r\n  if (analysis.commonLanguage && analysis.commonLanguage !== 'en') {\r\n    queries.push(`${analysis.commonLanguage} language movies`);\r\n  }\r\n\r\n  return queries.slice(0, 5);\r\n}\r\n\r\nfunction extractMovieRecommendationsEnhanced(postData, inputMovies, analysis) {\r\n  const recommendations = [];\r\n  const fullText = (postData.title + ' ' + (postData.selftext || ''));\r\n  const textLower = fullText.toLowerCase();\r\n  const inputTitles = inputMovies.map(m => m.title.toLowerCase());\r\n  \r\n  const onlyMentionsInput = inputTitles.some(title => textLower.includes(title));\r\n  if (onlyMentionsInput && !textLower.includes('recommend') && !textLower.includes('similar')) {\r\n    return [];\r\n  }\r\n\r\n  const patterns = [\r\n    { regex: /\"([^\"]{2,40})\"/g, confidence: 3 },\r\n    { regex: /'([^']{2,40})'/g, confidence: 3 },\r\n    { regex: /\\*\\*([^*]{2,40})\\*\\*/g, confidence: 3 },\r\n    { regex: /__([^_]{2,40})__/g, confidence: 3 },\r\n    { regex: /([A-Z][a-zA-Z\\s&:'-]{2,35})\\s*\\((\\d{4})\\)/g, confidence: 4 },\r\n    { regex: /(?:watch|try|check out|recommend)\\s+([A-Z][a-zA-Z\\s&:'-]{2,35})/g, confidence: 3 },\r\n    { regex: /([A-Z][a-zA-Z\\s&:'-]{2,35})\\s+is\\s+(?:great|amazing|good|excellent)/g, confidence: 3 },\r\n    { regex: /^\\s*[-*•]\\s*([A-Z][a-zA-Z\\s&:'-]{2,35})/gm, confidence: 2 },\r\n    { regex: /^\\s*\\d+\\.\\s*([A-Z][a-zA-Z\\s&:'-]{2,35})/gm, confidence: 2 },\r\n    { regex: /\\b([A-Z][a-zA-Z]{2,25}(?:\\s+[A-Z][a-zA-Z]{2,25}){0,3})\\b/g, confidence: 1 }\r\n  ];\r\n  \r\n  patterns.forEach(pattern => {\r\n    let match;\r\n    while ((match = pattern.regex.exec(fullText)) !== null) {\r\n      let title = match[1].trim();\r\n      \r\n      title = title.replace(/[.,!?;:]$/, '');\r\n      \r\n      if (title.length < 3 || title.length > 50) continue;\r\n      if (inputTitles.some(inputTitle => \r\n        title.toLowerCase().includes(inputTitle) || inputTitle.includes(title.toLowerCase())\r\n      )) continue;\r\n      \r\n      const falsePositives = [\r\n        'movie', 'film', 'cinema', 'theater', 'netflix', 'hulu', 'amazon', 'disney',\r\n        'watch', 'seen', 'recommend', 'suggestion', 'looking', 'similar', 'like',\r\n        'genre', 'director', 'actor', 'year', 'time', 'story', 'plot', 'character',\r\n        'good', 'great', 'bad', 'best', 'worst', 'love', 'hate', 'think', 'feel'\r\n      ];\r\n      \r\n      if (falsePositives.some(fp => title.toLowerCase() === fp || title.toLowerCase().includes(fp + ' '))) {\r\n        continue;\r\n      }\r\n      \r\n      let confidenceBoost = 0;\r\n      const genreHints = [];\r\n      \r\n      if (analysis.franchisePattern && title.toLowerCase().includes(analysis.franchisePattern.toLowerCase())) {\r\n        confidenceBoost += 3;\r\n      }\r\n      \r\n      if (analysis.genreAnalysis.primaryGenre) {\r\n        const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n        const contextWords = fullText.toLowerCase().split(/\\s+/);\r\n        const titleIndex = contextWords.findIndex(word => word.includes(title.toLowerCase().split(' ')[0]));\r\n        \r\n        if (titleIndex !== -1) {\r\n          const contextWindow = contextWords.slice(Math.max(0, titleIndex - 5), titleIndex + 6);\r\n          if (contextWindow.some(word => word.includes(genreName))) {\r\n            confidenceBoost += 2;\r\n            genreHints.push(genreName);\r\n          }\r\n        }\r\n      }\r\n      \r\n      recommendations.push({\r\n        title: title,\r\n        score: postData.score,\r\n        upvotes: postData.ups || postData.score,\r\n        confidence: pattern.confidence + confidenceBoost,\r\n        genreHints: genreHints\r\n      });\r\n    }\r\n  });\r\n  \r\n  const uniqueRecs = [];\r\n  const seenTitles = new Set();\r\n  \r\n  recommendations\r\n    .sort((a, b) => b.confidence - a.confidence)\r\n    .forEach(rec => {\r\n      const titleKey = rec.title.toLowerCase();\r\n      if (!seenTitles.has(titleKey)) {\r\n        seenTitles.add(titleKey);\r\n        uniqueRecs.push(rec);\r\n      }\r\n    });\r\n  \r\n  return uniqueRecs.slice(0, 8);\r\n}\r\n\r\nasync function getEnhancedFallback(inputMovies, analysis, apiKey, axiosConfig, resolvedIds) {\r\n  try {\r\n    if (analysis.franchisePattern) {\r\n      console.log(\"Trying franchise fallback for:\", analysis.franchisePattern);\r\n      let searchUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(analysis.franchisePattern)}&sort_by=vote_average.desc`;\r\n      if (analysis.commonLanguage) {\r\n        searchUrl += `&with_original_language=${analysis.commonLanguage}`;\r\n      }\r\n      if (analysis.isAnimated === false) {\r\n        searchUrl += `&without_genres=16`;\r\n      }\r\n      const searchResponse = await axios.get(searchUrl, axiosConfig);\r\n      const candidate = searchResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_count > 100 &&\r\n        movie.title.toLowerCase().includes(analysis.franchisePattern.toLowerCase()) &&\r\n        movie.vote_average >= (analysis.avgRating - 0.5) // Tighter rating threshold\r\n      );\r\n      if (candidate) {\r\n        console.log(\"Found franchise fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    if (analysis.isAnime) {\r\n      console.log(\"Trying anime-specific fallback\");\r\n      \r\n      let animeQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_original_language=ja&with_genres=16&sort_by=vote_average.desc&vote_count.gte=50`;\r\n      \r\n      const voteCountMin = analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : \r\n                          analysis.qualityIndicators.qualityTier === 'good' ? 500 : 100;\r\n      \r\n      animeQuery += `&vote_count.gte=${voteCountMin}`;\r\n      \r\n      const animeResponse = await axios.get(animeQuery, axiosConfig);\r\n      \r\n      const candidate = animeResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_average >= (analysis.avgRating - 1.0)\r\n      );\r\n      \r\n      if (candidate) {\r\n        console.log(\"Found anime fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    if (analysis.commonLanguage) {\r\n      console.log(\"Trying language-based fallback for:\", analysis.commonLanguage);\r\n      \r\n      let langQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_original_language=${analysis.commonLanguage}&sort_by=vote_average.desc&vote_count.gte=100`;\r\n      \r\n      if (analysis.genreAnalysis.primaryGenre) {\r\n        langQuery += `&with_genres=${analysis.genreAnalysis.primaryGenre.id}`;\r\n      }\r\n      if (analysis.isAnimated === false) {\r\n        langQuery += `&without_genres=16`;\r\n      }\r\n      \r\n      const voteCountMin = analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : \r\n                          analysis.qualityIndicators.qualityTier === 'good' ? 500 : 100;\r\n      \r\n      langQuery += `&vote_count.gte=${voteCountMin}`;\r\n      \r\n      const langResponse = await axios.get(langQuery, axiosConfig);\r\n      \r\n      const candidate = langResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_average >= (analysis.avgRating - 1.0)\r\n      );\r\n      \r\n      if (candidate) {\r\n        console.log(\"Found language-based fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    if (analysis.genreAnalysis.primaryGenre) {\r\n      console.log(\"Trying dominant genre fallback:\", analysis.genreAnalysis.primaryGenre.name);\r\n      \r\n      const voteCountMin = analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : \r\n                          analysis.qualityIndicators.qualityTier === 'good' ? 500 : 100;\r\n      \r\n      let genreQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=${analysis.genreAnalysis.primaryGenre.id}&sort_by=vote_average.desc&vote_count.gte=${voteCountMin}`;\r\n      if (analysis.isAnimated === false) {\r\n        genreQuery += `&without_genres=16`;\r\n      }\r\n      \r\n      const genreResponse = await axios.get(genreQuery, axiosConfig);\r\n      \r\n      const candidate = genreResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_average >= (analysis.avgRating - 1.0)\r\n      );\r\n      \r\n      if (candidate) {\r\n        console.log(\"Found genre-based fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    if (analysis.isAnimated) {\r\n      let animQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=16&sort_by=vote_average.desc&vote_count.gte=100`;\r\n      \r\n      if (analysis.commonLanguage) {\r\n        animQuery += `&with_original_language=${analysis.commonLanguage}`;\r\n      }\r\n      \r\n      const animResponse = await axios.get(animQuery, axiosConfig);\r\n      const candidate = animResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_average >= (analysis.avgRating - 1.0)\r\n      );\r\n      if (candidate) {\r\n        console.log(\"Found animation fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Enhanced fallback failed:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getRedditAccessToken(clientId, clientSecret, axiosConfig) {\r\n  const auth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\r\n  \r\n  const response = await axios.post(\r\n    'https://www.reddit.com/api/v1/access_token',\r\n    'grant_type=client_credentials',\r\n    {\r\n      ...axiosConfig,\r\n      timeout: 5000,\r\n      headers: {\r\n        'Authorization': `Basic ${auth}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'User-Agent': 'MovieRecommendationBot/1.0'\r\n      }\r\n    }\r\n  );\r\n  return response.data.access_token;\r\n}\r\n\r\nasync function enhanceRedditRecommendationsWithTMDB(redditRecs, apiKey, axiosConfig, movieAnalysis) {\r\n  const enhancedRecs = [];\r\n  \r\n  const enhancePromises = redditRecs.map(async (rec) => {\r\n    try {\r\n      let searchResponse = await axios.get(\r\n        `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(rec.title)}`,\r\n        { ...axiosConfig, timeout: 4000 }\r\n      );\r\n      \r\n      let tmdbResults = searchResponse.data.results;\r\n      \r\n      if (tmdbResults.length === 0 && rec.title.includes(' ')) {\r\n        const words = rec.title.split(' ');\r\n        const partialTitle = words.slice(0, Math.min(3, words.length)).join(' ');\r\n        searchResponse = await axios.get(\r\n          `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(partialTitle)}`,\r\n          { ...axiosConfig, timeout: 4000 }\r\n        );\r\n        tmdbResults = searchResponse.data.results;\r\n      }\r\n      \r\n      if (tmdbResults.length > 0) {\r\n        const bestMatch = tmdbResults\r\n          .filter(movie => movie.vote_count > 100) // Stricter vote_count\r\n          .reduce((best, current) => {\r\n            const bestSimilarity = calculateTitleSimilarity(rec.title, best.title);\r\n            const currentSimilarity = calculateTitleSimilarity(rec.title, current.title);\r\n            \r\n            const bestScore = bestSimilarity * 0.7 + (best.popularity || 0) * 0.3;\r\n            const currentScore = currentSimilarity * 0.7 + (current.popularity || 0) * 0.3;\r\n            \r\n            return currentScore > bestScore ? current : best;\r\n          }, tmdbResults[0]);\r\n        \r\n        const titleLower = bestMatch.title.toLowerCase();\r\n        const isFranchiseMatch = movieAnalysis.franchisePattern && titleLower.includes(movieAnalysis.franchisePattern.toLowerCase());\r\n        const isGenreMatch = movieAnalysis.genreAnalysis.primaryGenre && bestMatch.genre_ids?.includes(movieAnalysis.genreAnalysis.primaryGenre.id);\r\n        \r\n        if (movieAnalysis.isAnime && \r\n            (bestMatch.original_language === 'ja' || bestMatch.genre_ids?.includes(16)) && \r\n            calculateTitleSimilarity(rec.title, bestMatch.title) > 0.3) {\r\n          return {\r\n            ...bestMatch,\r\n            redditData: {\r\n              originalTitle: rec.title,\r\n              redditScore: rec.redditScore,\r\n              mentions: rec.mentions,\r\n              upvotes: rec.upvotes,\r\n              confidence: rec.confidence,\r\n              subreddits: Array.from(rec.subreddits),\r\n              genreHints: rec.genreHints || []\r\n            }\r\n          };\r\n        } else if (!movieAnalysis.isAnimated && \r\n                   !bestMatch.genre_ids?.includes(16) && \r\n                   bestMatch.vote_average >= (movieAnalysis.qualityIndicators.qualityTier === 'premium' ? 7.0 : 6.0) &&\r\n                   (isFranchiseMatch || isGenreMatch) && \r\n                   calculateTitleSimilarity(rec.title, bestMatch.title) > 0.3) {\r\n          return {\r\n            ...bestMatch,\r\n            redditData: {\r\n              originalTitle: rec.title,\r\n              redditScore: rec.redditScore,\r\n              mentions: rec.mentions,\r\n              upvotes: rec.upvotes,\r\n              confidence: rec.confidence,\r\n              subreddits: Array.from(rec.subreddits),\r\n              genreHints: rec.genreHints || []\r\n            }\r\n          };\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(`Error enhancing Reddit recommendation ${rec.title}:`, error.message);\r\n    }\r\n    return null;\r\n  });\r\n  \r\n  const results = await Promise.allSettled(enhancePromises);\r\n  return results\r\n    .filter(result => result.status === 'fulfilled' && result.value !== null)\r\n    .map(result => result.value);\r\n}\r\n\r\nfunction calculateTitleSimilarity(title1, title2) {\r\n  const t1 = title1.toLowerCase().replace(/[^a-z0-9\\s]/g, '').trim();\r\n  const t2 = title2.toLowerCase().replace(/[^a-z0-9\\s]/g, '').trim();\r\n  \r\n  if (t1 === t2) return 1.0;\r\n  \r\n  const words1 = new Set(t1.split(/\\s+/).filter(w => w.length > 0));\r\n  const words2 = new Set(t2.split(/\\s+/).filter(w => w.length > 0));\r\n  \r\n  if (words1.size === 0 || words2.size === 0) return 0;\r\n  \r\n  const intersection = new Set([...words1].filter(x => words2.has(x)));\r\n  const union = new Set([...words1, ...words2]);\r\n  \r\n  return intersection.size / union.size;\r\n}\r\n\r\nfunction findMostCommonPerson(personArrays) {\r\n  const allPeople = personArrays.flat();\r\n  const personCounts = {};\r\n  \r\n  allPeople.forEach(person => {\r\n    personCounts[person.name] = (personCounts[person.name] || 0) + 1;\r\n  });\r\n  \r\n  const mostCommon = Object.entries(personCounts)\r\n    .sort(([,a], [,b]) => b - a)[0];\r\n  \r\n  return mostCommon && mostCommon[1] > 1 ? mostCommon[0] : null;\r\n}\r\n\r\nfunction findMostCommonStudio(studioArrays) {\r\n  const allStudios = studioArrays.flat();\r\n  const studioCounts = {};\r\n  \r\n  allStudios.forEach(studio => {\r\n    studioCounts[studio.name] = (studioCounts[studio.name] || 0) + 1;\r\n  });\r\n  \r\n  const mostCommon = Object.entries(studioCounts)\r\n    .sort(([,a], [,b]) => b - a)[0];\r\n  \r\n  return mostCommon && mostCommon[1] > 1 ? mostCommon[0] : null;\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}