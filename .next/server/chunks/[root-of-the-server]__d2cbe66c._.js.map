{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Rec%27One/rec-one/src/app/api/recommendations/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport axios from \"axios\";\r\n\r\nexport async function GET(request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const movieIds = searchParams.get(\"movieIds\")?.split(\",\");\r\n  const year = searchParams.get(\"year\");\r\n  const otherLanguages = searchParams.get(\"otherLanguages\") === 'true';\r\n\r\n  const axiosConfig = { timeout: 8000 };\r\n  \r\n  let resolvedIds = movieIds;\r\n  if (movieIds.some((id) => isNaN(id))) {\r\n    const searchPromises = movieIds.map((title) =>\r\n      axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.TMDB_API_KEY}&query=${encodeURIComponent(title)}`, axiosConfig)\r\n        .catch(err => ({ data: { results: [] } }))\r\n    );\r\n    const searchResponses = await Promise.all(searchPromises);\r\n    resolvedIds = searchResponses.map((res) => res.data.results[0]?.id).filter((id) => id);\r\n    if (resolvedIds.length !== 3) {\r\n      return NextResponse.json({ error: \"Could not map all titles to valid movie IDs\" }, { status: 400 });\r\n    }\r\n  }\r\n\r\n  if (!resolvedIds || resolvedIds.length !== 3) {\r\n    return NextResponse.json({ error: \"Exactly 3 movie IDs are required\" }, { status: 400 });\r\n  }\r\n\r\n  if (!year || !year.includes(\"-\")) {\r\n    return NextResponse.json({ error: \"Invalid year range format. Use minYear-maxYear (e.g., 2010-2020)\" }, { status: 400 });\r\n  }\r\n\r\n  const [minYear, maxYear] = year.split(\"-\").map(Number);\r\n  if (isNaN(minYear) || isNaN(maxYear) || minYear > maxYear) {\r\n    return NextResponse.json({ error: \"Invalid year range. Ensure minYear <= maxYear\" }, { status: 400 });\r\n  }\r\n\r\n  const TMDB_API_KEY = process.env.TMDB_API_KEY;\r\n  const REDDIT_CLIENT_ID = process.env.REDDIT_CLIENT_ID;\r\n  const REDDIT_CLIENT_SECRET = process.env.REDDIT_CLIENT_SECRET;\r\n\r\n  if (!TMDB_API_KEY) {\r\n    return NextResponse.json({ error: \"Missing TMDB_API_KEY environment variable\" }, { status: 500 });\r\n  }\r\n\r\n  try {\r\n    console.log(\"Fetching movie details for IDs:\", resolvedIds);\r\n    \r\n    const movieDetailsPromises = resolvedIds.map(async (id) => {\r\n      try {\r\n        const [movieDetails, credits, keywords] = await Promise.all([\r\n          axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${TMDB_API_KEY}&append_to_response=belongs_to_collection`, axiosConfig),\r\n          axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${TMDB_API_KEY}`, axiosConfig),\r\n          axios.get(`https://api.themoviedb.org/3/movie/${id}/keywords?api_key=${TMDB_API_KEY}`, axiosConfig).catch(() => ({ data: { keywords: [] } }))\r\n        ]);\r\n        return {\r\n          ...movieDetails.data,\r\n          credits: credits.data,\r\n          keywords: keywords.data.keywords || [],\r\n          belongs_to_collection: movieDetails.data.belongs_to_collection || null\r\n        };\r\n      } catch (error) {\r\n        console.error(`Failed to fetch details for movie ${id}:`, error.message);\r\n        throw error;\r\n      }\r\n    });\r\n\r\n    const inputMovies = await Promise.all(movieDetailsPromises);\r\n    console.log(\"Input movies:\", inputMovies.map(m => ({ title: m.title, id: m.id, original_language: m.original_language })));\r\n\r\n    const movieAnalysis = await analyzeInputMoviesEnhanced(inputMovies);\r\n    console.log(\"Movie analysis:\", movieAnalysis);\r\n\r\n    // NEW: Compute allowedLanguages based on input movies' languages\r\n    const inputLanguages = new Set(inputMovies.map(m => m.original_language));\r\n    let allowedLanguages;\r\n    if (inputLanguages.size === 3) {\r\n      allowedLanguages = Array.from(inputLanguages);\r\n    } else {\r\n      const langCounts = {};\r\n      inputMovies.forEach(m => {\r\n        const lang = m.original_language;\r\n        langCounts[lang] = (langCounts[lang] || 0) + 1;\r\n      });\r\n      const commonLang = Object.entries(langCounts).find(([lang, count]) => count >= 2)?.[0];\r\n      allowedLanguages = commonLang ? [commonLang] : []; // Fallback to empty if no common (edge case)\r\n    }\r\n    console.log(\"Allowed languages for recommendations:\", allowedLanguages);\r\n\r\n    let redditRecommendations = [];\r\n    let redditError = null;\r\n    \r\n    if (REDDIT_CLIENT_ID && REDDIT_CLIENT_SECRET) {\r\n      try {\r\n        console.log(\"Attempting improved Reddit-based recommendations...\");\r\n        const redditPromise = getImprovedRedditRecommendations(inputMovies, movieAnalysis, REDDIT_CLIENT_ID, REDDIT_CLIENT_SECRET, axiosConfig);\r\n        const timeoutPromise = new Promise((_, reject) => \r\n          setTimeout(() => reject(new Error('Reddit timeout')), 12000)\r\n        );\r\n        \r\n        redditRecommendations = await Promise.race([redditPromise, timeoutPromise]);\r\n        console.log(\"Reddit recommendations found:\", redditRecommendations.length);\r\n      } catch (error) {\r\n        console.log(\"Reddit API failed, falling back to TMDB:\", error.message);\r\n        redditError = error.message;\r\n      }\r\n    }\r\n\r\n    const strategies = await getEnhancedStrategiesWithTMDB(inputMovies, movieAnalysis, TMDB_API_KEY, axiosConfig, minYear, maxYear, allowedLanguages, otherLanguages);\r\n\r\n    let allRecommendations = [];\r\n\r\n    if (redditRecommendations.length > 0) {\r\n      const redditCandidates = await enhanceRedditRecommendationsWithTMDB(\r\n        redditRecommendations.slice(0, 8),\r\n        TMDB_API_KEY, \r\n        axiosConfig,\r\n        movieAnalysis\r\n      );\r\n      redditCandidates\r\n        .filter(candidate => {\r\n          if (!candidate.release_date) return false;\r\n          const releaseYear = new Date(candidate.release_date).getFullYear();\r\n          return releaseYear >= minYear && releaseYear <= maxYear;\r\n        })\r\n        .forEach(candidate => {\r\n          allRecommendations.push({\r\n            ...candidate,\r\n            strategyName: \"Reddit Community Recommendation\",\r\n            strategyPriority: 10,\r\n            source: \"reddit\"\r\n          });\r\n        });\r\n    }\r\n\r\n    const strategyPromises = strategies.map(async (strategy) => {\r\n      try {\r\n        console.log(`Trying strategy: ${strategy.name}`);\r\n        \r\n        let candidates = [];\r\n\r\n        if (strategy.customSearch) {\r\n          candidates = await strategy.customSearch(TMDB_API_KEY, axiosConfig, resolvedIds, minYear, maxYear, allowedLanguages, otherLanguages);\r\n        } else {\r\n          const params = strategy.getParams(allowedLanguages, otherLanguages);\r\n          if (!params) return [];\r\n\r\n          let discoveryUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${TMDB_API_KEY}`;\r\n          discoveryUrl += `&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n          \r\n          Object.entries(params).forEach(([key, value]) => {\r\n            if (value) discoveryUrl += `&${key}=${value}`;\r\n          });\r\n\r\n          const discoveryResponse = await axios.get(discoveryUrl, axiosConfig);\r\n          candidates = discoveryResponse.data.results;\r\n        }\r\n\r\n        candidates = candidates\r\n          .filter(movie => {\r\n            if (!resolvedIds.includes(movie.id.toString())) {\r\n              if (!movie.release_date) return false;\r\n              const releaseYear = new Date(movie.release_date).getFullYear();\r\n              return releaseYear >= minYear && releaseYear <= maxYear;\r\n            }\r\n            return false;\r\n          })\r\n          .slice(0, otherLanguages ? 20 : 5);\r\n\r\n        return candidates.map(candidate => ({\r\n          ...candidate,\r\n          strategyName: strategy.name,\r\n          strategyPriority: strategy.priority,\r\n          source: \"tmdb\"\r\n        }));\r\n      } catch (error) {\r\n        console.log(`Strategy ${strategy.name} failed:`, error.message);\r\n        return [];\r\n      }\r\n    });\r\n\r\n    const strategyResults = await Promise.allSettled(strategyPromises);\r\n    strategyResults.forEach(result => {\r\n      if (result.status === 'fulfilled') {\r\n        allRecommendations.push(...result.value);\r\n      }\r\n    });\r\n\r\n    console.log(`Total recommendations collected: ${allRecommendations.length}`);\r\n\r\n    if (allRecommendations.length === 0) {\r\n      const fallbackMovie = await getEnhancedFallback(inputMovies, movieAnalysis, TMDB_API_KEY, axiosConfig, resolvedIds, minYear, maxYear, allowedLanguages, otherLanguages);\r\n      if (fallbackMovie) {\r\n        allRecommendations.push({\r\n          ...fallbackMovie,\r\n          strategyName: \"Enhanced Fallback\",\r\n          strategyPriority: 4,\r\n          source: \"tmdb\"\r\n        });\r\n      }\r\n    }\r\n\r\n    // NEW: Apply language filter to the full initial pool (after fallback if needed)\r\n    allRecommendations = allRecommendations.filter(candidate => {\r\n      if (otherLanguages) {\r\n        return candidate.original_language && !allowedLanguages.includes(candidate.original_language);\r\n      } else {\r\n        return allowedLanguages.includes(candidate.original_language);\r\n      }\r\n    });\r\n    console.log(`Recommendations after language filter: ${allRecommendations.length}`);\r\n\r\n    if (allRecommendations.length === 0) {\r\n      throw new Error(\"No recommendations found for the specified year range\");\r\n    }\r\n\r\n    const scoredRecommendations = scoreRecommendationsEnhanced(allRecommendations, inputMovies, movieAnalysis);\r\n    \r\n    scoredRecommendations.sort((a, b) => b.totalScore - a.totalScore);\r\n\r\n    let topRecommendations;\r\n    if (otherLanguages) {\r\n      const uniqueLangRecs = [];\r\n      const seenLangs = new Set();\r\n      for (const rec of scoredRecommendations) {\r\n        if (rec.original_language && !seenLangs.has(rec.original_language)) {\r\n          seenLangs.add(rec.original_language);\r\n          uniqueLangRecs.push(rec);\r\n          if (uniqueLangRecs.length === 5) break;\r\n        }\r\n      }\r\n      topRecommendations = uniqueLangRecs;\r\n    } else {\r\n      topRecommendations = scoredRecommendations.slice(0, 5);\r\n    }\r\n    \r\n    const detailedRecommendations = await Promise.all(\r\n      topRecommendations.map(async (rec) => {\r\n        try {\r\n          const detailedMovie = await axios.get(\r\n            `https://api.themoviedb.org/3/movie/${rec.id}?api_key=${TMDB_API_KEY}&append_to_response=credits`,\r\n            axiosConfig\r\n          );\r\n          return {\r\n            ...detailedMovie.data,\r\n            totalScore: rec.totalScore,\r\n            strategyUsed: rec.strategyName,\r\n            strategyPriority: rec.strategyPriority,\r\n            source: rec.source,\r\n            redditData: rec.redditData || null,\r\n            genreMatchDetails: rec.genreMatchDetails\r\n          };\r\n        } catch (error) {\r\n          console.log(`Failed to fetch details for movie ${rec.id}:`, error.message);\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n\r\n    const validRecommendations = detailedRecommendations.filter(rec => rec !== null);\r\n\r\n    console.log(`Final recommendations: ${validRecommendations.length}`);\r\n\r\n    return NextResponse.json({\r\n      allRecommendations: validRecommendations,\r\n      movieAnalysis,\r\n      redditFallbackUsed: redditError ? true : false,\r\n      redditError\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"API Error:\", {\r\n      message: error.message,\r\n      code: error.code,\r\n      status: error.response?.status,\r\n      data: error.response?.data,\r\n    });\r\n    return NextResponse.json(\r\n      { error: `Failed to fetch recommendations: ${error.message}` },\r\n      { status: error.response?.status || 500 }\r\n    );\r\n  }\r\n}\r\n\r\nfunction analyzeInputMoviesEnhanced(inputMovies) {\r\n  const analysis = {\r\n    isAnimated: false,\r\n    isAnime: false,\r\n    commonLanguage: null,\r\n    commonCountry: null,\r\n    franchisePattern: null,\r\n    franchiseKeywords: [],\r\n    themes: [],\r\n    avgRating: 0,\r\n    avgYear: 0,\r\n    genreAnalysis: {\r\n      dominantGenres: [],\r\n      genreFrequency: {},\r\n      genreWeights: {},\r\n      primaryGenre: null,\r\n      secondaryGenres: [],\r\n      genreCombo: null\r\n    },\r\n    thematicAnalysis: {\r\n      commonKeywords: [],\r\n      thematicPatterns: [],\r\n      moodIndicators: []\r\n    },\r\n    qualityIndicators: {\r\n      avgRating: 0,\r\n      avgPopularity: 0,\r\n      ratingRange: [0, 0],\r\n      qualityTier: 'standard'\r\n    }\r\n  };\r\n\r\n  const allGenres = inputMovies.flatMap(m => m.genres || []);\r\n  const genreCounts = {};\r\n  const genreIds = {};\r\n  \r\n  allGenres.forEach(genre => {\r\n    genreCounts[genre.name] = (genreCounts[genre.name] || 0) + 1;\r\n    genreIds[genre.name] = genre.id;\r\n  });\r\n\r\n  const sortedGenres = Object.entries(genreCounts)\r\n    .sort(([,a], [,b]) => b - a)\r\n    .map(([name, count]) => ({ name, count, id: genreIds[name] }));\r\n\r\n  analysis.genreAnalysis.genreFrequency = genreCounts;\r\n  analysis.genreAnalysis.dominantGenres = sortedGenres;\r\n\r\n  if (sortedGenres.length > 0) {\r\n    analysis.genreAnalysis.primaryGenre = sortedGenres[0];\r\n    analysis.genreAnalysis.secondaryGenres = sortedGenres.slice(1, 3);\r\n    \r\n    const maxCount = sortedGenres[0].count;\r\n    sortedGenres.forEach(genre => {\r\n      analysis.genreAnalysis.genreWeights[genre.name] = genre.count / maxCount;\r\n    });\r\n\r\n    if (sortedGenres.length > 1 && sortedGenres[0].count > 1) {\r\n      analysis.genreAnalysis.genreCombo = sortedGenres\r\n        .filter(g => g.count > 1)\r\n        .map(g => g.name)\r\n        .join('-');\r\n    }\r\n  }\r\n\r\n  const allKeywords = inputMovies.flatMap(m => m.keywords || []);\r\n  const keywordCounts = {};\r\n  \r\n  allKeywords.forEach(keyword => {\r\n    const keyName = keyword.name.toLowerCase();\r\n    keywordCounts[keyName] = (keywordCounts[keyName] || 0) + 1;\r\n  });\r\n\r\n  analysis.thematicAnalysis.commonKeywords = Object.entries(keywordCounts)\r\n    .filter(([, count]) => count > 1)\r\n    .sort(([,a], [,b]) => b - a)\r\n    .map(([name, count]) => ({ name, count }))\r\n    .slice(0, 5);\r\n\r\n  const ratings = inputMovies.map(m => m.vote_average || 0);\r\n  const popularities = inputMovies.map(m => m.popularity || 0);\r\n  \r\n  analysis.qualityIndicators.avgRating = ratings.reduce((a, b) => a + b, 0) / ratings.length;\r\n  analysis.qualityIndicators.avgPopularity = popularities.reduce((a, b) => a + b, 0) / popularities.length;\r\n  analysis.qualityIndicators.ratingRange = [Math.min(...ratings), Math.max(...ratings)];\r\n  \r\n  if (analysis.qualityIndicators.avgRating >= 7.5) {\r\n    analysis.qualityIndicators.qualityTier = 'premium';\r\n  } else if (analysis.qualityIndicators.avgRating >= 6.5) {\r\n    analysis.qualityIndicators.qualityTier = 'good';\r\n  } else {\r\n    analysis.qualityIndicators.qualityTier = 'standard';\r\n  }\r\n\r\n  const animeKeywords = ['anime', 'manga', 'japanese animation'];\r\n  const allKeywordNames = allKeywords.map(k => k.name.toLowerCase());\r\n  const allGenreNames = allGenres.map(g => g.name.toLowerCase());\r\n  \r\n  analysis.isAnimated = allGenreNames.some(g => g.includes('animation'));\r\n  \r\n  analysis.isAnime = (analysis.isAnimated && \r\n                     inputMovies.some(m => m.original_language === 'ja')) ||\r\n                    allKeywordNames.some(k => animeKeywords.some(ak => k.includes(ak)));\r\n  \r\n  if (!analysis.isAnimated && allKeywordNames.some(k => animeKeywords.some(ak => k.includes(ak)))) {\r\n    analysis.isAnime = true;\r\n    analysis.isAnimated = true;\r\n  }\r\n\r\n  // Improved franchise detection\r\n  const stopwords = ['the', 'of', 'and', 'in', 'to', 'a', 'is', 'for', 'on', 'with', 'by', 'at'];\r\n  \r\n  async function detectFranchiseWithTMDB() {\r\n    const collections = inputMovies.map(m => m.belongs_to_collection).filter(c => c);\r\n    const collectionCounts = {};\r\n    \r\n    collections.forEach(collection => {\r\n      if (collection) {\r\n        collectionCounts[collection.id] = (collectionCounts[collection.id] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    const mostCommonCollection = Object.entries(collectionCounts)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .find(([, count]) => count >= 2);\r\n\r\n    if (mostCommonCollection) {\r\n      const collectionId = mostCommonCollection[0];\r\n      const collection = collections.find(c => c.id == collectionId);\r\n      console.log(`Found franchise: ${collection.name} (ID: ${collectionId}) with ${mostCommonCollection[1]} movies`);\r\n      return {\r\n        franchisePattern: collection.name.replace(/\\s*(Collection|Series)$/i, '').trim(),\r\n        franchiseKeywords: collection.name.split(/\\s+/).filter(w => !stopwords.includes(w.toLowerCase()) && w.length > 2)\r\n      };\r\n    }\r\n\r\n    // Fallback: Check title words against TMDB collections\r\n    const allWords = inputMovies.flatMap(m => \r\n      m.title.toLowerCase().split(/\\s+|[^\\w\\s]/).filter(word => \r\n        word.length > 3 && !stopwords.includes(word)\r\n      )\r\n    );\r\n    \r\n    const wordCounts = {};\r\n    allWords.forEach(word => {\r\n      wordCounts[word] = (wordCounts[word] || 0) + 1;\r\n    });\r\n    \r\n    const potentialFranchiseTerms = Object.entries(wordCounts)\r\n      .filter(([word, count]) => count >= 2)\r\n      .map(([word]) => word);\r\n    \r\n    for (const term of potentialFranchiseTerms) {\r\n      try {\r\n        const collectionSearch = await axios.get(\r\n          `https://api.themoviedb.org/3/search/collection?api_key=${TMDB_API_KEY}&query=${encodeURIComponent(term)}`,\r\n          axiosConfig\r\n        );\r\n        \r\n        const matchingCollections = collectionSearch.data.results.filter(c => \r\n          c.name.toLowerCase().includes(term.toLowerCase())\r\n        );\r\n        \r\n        for (const collection of matchingCollections) {\r\n          const collectionDetails = await axios.get(\r\n            `https://api.themoviedb.org/3/collection/${collection.id}?api_key=${TMDB_API_KEY}`,\r\n            axiosConfig\r\n          );\r\n          \r\n          const collectionMovies = collectionDetails.data.parts || [];\r\n          const matchingInputMovies = inputMovies.filter(m => \r\n            collectionMovies.some(cm => cm.id === m.id)\r\n          );\r\n          \r\n          if (matchingInputMovies.length >= 2) {\r\n            console.log(`Found franchise via search: ${collection.name} with ${matchingInputMovies.length} matching movies`);\r\n            return {\r\n              franchisePattern: collection.name.replace(/\\s*(Collection|Series)$/i, '').trim(),\r\n              franchiseKeywords: collection.name.split(/\\s+/).filter(w => !stopwords.includes(w.toLowerCase()) && w.length > 2)\r\n            };\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(`Failed to search TMDB for collection term \"${term}\":`, error.message);\r\n      }\r\n    }\r\n    \r\n    return { franchisePattern: null, franchiseKeywords: [] };\r\n  }\r\n\r\n  const franchiseResult = detectFranchiseWithTMDB().catch(error => {\r\n    console.error(\"Franchise detection failed:\", error.message);\r\n    return { franchisePattern: null, franchiseKeywords: [] };\r\n  });\r\n  \r\n  return franchiseResult.then(({ franchisePattern, franchiseKeywords }) => {\r\n    analysis.franchisePattern = franchisePattern;\r\n    analysis.franchiseKeywords = franchiseKeywords;\r\n\r\n    const languages = inputMovies.map(m => m.original_language);\r\n    const languageCounts = {};\r\n    languages.forEach(lang => {\r\n      languageCounts[lang] = (languageCounts[lang] || 0) + 1;\r\n    });\r\n    const mostCommonLang = Object.entries(languageCounts).sort(([,a], [,b]) => b - a)[0];\r\n    if (mostCommonLang && mostCommonLang[1] >= 2) {\r\n      analysis.commonLanguage = mostCommonLang[0];\r\n    }\r\n\r\n    const countries = inputMovies.flatMap(m => m.production_countries?.map(c => c.iso_3166_1) || []);\r\n    const countryCounts = {};\r\n    countries.forEach(country => {\r\n      countryCounts[country] = (countryCounts[country] || 0) + 1;\r\n    });\r\n    const mostCommonCountry = Object.entries(countryCounts).sort(([,a], [,b]) => b - a)[0];\r\n    if (mostCommonCountry && mostCommonCountry[1] >= 2) {\r\n      analysis.commonCountry = mostCommonCountry[0];\r\n    }\r\n\r\n    analysis.avgRating = analysis.qualityIndicators.avgRating;\r\n    analysis.avgYear = Math.round(inputMovies.reduce((sum, m) => {\r\n      const year = new Date(m.release_date).getFullYear();\r\n      return sum + year;\r\n    }, 0) / inputMovies.length);\r\n\r\n    return analysis;\r\n  });\r\n}\r\n\r\nasync function getEnhancedStrategiesWithTMDB(inputMovies, analysis, TMDB_API_KEY, axiosConfig, minYear, maxYear, allowedLanguages, otherLanguages) {\r\n  const genres = inputMovies.map(m => m.genres || []);\r\n  const directors = inputMovies.map(m => \r\n    m.credits.crew?.filter(c => c.job === 'Director') || []\r\n  );\r\n  const studios = inputMovies.map(m => m.production_companies || []);\r\n  const keywords = inputMovies.map(m => m.keywords || []);\r\n\r\n  const strategies = [];\r\n\r\n  if (analysis.commonLanguage && !otherLanguages) {\r\n    strategies.push({\r\n      name: `${analysis.commonLanguage.toUpperCase()} Language Films`,\r\n      priority: 30,\r\n      getParams: (allowedLanguages, otherLanguages) => {\r\n        const params = {\r\n          sort_by: 'vote_average.desc',\r\n          'vote_count.gte': 100\r\n        };\r\n        if (!otherLanguages && allowedLanguages.length > 0) {\r\n          params.with_original_language = allowedLanguages.join('|');\r\n        }\r\n        if (analysis.genreAnalysis.primaryGenre) {\r\n          params.with_genres = analysis.genreAnalysis.primaryGenre.id;\r\n        }\r\n        if (analysis.qualityIndicators.qualityTier === 'premium') {\r\n          params['vote_average.gte'] = 7.0;\r\n        } else if (analysis.qualityIndicators.qualityTier === 'good') {\r\n          params['vote_average.gte'] = 6.0;\r\n        }\r\n        if (analysis.isAnimated === false) {\r\n          params.without_genres = '16';\r\n        }\r\n        return params;\r\n      }\r\n    });\r\n  }\r\n\r\n  if (analysis.genreAnalysis.primaryGenre && analysis.genreAnalysis.primaryGenre.count > 1) {\r\n    const primaryGenre = analysis.genreAnalysis.primaryGenre;\r\n    \r\n    strategies.push({\r\n      name: `Dominant ${primaryGenre.name} Films`,\r\n      priority: 25,\r\n      getParams: (allowedLanguages, otherLanguages) => {\r\n        const params = {\r\n          with_genres: primaryGenre.id,\r\n          sort_by: 'vote_average.desc',\r\n          'vote_count.gte': analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : 500\r\n        };\r\n        if (!otherLanguages && allowedLanguages.length > 0) {\r\n          params.with_original_language = allowedLanguages.join('|');\r\n        }\r\n        const secondaryRecurringGenres = analysis.genreAnalysis.secondaryGenres\r\n          .filter(g => g.count > 1)\r\n          .slice(0, 2);\r\n        if (secondaryRecurringGenres.length > 0) {\r\n          params.with_genres += ',' + secondaryRecurringGenres.map(g => g.id).join(',');\r\n        }\r\n        if (analysis.qualityIndicators.qualityTier === 'premium') {\r\n          params['vote_average.gte'] = 7.0;\r\n        } else if (analysis.qualityIndicators.qualityTier === 'good') {\r\n          params['vote_average.gte'] = 6.0;\r\n        }\r\n        if (analysis.isAnimated === false) {\r\n          params.without_genres = '16';\r\n        }\r\n        return params;\r\n      }\r\n    });\r\n\r\n    if (analysis.genreAnalysis.genreCombo) {\r\n      strategies.push({\r\n        name: `${analysis.genreAnalysis.genreCombo} Combination`,\r\n        priority: 22,\r\n        getParams: (allowedLanguages, otherLanguages) => {\r\n          const recurringGenres = analysis.genreAnalysis.dominantGenres\r\n            .filter(g => g.count > 1)\r\n            .slice(0, 3);\r\n          \r\n          const params = {\r\n            with_genres: recurringGenres.map(g => g.id).join(','),\r\n            sort_by: 'vote_average.desc',\r\n            'vote_count.gte': 300\r\n          };\r\n          if (!otherLanguages && allowedLanguages.length > 0) {\r\n            params.with_original_language = allowedLanguages.join('|');\r\n          }\r\n          if (analysis.isAnimated === false) {\r\n            params.without_genres = '16';\r\n          }\r\n          return params;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  if (analysis.franchisePattern || analysis.franchiseKeywords.length > 0) {\r\n    const basePriority = analysis.franchisePattern ? 35 : 18;\r\n    \r\n    strategies.push({\r\n      name: \"Same Franchise/Series\",\r\n      priority: basePriority,\r\n      customSearch: async (apiKey, config, excludeIds, minYear, maxYear, allowedLanguages, otherLanguages) => {\r\n        const franchiseTerms = analysis.franchiseKeywords.length > 0 \r\n          ? analysis.franchiseKeywords \r\n          : [analysis.franchisePattern];\r\n        \r\n        console.log(\"Searching for franchise terms:\", franchiseTerms);\r\n        \r\n        const searchResults = [];\r\n        \r\n        for (const term of franchiseTerms.slice(0, 3)) {\r\n          try {\r\n            let searchUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(term)}&sort_by=vote_average.desc&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n            if (!otherLanguages && allowedLanguages.length > 0) {\r\n              searchUrl += `&with_original_language=${allowedLanguages.join('|')}`;\r\n            }\r\n            if (analysis.genreAnalysis.primaryGenre) {\r\n              searchUrl += `&with_genres=${analysis.genreAnalysis.primaryGenre.id}`;\r\n            }\r\n            \r\n            const searchResponse = await axios.get(searchUrl, config);\r\n            \r\n            let results = searchResponse.data.results\r\n              .filter(movie => {\r\n                if (excludeIds.includes(movie.id.toString())) return false;\r\n                if (movie.vote_count < 50) return false;\r\n                if (!movie.title.toLowerCase().includes(term.toLowerCase())) return false;\r\n                if (analysis.isAnimated === false && movie.genre_ids?.includes(16)) return false;\r\n                return true;\r\n              });\r\n\r\n            searchResults.push(...results.slice(0, 10));\r\n            console.log(`Found ${results.length} movies for term \"${term}\" between ${minYear} and ${maxYear}`);\r\n          } catch (error) {\r\n            console.log(`Franchise search failed for term \"${term}\":`, error.message);\r\n          }\r\n        }\r\n        \r\n        const uniqueResults = searchResults.filter((movie, index, self) => \r\n          index === self.findIndex(m => m.id === movie.id)\r\n        );\r\n        \r\n        return uniqueResults\r\n          .sort((a, b) => b.vote_average - a.vote_average)\r\n          .slice(0, 10);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (analysis.thematicAnalysis.commonKeywords.some(k => \r\n    ['comic', 'superhero', 'marvel', 'dc', 'based on comic'].includes(k.name.toLowerCase())\r\n  )) {\r\n    strategies.push({\r\n      name: \"Superhero/Comic Book Movies\",\r\n      priority: 26,\r\n      customSearch: async (apiKey, config, excludeIds, minYear, maxYear, allowedLanguages, otherLanguages) => {\r\n        try {\r\n          const superheroKeywords = ['9715', '180547', '849'];\r\n          const marvelCompanies = ['420', '7505'];\r\n          const dcCompanies = ['9993', '128064'];\r\n          \r\n          const searches = [];\r\n          \r\n          for (const keywordId of superheroKeywords) {\r\n            let url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_keywords=${keywordId}&sort_by=release_date.desc&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31&vote_count.gte=50`;\r\n            if (!otherLanguages && allowedLanguages.length > 0) {\r\n              url += `&with_original_language=${allowedLanguages.join('|')}`;\r\n            }\r\n            searches.push(axios.get(url, config));\r\n          }\r\n          \r\n          const allCompanies = [...marvelCompanies, ...dcCompanies];\r\n          for (const companyId of allCompanies) {\r\n            let url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_companies=${companyId}&sort_by=release_date.desc&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31&vote_count.gte=50`;\r\n            if (!otherLanguages && allowedLanguages.length > 0) {\r\n              url += `&with_original_language=${allowedLanguages.join('|')}`;\r\n            }\r\n            searches.push(axios.get(url, config));\r\n          }\r\n          \r\n          const results = await Promise.allSettled(searches);\r\n          const allSuperheroMovies = [];\r\n          \r\n          results.forEach(result => {\r\n            if (result.status === 'fulfilled') {\r\n              allSuperheroMovies.push(...result.value.data.results);\r\n            }\r\n          });\r\n          \r\n          const uniqueMovies = allSuperheroMovies\r\n            .filter(movie => !excludeIds.includes(movie.id.toString()))\r\n            .filter((movie, index, self) => index === self.findIndex(m => m.id === movie.id))\r\n            .sort((a, b) => new Date(b.release_date) - new Date(a.release_date))\r\n            .slice(0, 8);\r\n          \r\n          console.log(`Found ${uniqueMovies.length} superhero movies between ${minYear} and ${maxYear}`);\r\n          return uniqueMovies;\r\n        } catch (error) {\r\n          console.log(`Superhero search failed:`, error.message);\r\n          return [];\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  if (analysis.thematicAnalysis.commonKeywords.length > 0) {\r\n    const topKeyword = analysis.thematicAnalysis.commonKeywords[0];\r\n    \r\n    strategies.push({\r\n      name: `Thematic Match: ${topKeyword.name}`,\r\n      priority: 16,\r\n      customSearch: async (apiKey, config, excludeIds, minYear, maxYear, allowedLanguages, otherLanguages) => {\r\n        try {\r\n          const keywordSearch = await axios.get(\r\n            `https://api.themoviedb.org/3/search/keyword?api_key=${apiKey}&query=${encodeURIComponent(topKeyword.name)}`,\r\n            config\r\n          );\r\n          \r\n          if (keywordSearch.data.results.length > 0) {\r\n            const keywordId = keywordSearch.data.results[0].id;\r\n            \r\n            let moviesUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_keywords=${keywordId}&sort_by=vote_average.desc&vote_count.gte=100&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n            if (!otherLanguages && allowedLanguages.length > 0) {\r\n              moviesUrl += `&with_original_language=${allowedLanguages.join('|')}`;\r\n            }\r\n            if (analysis.genreAnalysis.primaryGenre) {\r\n              moviesUrl += `&with_genres=${analysis.genreAnalysis.primaryGenre.id}`;\r\n            }\r\n            if (analysis.isAnimated === false) {\r\n              moviesUrl += `&without_genres=16`;\r\n            }\r\n            \r\n            const moviesResponse = await axios.get(moviesUrl, config);\r\n            \r\n            return moviesResponse.data.results\r\n              .filter(movie => !excludeIds.includes(movie.id.toString()))\r\n              .slice(0, 8);\r\n          }\r\n        } catch (error) {\r\n          console.log(`Thematic search failed for \"${topKeyword.name}\":`, error.message);\r\n        }\r\n        return [];\r\n      }\r\n    });\r\n  }\r\n\r\n  if (analysis.isAnime) {\r\n    strategies.push({\r\n      name: \"Anime Movies\",\r\n      priority: 35,\r\n      customSearch: async (apiKey, config, excludeIds, minYear, maxYear, allowedLanguages, otherLanguages) => {\r\n        const searches = [\r\n          `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_original_language=ja&with_genres=16&sort_by=vote_average.desc&vote_count.gte=50&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`,\r\n          `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_keywords=210024&sort_by=popularity.desc&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`,\r\n          `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_companies=10342,2251&sort_by=vote_average.desc&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`\r\n        ].map(url => axios.get(url, config));\r\n        \r\n        const results = await Promise.allSettled(searches);\r\n        const allMovies = [];\r\n        \r\n        results.forEach(result => {\r\n          if (result.status === 'fulfilled') {\r\n            allMovies.push(...result.value.data.results);\r\n          }\r\n        });\r\n        \r\n        return allMovies\r\n          .filter(movie => !excludeIds.includes(movie.id.toString()))\r\n          .filter((movie, index, self) => index === self.findIndex(m => m.id === movie.id))\r\n          .slice(0, 10);\r\n      }\r\n    });\r\n  } else if (analysis.isAnimated) {\r\n    strategies.push({\r\n      name: \"Animation Movies\",\r\n      priority: 13,\r\n      getParams: (allowedLanguages, otherLanguages) => {\r\n        const params = {\r\n          with_genres: '16',\r\n          sort_by: 'vote_average.desc',\r\n          'vote_count.gte': 500\r\n        };\r\n        if (!otherLanguages && allowedLanguages.length > 0) {\r\n          params.with_original_language = allowedLanguages.join('|');\r\n        }\r\n        return params;\r\n      }\r\n    });\r\n  }\r\n\r\n  const commonDirector = findMostCommonPerson(directors);\r\n  console.log(\"Directors found in input movies:\", directors.flat().map(d => ({ name: d.name, id: d.id })));\r\n  console.log(\"Most common director:\", commonDirector);\r\n\r\n  if (commonDirector) {\r\n    const directorInfo = directors.flat().find(d => d.name === commonDirector);\r\n    const directorId = directorInfo?.id;\r\n    \r\n    console.log(`Adding strategy for director: ${commonDirector} (ID: ${directorId})`);\r\n    \r\n    if (directorId) {\r\n      strategies.push({\r\n        name: `Same Director: ${commonDirector}`,\r\n        priority: 35,\r\n        customSearch: async (apiKey, config, excludeIds, minYear, maxYear, allowedLanguages, otherLanguages) => {\r\n          try {\r\n            console.log(`Searching for movies by director ${commonDirector} (${directorId}) between ${minYear} and ${maxYear}`);\r\n            \r\n            let directorUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_crew=${directorId}&sort_by=release_date.desc&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n            \r\n            if (!otherLanguages && allowedLanguages.length > 0) {\r\n              directorUrl += `&with_original_language=${allowedLanguages.join('|')}`;\r\n            }\r\n            if (analysis.genreAnalysis.primaryGenre) {\r\n              directorUrl += `&with_genres=${analysis.genreAnalysis.primaryGenre.id}`;\r\n            }\r\n            if (analysis.isAnimated === false) {\r\n              directorUrl += `&without_genres=16`;\r\n            }\r\n            \r\n            console.log(\"Director search URL:\", directorUrl);\r\n            const directorResponse = await axios.get(directorUrl, config);\r\n            \r\n            let directorMovies = directorResponse.data.results\r\n              .filter(movie => !excludeIds.includes(movie.id.toString()));\r\n            \r\n            console.log(`Found ${directorMovies.length} movies with crew member ${commonDirector} using discovery API`);\r\n            \r\n            const verifiedMovies = [];\r\n            for (const movie of directorMovies) {\r\n              try {\r\n                const creditsResponse = await axios.get(\r\n                  `https://api.themoviedb.org/3/movie/${movie.id}/credits?api_key=${apiKey}`,\r\n                  config\r\n                );\r\n                const isDirectedBy = creditsResponse.data.crew.some(\r\n                  crew => crew.id === directorId && crew.job === 'Director'\r\n                );\r\n                if (isDirectedBy) {\r\n                  console.log(`Verified ${movie.title} (ID: ${movie.id}) is directed by ${commonDirector}`);\r\n                  verifiedMovies.push(movie);\r\n                } else {\r\n                  console.log(`Excluded ${movie.title} (ID: ${movie.id}) - not directed by ${commonDirector}`);\r\n                }\r\n              } catch (error) {\r\n                console.log(`Failed to fetch credits for ${movie.title} (ID: ${movie.id}):`, error.message);\r\n              }\r\n            }\r\n            \r\n            if (verifiedMovies.length === 0) {\r\n              console.log(`No verified director movies found, trying person credits for ${commonDirector}`);\r\n              \r\n              const personUrl = `https://api.themoviedb.org/3/person/${directorId}/movie_credits?api_key=${apiKey}`;\r\n              const personResponse = await axios.get(personUrl, config);\r\n              \r\n              verifiedMovies.push(...personResponse.data.crew\r\n                .filter(movie => {\r\n                  const isDirector = movie.job === 'Director';\r\n                  const hasReleaseDate = movie.release_date;\r\n                  const isInYearRange = hasReleaseDate && \r\n                    new Date(movie.release_date).getFullYear() >= minYear && \r\n                    new Date(movie.release_date).getFullYear() <= maxYear;\r\n                  const notExcluded = !excludeIds.includes(movie.id.toString());\r\n                  \r\n                  console.log(`Movie: ${movie.title} - Director: ${isDirector}, Year: ${hasReleaseDate ? new Date(movie.release_date).getFullYear() : 'N/A'}, Include: ${isDirector && isInYearRange && notExcluded}`);\r\n                  \r\n                  return isDirector && isInYearRange && notExcluded;\r\n                })\r\n                .sort((a, b) => new Date(b.release_date) - new Date(a.release_date))\r\n              );\r\n              \r\n              console.log(`Found ${verifiedMovies.length} movies from ${commonDirector}'s filmography`);\r\n            }\r\n            \r\n            return verifiedMovies.slice(0, 10);\r\n          } catch (error) {\r\n            console.log(`Director search failed for ${commonDirector}:`, error.message);\r\n            return [];\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const commonStudio = findMostCommonStudio(studios);\r\n  if (commonStudio) {\r\n    const studioId = studios.flat().find(s => s.name === commonStudio)?.id;\r\n    if (studioId) {\r\n      strategies.push({\r\n        name: \"Same Studio Production\",\r\n        priority: 9,\r\n        getParams: (allowedLanguages, otherLanguages) => {\r\n          const params = {\r\n            with_companies: studioId,\r\n            sort_by: 'vote_average.desc'\r\n          };\r\n          if (!otherLanguages && allowedLanguages.length > 0) {\r\n            params.with_original_language = allowedLanguages.join('|');\r\n          }\r\n          if (analysis.isAnimated === false) {\r\n            params.without_genres = '16';\r\n          }\r\n          return params;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return strategies;\r\n}\r\n\r\nfunction scoreRecommendationsEnhanced(allRecommendations, inputMovies, analysis) {\r\n  // FIRST: Remove duplicates by movie ID, keeping the one with highest strategy priority\r\n  const deduplicatedRecommendations = [];\r\n  const seenMovieIds = new Set();\r\n  \r\n  // Sort by strategy priority first to keep the best version of each movie\r\n  const sortedRecommendations = allRecommendations.sort((a, b) => \r\n    (b.strategyPriority || 0) - (a.strategyPriority || 0)\r\n  );\r\n  \r\n  for (const recommendation of sortedRecommendations) {\r\n    if (!seenMovieIds.has(recommendation.id)) {\r\n      seenMovieIds.add(recommendation.id);\r\n      deduplicatedRecommendations.push(recommendation);\r\n    }\r\n  }\r\n  \r\n  console.log(`Deduplicated recommendations: ${allRecommendations.length} -> ${deduplicatedRecommendations.length}`);\r\n  \r\n  // Check if at least 2 input movies are superhero movies\r\n  const isSuperheroInput = inputMovies.filter(movie => {\r\n    const superheroKeywords = ['9715', '180547', '849']; // comic, superhero, based on comic\r\n    const marvelCompanies = ['420', '7505']; // Marvel\r\n    const dcCompanies = ['9993', '128064']; // DC\r\n    const keywords = movie.keywords.map(k => k.id);\r\n    const companies = movie.production_companies?.map(c => c.id) || [];\r\n    return superheroKeywords.some(k => keywords.includes(k)) || \r\n           marvelCompanies.concat(dcCompanies).some(c => companies.includes(c));\r\n  }).length >= 2;\r\n\r\n  return deduplicatedRecommendations.map(candidate => {\r\n    let totalScore = 0;\r\n    let genreMatchDetails = {\r\n      dominantGenreMatch: false,\r\n      secondaryGenreMatches: 0,\r\n      genreOverlapScore: 0,\r\n      thematicBonus: 0\r\n    };\r\n    \r\n    // Base scoring: vote average and capped popularity\r\n    totalScore += (candidate.vote_average || 0) * 4;\r\n    totalScore += Math.min(Math.log10(candidate.popularity || 1) * 10, 50); // Cap popularity influence\r\n    \r\n    // Strategy priority\r\n    totalScore += (candidate.strategyPriority || 0) * 8;\r\n    \r\n    // Reddit data scoring\r\n    if (candidate.redditData) {\r\n      totalScore += (candidate.redditData.redditScore || 0) * 0.05;\r\n      totalScore += (candidate.redditData.mentions || 0) * 1;\r\n      totalScore += (candidate.redditData.confidence || 0) * 1;\r\n      totalScore += candidate.redditData.subreddits?.length || 0 * 2;\r\n    }\r\n    \r\n    // Director matching\r\n    const inputDirectors = inputMovies.flatMap(m => \r\n      m.credits?.crew?.filter(c => c.job === 'Director').map(d => d.name) || []\r\n    );\r\n    \r\n    if (candidate.strategyName && candidate.strategyName.startsWith('Same Director')) {\r\n      console.log(`Applying director bonus to: ${candidate.title}`);\r\n      totalScore += 500;\r\n      \r\n      const isSuperhero = candidate.genre_ids?.some(id => [28, 878].includes(id)) ||\r\n                         candidate.overview?.toLowerCase().includes('superhero') ||\r\n                         candidate.overview?.toLowerCase().includes('superman') ||\r\n                         candidate.overview?.toLowerCase().includes('comic');\r\n      \r\n      if (isSuperheroInput && isSuperhero) {\r\n        console.log(`Applying superhero theme bonus to: ${candidate.title}`);\r\n        totalScore += 200;\r\n      }\r\n    }\r\n    \r\n    // Superhero strategy bonus\r\n    if (candidate.strategyName === 'Superhero/Comic Book Movies') {\r\n      console.log(`Applying superhero strategy bonus to: ${candidate.title}`);\r\n      totalScore += 200;\r\n      \r\n      if (candidate.release_date) {\r\n        const releaseYear = new Date(candidate.release_date).getFullYear();\r\n        if (releaseYear >= 2024) {\r\n          totalScore += 100;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Superhero theme indicators\r\n    const superheroIndicators = [\r\n      'superman', 'batman', 'superhero', 'comic book', 'marvel', 'dc comics',\r\n      'hero', 'powers', 'cape', 'villain', 'justice', 'save the world'\r\n    ];\r\n    \r\n    if (candidate.overview) {\r\n      const overviewLower = candidate.overview.toLowerCase();\r\n      const superheroMatches = superheroIndicators.filter(indicator => \r\n        overviewLower.includes(indicator)\r\n      ).length;\r\n      \r\n      if (superheroMatches > 0) {\r\n        const themeBonus = Math.min(superheroMatches * 50, 100);\r\n        if (isSuperheroInput) {\r\n          totalScore += themeBonus;\r\n          genreMatchDetails.thematicBonus += themeBonus;\r\n          console.log(`Applied ${superheroMatches} superhero theme indicators to ${candidate.title}: +${themeBonus}`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Genre matching\r\n    if (analysis.genreAnalysis.primaryGenre && candidate.genre_ids) {\r\n      const candidateGenres = candidate.genre_ids;\r\n      \r\n      if (candidateGenres.includes(analysis.genreAnalysis.primaryGenre.id)) {\r\n        const dominantGenreBonus = 100 * analysis.genreAnalysis.genreWeights[analysis.genreAnalysis.primaryGenre.name];\r\n        totalScore += dominantGenreBonus;\r\n        genreMatchDetails.dominantGenreMatch = true;\r\n        genreMatchDetails.genreOverlapScore += dominantGenreBonus;\r\n      }\r\n      \r\n      analysis.genreAnalysis.secondaryGenres.forEach(secondaryGenre => {\r\n        if (candidateGenres.includes(secondaryGenre.id)) {\r\n          const secondaryBonus = 50 * analysis.genreAnalysis.genreWeights[secondaryGenre.name];\r\n          totalScore += secondaryBonus;\r\n          genreMatchDetails.secondaryGenreMatches++;\r\n          genreMatchDetails.genreOverlapScore += secondaryBonus;\r\n        }\r\n      });\r\n      \r\n      const recurringGenreMatches = analysis.genreAnalysis.dominantGenres\r\n        .filter(g => g.count > 1 && candidateGenres.includes(g.id))\r\n        .length;\r\n      \r\n      if (recurringGenreMatches >= 2) {\r\n        const comboBonus = 40 * recurringGenreMatches;\r\n        totalScore += comboBonus;\r\n        genreMatchDetails.genreOverlapScore += comboBonus;\r\n      }\r\n    }\r\n    \r\n    // Enhanced thematic matching\r\n    const racingKeywords = ['racing', 'formula one', 'car', 'racecar'];\r\n    const isRacingInput = analysis.thematicAnalysis.commonKeywords.some(k => \r\n      racingKeywords.includes(k.name.toLowerCase())\r\n    );\r\n    \r\n    if (analysis.thematicAnalysis.commonKeywords.length > 0 && candidate.overview) {\r\n      const overviewLower = candidate.overview.toLowerCase();\r\n      analysis.thematicAnalysis.commonKeywords.forEach(keyword => {\r\n        if (overviewLower.includes(keyword.name.toLowerCase())) {\r\n          const thematicBonus = 100 * keyword.count; // Increased from 20\r\n          totalScore += thematicBonus;\r\n          genreMatchDetails.thematicBonus += thematicBonus;\r\n          console.log(`Applied thematic bonus for \"${keyword.name}\" to ${candidate.title}: +${thematicBonus}`);\r\n        }\r\n      });\r\n      \r\n      // Penalize non-racing movies if input is racing-themed\r\n      const isRacingThemed = racingKeywords.some(k => overviewLower.includes(k)) ||\r\n                            analysis.thematicAnalysis.commonKeywords.some(k => \r\n                              overviewLower.includes(k.name.toLowerCase())\r\n                            );\r\n      \r\n      if (isRacingInput && !isRacingThemed) {\r\n        totalScore -= 300; // Strong penalty for non-racing movies\r\n        console.log(`Penalizing ${candidate.title} for lacking racing theme: -300`);\r\n      }\r\n    }\r\n    \r\n    // Franchise matching\r\n    if (analysis.franchisePattern) {\r\n      const titleLower = (candidate.title || '').toLowerCase();\r\n      const inputTitlesWithFranchise = inputMovies.filter(m => \r\n        m.title.toLowerCase().includes(analysis.franchisePattern.toLowerCase())\r\n      ).length;\r\n      \r\n      if (titleLower.includes(analysis.franchisePattern.toLowerCase())) {\r\n        let franchiseBonus = inputTitlesWithFranchise >= 3 ? 1200 : inputTitlesWithFranchise >= 2 ? 700 : 300; // Increased bonuses\r\n        if (genreMatchDetails.dominantGenreMatch) {\r\n          franchiseBonus += 100;\r\n        }\r\n        totalScore += franchiseBonus;\r\n        console.log(`Applying franchise bonus to ${candidate.title}: +${franchiseBonus}`);\r\n      }\r\n      \r\n      analysis.franchiseKeywords?.forEach(keyword => {\r\n        if (titleLower.includes(keyword.toLowerCase())) {\r\n          let keywordBonus = inputTitlesWithFranchise >= 3 ? 500 : inputTitlesWithFranchise >= 2 ? 300 : 100;\r\n          if (genreMatchDetails.dominantGenreMatch) {\r\n            keywordBonus += 50;\r\n          }\r\n          totalScore += keywordBonus;\r\n          console.log(`Applying franchise keyword bonus to ${candidate.title} for \"${keyword}\": +${keywordBonus}`);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Quality alignment\r\n    const qualityAlignment = calculateQualityAlignment(candidate, analysis.qualityIndicators);\r\n    totalScore += qualityAlignment * 15;\r\n    \r\n    if (analysis.qualityIndicators.qualityTier === 'premium' && candidate.vote_average >= 7.5) {\r\n      totalScore += 50;\r\n    }\r\n    \r\n    // Rating alignment\r\n    const ratingDiff = Math.abs((candidate.vote_average || 0) - analysis.avgRating);\r\n    if (ratingDiff <= 0.5) totalScore += 25;\r\n    else if (ratingDiff <= 1) totalScore += 15;\r\n    else if (ratingDiff <= 1.5) totalScore += 8;\r\n    \r\n    // Language matching\r\n    if (analysis.commonLanguage && candidate.original_language === analysis.commonLanguage) {\r\n      let langBonus = 50;\r\n      if (analysis.commonLanguage !== 'en') {\r\n        langBonus += 50;\r\n      }\r\n      totalScore += langBonus;\r\n    }\r\n    \r\n    // Animation/anime checks\r\n    if (analysis.isAnime && candidate.original_language === 'ja') {\r\n      totalScore += 100;\r\n    }\r\n    if (analysis.isAnimated && candidate.genre_ids?.includes(16)) {\r\n      totalScore += 80;\r\n    }\r\n    if (analysis.isAnimated === false && !candidate.genre_ids?.includes(16)) {\r\n      totalScore += 100;\r\n    }\r\n    \r\n    // Recency bonus (skipped for franchise matches)\r\n    if (!candidate.title.toLowerCase().includes(analysis.franchisePattern?.toLowerCase() || '')) {\r\n      if (candidate.release_date) {\r\n        const releaseYear = new Date(candidate.release_date).getFullYear();\r\n        const recencyMultiplier = analysis.qualityIndicators.qualityTier === 'premium' ? 1.5 : 1.0;\r\n        \r\n        if (releaseYear >= 2020) totalScore += 15 * recencyMultiplier;\r\n        else if (releaseYear >= 2015) totalScore += 10 * recencyMultiplier;\r\n        else if (releaseYear >= 2010) totalScore += 5 * recencyMultiplier;\r\n      }\r\n    }\r\n    \r\n    // Additional reliability scores\r\n    const popularityScore = Math.log10((candidate.popularity || 1)) * 3;\r\n    const qualityScore = (candidate.vote_average || 0) * 8;\r\n    const voteCountReliability = candidate.vote_count >= 500 ? 20 : \r\n                                candidate.vote_count >= 100 ? 10 : \r\n                                candidate.vote_count >= 50 ? 5 : 0;\r\n    \r\n    totalScore += popularityScore + qualityScore + voteCountReliability;\r\n    \r\n    // Genre overlap and diversity\r\n    const inputGenreIds = inputMovies.flatMap(m => m.genres?.map(g => g.id) || []);\r\n    const candidateGenreIds = candidate.genre_ids || [];\r\n    const genreOverlap = candidateGenreIds.filter(g => inputGenreIds.includes(g)).length;\r\n    const genreDiversity = candidateGenreIds.length - genreOverlap;\r\n    \r\n    totalScore += genreOverlap * 12;\r\n    totalScore += Math.min(genreDiversity * 4, 12);\r\n    \r\n    // Vote count bonus\r\n    if (candidate.vote_count >= 5000) totalScore += 25;\r\n    else if (candidate.vote_count >= 1000) totalScore += 15;\r\n    else if (candidate.vote_count >= 500) totalScore += 10;\r\n    \r\n    // Penalize non-action/adventure/scifi movies unless specific strategy\r\n    if (candidate.genre_ids && !candidate.genre_ids.some(id => [28, 878, 12].includes(id))) {\r\n      if (!candidate.strategyName?.startsWith('Same Director') && \r\n          candidate.strategyName !== 'Superhero/Comic Book Movies') {\r\n        totalScore -= 100;\r\n      }\r\n    }\r\n    \r\n    console.log(`${candidate.title} - Strategy: ${candidate.strategyName} - Score: ${Math.round(totalScore)}`);\r\n    \r\n    return {\r\n      ...candidate,\r\n      totalScore: Math.round(totalScore),\r\n      genreMatchDetails\r\n    };\r\n  });\r\n}\r\n\r\nfunction calculateQualityAlignment(candidate, qualityIndicators) {\r\n  const candidateRating = candidate.vote_average || 0;\r\n  const candidatePopularity = candidate.popularity || 0;\r\n  \r\n  let alignmentScore = 0;\r\n  \r\n  const ratingDiff = Math.abs(candidateRating - qualityIndicators.avgRating);\r\n  if (ratingDiff <= 0.5) alignmentScore += 3;\r\n  else if (ratingDiff <= 1.0) alignmentScore += 2;\r\n  else if (ratingDiff <= 1.5) alignmentScore += 1;\r\n  \r\n  if (qualityIndicators.qualityTier === 'premium' && candidateRating >= 7.5) {\r\n    alignmentScore += 3;\r\n  } else if (qualityIndicators.qualityTier === 'good' && candidateRating >= 6.5) {\r\n    alignmentScore += 2;\r\n  } else if (qualityIndicators.qualityTier === 'standard' && candidateRating >= 5.5) {\r\n    alignmentScore += 1;\r\n  }\r\n  \r\n  if (qualityIndicators.avgPopularity > 50 && candidatePopularity > 30) {\r\n    alignmentScore += 2;\r\n  }\r\n  \r\n  return alignmentScore;\r\n}\r\n\r\nasync function getImprovedRedditRecommendations(inputMovies, analysis, clientId, clientSecret, axiosConfig) {\r\n  const accessToken = await getRedditAccessToken(clientId, clientSecret, axiosConfig);\r\n  const recommendations = new Map();\r\n  \r\n  let subreddits = ['MovieSuggestions', 'movies'];\r\n  \r\n  if (analysis.isAnime) {\r\n    subreddits = ['anime', 'AnimeSuggest', 'MovieSuggestions'];\r\n  } else if (analysis.isAnimated) {\r\n    subreddits = ['MovieSuggestions', 'movies', 'animation'];\r\n  } else if (analysis.genreAnalysis.primaryGenre) {\r\n    const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n    if (genreName === 'horror') subreddits.push('horror');\r\n    if (genreName === 'science fiction') subreddits.push('scifi');\r\n    if (genreName === 'adventure') subreddits.push('movies');\r\n  }\r\n\r\n  const searchQueries = generateEnhancedSearchQueries(inputMovies, analysis);\r\n  \r\n  console.log(\"Reddit search queries:\", searchQueries);\r\n  console.log(\"Reddit subreddits:\", subreddits);\r\n\r\n  const searchPromises = [];\r\n  \r\n  for (const subreddit of subreddits.slice(0, 2)) {\r\n    for (const query of searchQueries.slice(0, 3)) {\r\n      const searchUrl = `https://oauth.reddit.com/r/${subreddit}/search?q=${encodeURIComponent(query)}&restrict_sr=1&sort=top&t=year&limit=25`;\r\n      \r\n      searchPromises.push(\r\n        axios.get(searchUrl, {\r\n          ...axiosConfig,\r\n          timeout: 5000,\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'User-Agent': 'MovieRecommendationBot/1.0'\r\n          }\r\n        }).then(response => ({ subreddit, query, posts: response.data.data.children }))\r\n        .catch(error => ({ subreddit, query, posts: [], error: error.message }))\r\n      );\r\n    }\r\n  }\r\n\r\n  const searchResults = await Promise.all(searchPromises);\r\n  \r\n  for (const { subreddit, posts } of searchResults) {\r\n    for (const post of posts) {\r\n      const postData = post.data;\r\n      if (postData.score < 2) continue;\r\n      \r\n      const extractedMovies = extractMovieRecommendationsEnhanced(postData, inputMovies, analysis);\r\n      \r\n      extractedMovies.forEach(movie => {\r\n        const key = movie.title.toLowerCase();\r\n        if (!recommendations.has(key)) {\r\n          recommendations.set(key, {\r\n            title: movie.title,\r\n            redditScore: 0,\r\n            upvotes: 0,\r\n            mentions: 0,\r\n            subreddits: new Set(),\r\n            confidence: 0,\r\n            genreHints: movie.genreHints || []\r\n          });\r\n        }\r\n        \r\n        const rec = recommendations.get(key);\r\n        rec.redditScore += movie.score;\r\n        rec.upvotes += movie.upvotes;\r\n        rec.mentions += 1;\r\n        rec.confidence += movie.confidence || 1;\r\n        rec.subreddits.add(subreddit);\r\n        if (movie.genreHints) {\r\n          rec.genreHints.push(...movie.genreHints);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  console.log(\"Reddit raw recommendations found:\", recommendations.size);\r\n  \r\n  return Array.from(recommendations.values())\r\n    .filter(rec => rec.mentions >= 1)\r\n    .sort((a, b) => (b.redditScore * b.confidence) - (a.redditScore * a.confidence))\r\n    .slice(0, 10);\r\n}\r\n\r\nfunction generateEnhancedSearchQueries(inputMovies, analysis) {\r\n  const queries = [];\r\n  \r\n  if (analysis.genreAnalysis.primaryGenre) {\r\n    const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n    queries.push(`best ${genreName} movies`);\r\n    queries.push(`${genreName} recommendations`);\r\n    \r\n    if (analysis.genreAnalysis.genreCombo) {\r\n      queries.push(`${analysis.genreAnalysis.genreCombo.replace('-', ' ')} movies`);\r\n    }\r\n  }\r\n  \r\n  if (analysis.franchisePattern) {\r\n    queries.push(`${analysis.franchisePattern} movie recommendations`);\r\n    queries.push(`best ${analysis.franchisePattern} films`);\r\n  }\r\n\r\n  queries.push(`movies like ${inputMovies[0].title}`);\r\n  queries.push(`similar to ${inputMovies[0].title}`);\r\n  \r\n  if (analysis.thematicAnalysis.commonKeywords.length > 0) {\r\n    const topKeyword = analysis.thematicAnalysis.commonKeywords[0];\r\n    queries.push(`${topKeyword.name} movies`);\r\n  }\r\n\r\n  if (analysis.commonLanguage && analysis.commonLanguage !== 'en') {\r\n    queries.push(`${analysis.commonLanguage} language movies`);\r\n  }\r\n\r\n  return queries.slice(0, 5);\r\n}\r\n\r\nfunction extractMovieRecommendationsEnhanced(postData, inputMovies, analysis) {\r\n  const recommendations = [];\r\n  const fullText = (postData.title + ' ' + (postData.selftext || ''));\r\n  const textLower = fullText.toLowerCase();\r\n  const inputTitles = inputMovies.map(m => m.title.toLowerCase());\r\n  \r\n  const onlyMentionsInput = inputTitles.some(title => textLower.includes(title));\r\n  if (onlyMentionsInput && !textLower.includes('recommend') && !textLower.includes('similar')) {\r\n    return [];\r\n  }\r\n\r\n  const patterns = [\r\n    { regex: /\"([^\"]{2,40})\"/g, confidence: 3 },\r\n    { regex: /'([^']{2,40})'/g, confidence: 3 },\r\n    { regex: /\\*\\*([^*]{2,40})\\*\\*/g, confidence: 3 },\r\n    { regex: /__([^_]{2,40})__/g, confidence: 3 },\r\n    { regex: /([A-Z][a-zA-Z\\s&:'-]{2,35})\\s*\\((\\d{4})\\)/g, confidence: 4 },\r\n    { regex: /(?:watch|try|check out|recommend)\\s+([A-Z][a-zA-Z\\s&:'-]{2,35})/g, confidence: 3 },\r\n    { regex: /([A-Z][a-zA-Z\\s&:'-]{2,35})\\s+is\\s+(?:great|amazing|good|excellent)/g, confidence: 3 },\r\n    { regex: /^\\s*[-*•]\\s*([A-Z][a-zA-Z\\s&:'-]{2,35})/gm, confidence: 2 },\r\n    { regex: /^\\s*\\d+\\.\\s*([A-Z][a-zA-Z\\s&:'-]{2,35})/gm, confidence: 2 },\r\n    { regex: /\\b([A-Z][a-zA-Z]{2,25}(?:\\s+[A-Z][a-zA-Z]{2,25}){0,3})\\b/g, confidence: 1 }\r\n  ];\r\n  \r\n  patterns.forEach(pattern => {\r\n    let match;\r\n    while ((match = pattern.regex.exec(fullText)) !== null) {\r\n      let title = match[1].trim();\r\n      \r\n      title = title.replace(/[.,!?;:]$/, '');\r\n      \r\n      if (title.length < 3 || title.length > 50) continue;\r\n      if (inputTitles.some(inputTitle => \r\n        title.toLowerCase().includes(inputTitle) || inputTitle.includes(title.toLowerCase())\r\n      )) continue;\r\n      \r\n      const falsePositives = [\r\n        'movie', 'film', 'cinema', 'theater', 'netflix', 'hulu', 'amazon', 'disney',\r\n        'watch', 'seen', 'recommend', 'suggestion', 'looking', 'similar', 'like',\r\n        'genre', 'director', 'actor', 'year', 'time', 'story', 'plot', 'character',\r\n        'good', 'great', 'bad', 'best', 'worst', 'love', 'hate', 'think', 'feel'\r\n      ];\r\n      \r\n      if (falsePositives.some(fp => title.toLowerCase() === fp || title.toLowerCase().includes(fp + ' '))) {\r\n        continue;\r\n      }\r\n      \r\n      let confidenceBoost = 0;\r\n      const genreHints = [];\r\n      \r\n      if (analysis.franchisePattern && title.toLowerCase().includes(analysis.franchisePattern.toLowerCase())) {\r\n        confidenceBoost += 3;\r\n      }\r\n      \r\n      if (analysis.genreAnalysis.primaryGenre) {\r\n        const genreName = analysis.genreAnalysis.primaryGenre.name.toLowerCase();\r\n        const contextWords = fullText.toLowerCase().split(/\\s+/);\r\n        const titleIndex = contextWords.findIndex(word => word.includes(title.toLowerCase().split(' ')[0]));\r\n        \r\n        if (titleIndex !== -1) {\r\n          const contextWindow = contextWords.slice(Math.max(0, titleIndex - 5), titleIndex + 6);\r\n          if (contextWindow.some(word => word.includes(genreName))) {\r\n            confidenceBoost += 2;\r\n            genreHints.push(genreName);\r\n          }\r\n        }\r\n      }\r\n      \r\n      recommendations.push({\r\n        title: title,\r\n        score: postData.score,\r\n        upvotes: postData.ups || postData.score,\r\n        confidence: pattern.confidence + confidenceBoost,\r\n        genreHints: genreHints\r\n      });\r\n    }\r\n  });\r\n  \r\n  const uniqueRecs = [];\r\n  const seenTitles = new Set();\r\n  \r\n  recommendations\r\n    .sort((a, b) => b.confidence - a.confidence)\r\n    .forEach(rec => {\r\n      const titleKey = rec.title.toLowerCase();\r\n      if (!seenTitles.has(titleKey)) {\r\n        seenTitles.add(titleKey);\r\n        uniqueRecs.push(rec);\r\n      }\r\n    });\r\n  \r\n  return uniqueRecs.slice(0, 8);\r\n}\r\n\r\nasync function getEnhancedFallback(inputMovies, analysis, apiKey, axiosConfig, resolvedIds, minYear, maxYear, allowedLanguages, otherLanguages) {\r\n  try {\r\n    if (analysis.franchisePattern) {\r\n      console.log(\"Trying franchise fallback for:\", analysis.franchisePattern);\r\n      let searchUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(analysis.franchisePattern)}&sort_by=vote_average.desc&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n      if (!otherLanguages && allowedLanguages.length > 0) {\r\n        searchUrl += `&with_original_language=${allowedLanguages.join('|')}`;\r\n      }\r\n      if (analysis.genreAnalysis.primaryGenre) {\r\n        searchUrl += `&with_genres=${analysis.genreAnalysis.primaryGenre.id}`;\r\n      }\r\n      if (analysis.isAnimated === false) {\r\n        searchUrl += `&without_genres=16`;\r\n      }\r\n      const searchResponse = await axios.get(searchUrl, axiosConfig);\r\n      const candidate = searchResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_count > 100 &&\r\n        movie.title.toLowerCase().includes(analysis.franchisePattern.toLowerCase()) &&\r\n        movie.vote_average >= (analysis.avgRating - 0.5)\r\n      );\r\n      if (candidate) {\r\n        console.log(\"Found franchise fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    if (analysis.isAnime) {\r\n      console.log(\"Trying anime-specific fallback\");\r\n      \r\n      let animeQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_original_language=ja&with_genres=16&sort_by=vote_average.desc&vote_count.gte=50&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n      \r\n      const voteCountMin = analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : \r\n                          analysis.qualityIndicators.qualityTier === 'good' ? 500 : 100;\r\n      \r\n      animeQuery += `&vote_count.gte=${voteCountMin}`;\r\n      \r\n      const animeResponse = await axios.get(animeQuery, axiosConfig);\r\n      \r\n      const candidate = animeResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_average >= (analysis.avgRating - 1.0)\r\n      );\r\n      \r\n      if (candidate) {\r\n        console.log(\"Found anime fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    if (analysis.commonLanguage || allowedLanguages.length > 0) {\r\n      console.log(\"Trying language-based fallback\");\r\n      \r\n      let langQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&sort_by=vote_average.desc&vote_count.gte=100&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n      \r\n      if (!otherLanguages && allowedLanguages.length > 0) {\r\n        langQuery += `&with_original_language=${allowedLanguages.join('|')}`;\r\n      }\r\n      \r\n      if (analysis.genreAnalysis.primaryGenre) {\r\n        langQuery += `&with_genres=${analysis.genreAnalysis.primaryGenre.id}`;\r\n      }\r\n      if (analysis.isAnimated === false) {\r\n        langQuery += `&without_genres=16`;\r\n      }\r\n      \r\n      const voteCountMin = analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : \r\n                          analysis.qualityIndicators.qualityTier === 'good' ? 500 : 100;\r\n      \r\n      langQuery += `&vote_count.gte=${voteCountMin}`;\r\n      \r\n      const langResponse = await axios.get(langQuery, axiosConfig);\r\n      \r\n      const candidate = langResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_average >= (analysis.avgRating - 1.0)\r\n      );\r\n      \r\n      if (candidate) {\r\n        console.log(\"Found language-based fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    if (analysis.genreAnalysis.primaryGenre) {\r\n      console.log(\"Trying dominant genre fallback:\", analysis.genreAnalysis.primaryGenre.name);\r\n      \r\n      const voteCountMin = analysis.qualityIndicators.qualityTier === 'premium' ? 1000 : \r\n                          analysis.qualityIndicators.qualityTier === 'good' ? 500 : 100;\r\n      \r\n      let genreQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=${analysis.genreAnalysis.primaryGenre.id}&sort_by=vote_average.desc&vote_count.gte=${voteCountMin}&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n      if (!otherLanguages && allowedLanguages.length > 0) {\r\n        genreQuery += `&with_original_language=${allowedLanguages.join('|')}`;\r\n      }\r\n      if (analysis.isAnimated === false) {\r\n        genreQuery += `&without_genres=16`;\r\n      }\r\n      \r\n      const genreResponse = await axios.get(genreQuery, axiosConfig);\r\n      \r\n      const candidate = genreResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_average >= (analysis.avgRating - 1.0)\r\n      );\r\n      \r\n      if (candidate) {\r\n        console.log(\"Found genre-based fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    if (analysis.isAnimated) {\r\n      let animQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&with_genres=16&sort_by=vote_average.desc&vote_count.gte=100&primary_release_date.gte=${minYear}-01-01&primary_release_date.lte=${maxYear}-12-31`;\r\n      \r\n      if (!otherLanguages && allowedLanguages.length > 0) {\r\n        animQuery += `&with_original_language=${allowedLanguages.join('|')}`;\r\n      }\r\n      \r\n      const animResponse = await axios.get(animQuery, axiosConfig);\r\n      const candidate = animResponse.data.results.find(movie => \r\n        !resolvedIds.includes(movie.id.toString()) && \r\n        movie.vote_average >= (analysis.avgRating - 1.0)\r\n      );\r\n      if (candidate) {\r\n        console.log(\"Found animation fallback:\", candidate.title);\r\n        return candidate;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.error(\"Enhanced fallback failed:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getRedditAccessToken(clientId, clientSecret, axiosConfig) {\r\n  const auth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');\r\n  \r\n  const response = await axios.post(\r\n    'https://www.reddit.com/api/v1/access_token',\r\n    'grant_type=client_credentials',\r\n    {\r\n      ...axiosConfig,\r\n      timeout: 5000,\r\n      headers: {\r\n        'Authorization': `Basic ${auth}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'User-Agent': 'MovieRecommendationBot/1.0'\r\n      }\r\n    }\r\n  );\r\n  return response.data.access_token;\r\n}\r\n\r\nasync function enhanceRedditRecommendationsWithTMDB(redditRecs, apiKey, axiosConfig, movieAnalysis) {\r\n  const enhancedRecs = [];\r\n  \r\n  const enhancePromises = redditRecs.map(async (rec) => {\r\n    try {\r\n      let searchResponse = await axios.get(\r\n        `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(rec.title)}`,\r\n        { ...axiosConfig, timeout: 4000 }\r\n      );\r\n      \r\n      let tmdbResults = searchResponse.data.results;\r\n      \r\n      if (tmdbResults.length === 0 && rec.title.includes(' ')) {\r\n        const words = rec.title.split(' ');\r\n        const partialTitle = words.slice(0, Math.min(3, words.length)).join(' ');\r\n        searchResponse = await axios.get(\r\n          `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(partialTitle)}`,\r\n          { ...axiosConfig, timeout: 4000 }\r\n        );\r\n        tmdbResults = searchResponse.data.results;\r\n      }\r\n      \r\n      if (tmdbResults.length > 0) {\r\n        const bestMatch = tmdbResults\r\n          .filter(movie => movie.vote_count > 100)\r\n          .reduce((best, current) => {\r\n            const bestSimilarity = calculateTitleSimilarity(rec.title, best.title);\r\n            const currentSimilarity = calculateTitleSimilarity(rec.title, current.title);\r\n            \r\n            const bestScore = bestSimilarity * 0.7 + (best.popularity || 0) * 0.3;\r\n            const currentScore = currentSimilarity * 0.7 + (current.popularity || 0) * 0.3;\r\n            \r\n            return currentScore > bestScore ? current : best;\r\n          }, tmdbResults[0]);\r\n        \r\n        const titleLower = bestMatch.title.toLowerCase();\r\n        const isFranchiseMatch = movieAnalysis.franchisePattern && titleLower.includes(movieAnalysis.franchisePattern.toLowerCase());\r\n        const isGenreMatch = movieAnalysis.genreAnalysis.primaryGenre && bestMatch.genre_ids?.includes(movieAnalysis.genreAnalysis.primaryGenre.id);\r\n        \r\n        if (movieAnalysis.isAnime && \r\n            (bestMatch.original_language === 'ja' || bestMatch.genre_ids?.includes(16)) && \r\n            calculateTitleSimilarity(rec.title, bestMatch.title) > 0.3) {\r\n          return {\r\n            ...bestMatch,\r\n            redditData: {\r\n              originalTitle: rec.title,\r\n              redditScore: rec.redditScore,\r\n              mentions: rec.mentions,\r\n              upvotes: rec.upvotes,\r\n              confidence: rec.confidence,\r\n              subreddits: Array.from(rec.subreddits),\r\n              genreHints: rec.genreHints || []\r\n            }\r\n          };\r\n        } else if (!movieAnalysis.isAnimated && \r\n                   !bestMatch.genre_ids?.includes(16) && \r\n                   bestMatch.vote_average >= (movieAnalysis.qualityIndicators.qualityTier === 'premium' ? 7.0 : 6.0) &&\r\n                   (isFranchiseMatch || isGenreMatch) && \r\n                   calculateTitleSimilarity(rec.title, bestMatch.title) > 0.3) {\r\n          return {\r\n            ...bestMatch,\r\n            redditData: {\r\n              originalTitle: rec.title,\r\n              redditScore: rec.redditScore,\r\n              mentions: rec.mentions,\r\n              upvotes: rec.upvotes,\r\n              confidence: rec.confidence,\r\n              subreddits: Array.from(rec.subreddits),\r\n              genreHints: rec.genreHints || []\r\n            }\r\n          };\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(`Error enhancing Reddit recommendation ${rec.title}:`, error.message);\r\n    }\r\n    return null;\r\n  });\r\n  \r\n  const results = await Promise.allSettled(enhancePromises);\r\n  return results\r\n    .filter(result => result.status === 'fulfilled' && result.value !== null)\r\n    .map(result => result.value);\r\n}\r\n\r\nfunction calculateTitleSimilarity(title1, title2) {\r\n  const t1 = title1.toLowerCase().replace(/[^a-z0-9\\s]/g, '').trim();\r\n  const t2 = title2.toLowerCase().replace(/[^a-z0-9\\s]/g, '').trim();\r\n  \r\n  if (t1 === t2) return 1.0;\r\n  \r\n  const words1 = new Set(t1.split(/\\s+/).filter(w => w.length > 0));\r\n  const words2 = new Set(t2.split(/\\s+/).filter(w => w.length > 0));\r\n  \r\n  if (words1.size === 0 || words2.size === 0) return 0;\r\n  \r\n  const intersection = new Set([...words1].filter(x => words2.has(x)));\r\n  const union = new Set([...words1, ...words2]);\r\n  \r\n  return intersection.size / union.size;\r\n}\r\n\r\nfunction findMostCommonPerson(personArrays) {\r\n  const allPeople = personArrays.flat();\r\n  const personCounts = {};\r\n  \r\n  allPeople.forEach(person => {\r\n    personCounts[person.name] = (personCounts[person.name] || 0) + 1;\r\n  });\r\n  \r\n  const mostCommon = Object.entries(personCounts)\r\n    .sort(([,a], [,b]) => b - a)[0];\r\n  \r\n  return mostCommon && mostCommon[1] > 1 ? mostCommon[0] : null;\r\n}\r\n\r\nfunction findMostCommonStudio(studioArrays) {\r\n  const allStudios = studioArrays.flat();\r\n  const studioCounts = {};\r\n  \r\n  allStudios.forEach(studio => {\r\n    studioCounts[studio.name] = (studioCounts[studio.name] || 0) + 1;\r\n  });\r\n  \r\n  const mostCommon = Object.entries(studioCounts)\r\n    .sort(([,a], [,b]) => b - a)[0];\r\n  \r\n  return mostCommon && mostCommon[1] > 1 ? mostCommon[0] : null;\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAO;IAC/B,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,WAAW,aAAa,GAAG,CAAC,aAAa,MAAM;IACrD,MAAM,OAAO,aAAa,GAAG,CAAC;IAC9B,MAAM,iBAAiB,aAAa,GAAG,CAAC,sBAAsB;IAE9D,MAAM,eAAc;QAAE,SAAS;IAAK;IAEpC,IAAI,cAAc;IAClB,IAAI,SAAS,IAAI,CAAC,CAAC,KAAO,MAAM,MAAM;QACpC,MAAM,iBAAiB,SAAS,GAAG,CAAC,CAAC,QACnC,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,kDAAkD,EAAE,QAAQ,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,mBAAmB,QAAQ,EAAE,cAC3H,KAAK,CAAC,CAAA,MAAO,CAAC;oBAAE,MAAM;wBAAE,SAAS,EAAE;oBAAC;gBAAE,CAAC;QAE5C,MAAM,kBAAkB,MAAM,QAAQ,GAAG,CAAC;QAC1C,cAAc,gBAAgB,GAAG,CAAC,CAAC,MAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,MAAM,CAAC,CAAC,KAAO;QACnF,IAAI,YAAY,MAAM,KAAK,GAAG;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8C,GAAG;gBAAE,QAAQ;YAAI;QACnG;IACF;IAEA,IAAI,CAAC,eAAe,YAAY,MAAM,KAAK,GAAG;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmC,GAAG;YAAE,QAAQ;QAAI;IACxF;IAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,MAAM;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmE,GAAG;YAAE,QAAQ;QAAI;IACxH;IAEA,MAAM,CAAC,SAAS,QAAQ,GAAG,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC;IAC/C,IAAI,MAAM,YAAY,MAAM,YAAY,UAAU,SAAS;QACzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgD,GAAG;YAAE,QAAQ;QAAI;IACrG;IAEA,MAAM,gBAAe,QAAQ,GAAG,CAAC,YAAY;IAC7C,MAAM,mBAAmB,QAAQ,GAAG,CAAC,gBAAgB;IACrD,MAAM,uBAAuB,QAAQ,GAAG,CAAC,oBAAoB;IAE7D,IAAI,CAAC,eAAc;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4C,GAAG;YAAE,QAAQ;QAAI;IACjG;IAEA,IAAI;QACF,QAAQ,GAAG,CAAC,mCAAmC;QAE/C,MAAM,uBAAuB,YAAY,GAAG,CAAC,OAAO;YAClD,IAAI;gBACF,MAAM,CAAC,cAAc,SAAS,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;oBAC1D,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,mCAAmC,EAAE,GAAG,SAAS,EAAE,cAAa,yCAAyC,CAAC,EAAE;oBACvH,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,mCAAmC,EAAE,GAAG,iBAAiB,EAAE,eAAc,EAAE;oBACtF,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,mCAAmC,EAAE,GAAG,kBAAkB,EAAE,eAAc,EAAE,cAAa,KAAK,CAAC,IAAM,CAAC;4BAAE,MAAM;gCAAE,UAAU,EAAE;4BAAC;wBAAE,CAAC;iBAC5I;gBACD,OAAO;oBACL,GAAG,aAAa,IAAI;oBACpB,SAAS,QAAQ,IAAI;oBACrB,UAAU,SAAS,IAAI,CAAC,QAAQ,IAAI,EAAE;oBACtC,uBAAuB,aAAa,IAAI,CAAC,qBAAqB,IAAI;gBACpE;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC,EAAE,MAAM,OAAO;gBACvE,MAAM;YACR;QACF;QAEA,MAAM,cAAc,MAAM,QAAQ,GAAG,CAAC;QACtC,QAAQ,GAAG,CAAC,iBAAiB,YAAY,GAAG,CAAC,CAAA,IAAK,CAAC;gBAAE,OAAO,EAAE,KAAK;gBAAE,IAAI,EAAE,EAAE;gBAAE,mBAAmB,EAAE,iBAAiB;YAAC,CAAC;QAEvH,MAAM,gBAAgB,MAAM,2BAA2B;QACvD,QAAQ,GAAG,CAAC,mBAAmB;QAE/B,iEAAiE;QACjE,MAAM,iBAAiB,IAAI,IAAI,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,iBAAiB;QACvE,IAAI;QACJ,IAAI,eAAe,IAAI,KAAK,GAAG;YAC7B,mBAAmB,MAAM,IAAI,CAAC;QAChC,OAAO;YACL,MAAM,aAAa,CAAC;YACpB,YAAY,OAAO,CAAC,CAAA;gBAClB,MAAM,OAAO,EAAE,iBAAiB;gBAChC,UAAU,CAAC,KAAK,GAAG,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,IAAI;YAC/C;YACA,MAAM,aAAa,OAAO,OAAO,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,MAAM,MAAM,GAAK,SAAS,IAAI,CAAC,EAAE;YACtF,mBAAmB,aAAa;gBAAC;aAAW,GAAG,EAAE,EAAE,6CAA6C;QAClG;QACA,QAAQ,GAAG,CAAC,0CAA0C;QAEtD,IAAI,wBAAwB,EAAE;QAC9B,IAAI,cAAc;QAElB,IAAI,oBAAoB,sBAAsB;YAC5C,IAAI;gBACF,QAAQ,GAAG,CAAC;gBACZ,MAAM,gBAAgB,iCAAiC,aAAa,eAAe,kBAAkB,sBAAsB;gBAC3H,MAAM,iBAAiB,IAAI,QAAQ,CAAC,GAAG,SACrC,WAAW,IAAM,OAAO,IAAI,MAAM,oBAAoB;gBAGxD,wBAAwB,MAAM,QAAQ,IAAI,CAAC;oBAAC;oBAAe;iBAAe;gBAC1E,QAAQ,GAAG,CAAC,iCAAiC,sBAAsB,MAAM;YAC3E,EAAE,OAAO,OAAO;gBACd,QAAQ,GAAG,CAAC,4CAA4C,MAAM,OAAO;gBACrE,cAAc,MAAM,OAAO;YAC7B;QACF;QAEA,MAAM,aAAa,MAAM,8BAA8B,aAAa,eAAe,eAAc,cAAa,SAAS,SAAS,kBAAkB;QAElJ,IAAI,qBAAqB,EAAE;QAE3B,IAAI,sBAAsB,MAAM,GAAG,GAAG;YACpC,MAAM,mBAAmB,MAAM,qCAC7B,sBAAsB,KAAK,CAAC,GAAG,IAC/B,eACA,cACA;YAEF,iBACG,MAAM,CAAC,CAAA;gBACN,IAAI,CAAC,UAAU,YAAY,EAAE,OAAO;gBACpC,MAAM,cAAc,IAAI,KAAK,UAAU,YAAY,EAAE,WAAW;gBAChE,OAAO,eAAe,WAAW,eAAe;YAClD,GACC,OAAO,CAAC,CAAA;gBACP,mBAAmB,IAAI,CAAC;oBACtB,GAAG,SAAS;oBACZ,cAAc;oBACd,kBAAkB;oBAClB,QAAQ;gBACV;YACF;QACJ;QAEA,MAAM,mBAAmB,WAAW,GAAG,CAAC,OAAO;YAC7C,IAAI;gBACF,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,SAAS,IAAI,EAAE;gBAE/C,IAAI,aAAa,EAAE;gBAEnB,IAAI,SAAS,YAAY,EAAE;oBACzB,aAAa,MAAM,SAAS,YAAY,CAAC,eAAc,cAAa,aAAa,SAAS,SAAS,kBAAkB;gBACvH,OAAO;oBACL,MAAM,SAAS,SAAS,SAAS,CAAC,kBAAkB;oBACpD,IAAI,CAAC,QAAQ,OAAO,EAAE;oBAEtB,IAAI,eAAe,CAAC,oDAAoD,EAAE,eAAc;oBACxF,gBAAgB,CAAC,0BAA0B,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;oBAEtG,OAAO,OAAO,CAAC,QAAQ,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;wBAC1C,IAAI,OAAO,gBAAgB,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,OAAO;oBAC/C;oBAEA,MAAM,oBAAoB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,cAAc;oBACxD,aAAa,kBAAkB,IAAI,CAAC,OAAO;gBAC7C;gBAEA,aAAa,WACV,MAAM,CAAC,CAAA;oBACN,IAAI,CAAC,YAAY,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,KAAK;wBAC9C,IAAI,CAAC,MAAM,YAAY,EAAE,OAAO;wBAChC,MAAM,cAAc,IAAI,KAAK,MAAM,YAAY,EAAE,WAAW;wBAC5D,OAAO,eAAe,WAAW,eAAe;oBAClD;oBACA,OAAO;gBACT,GACC,KAAK,CAAC,GAAG,iBAAiB,KAAK;gBAElC,OAAO,WAAW,GAAG,CAAC,CAAA,YAAa,CAAC;wBAClC,GAAG,SAAS;wBACZ,cAAc,SAAS,IAAI;wBAC3B,kBAAkB,SAAS,QAAQ;wBACnC,QAAQ;oBACV,CAAC;YACH,EAAE,OAAO,OAAO;gBACd,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,SAAS,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,OAAO;gBAC9D,OAAO,EAAE;YACX;QACF;QAEA,MAAM,kBAAkB,MAAM,QAAQ,UAAU,CAAC;QACjD,gBAAgB,OAAO,CAAC,CAAA;YACtB,IAAI,OAAO,MAAM,KAAK,aAAa;gBACjC,mBAAmB,IAAI,IAAI,OAAO,KAAK;YACzC;QACF;QAEA,QAAQ,GAAG,CAAC,CAAC,iCAAiC,EAAE,mBAAmB,MAAM,EAAE;QAE3E,IAAI,mBAAmB,MAAM,KAAK,GAAG;YACnC,MAAM,gBAAgB,MAAM,oBAAoB,aAAa,eAAe,eAAc,cAAa,aAAa,SAAS,SAAS,kBAAkB;YACxJ,IAAI,eAAe;gBACjB,mBAAmB,IAAI,CAAC;oBACtB,GAAG,aAAa;oBAChB,cAAc;oBACd,kBAAkB;oBAClB,QAAQ;gBACV;YACF;QACF;QAEA,iFAAiF;QACjF,qBAAqB,mBAAmB,MAAM,CAAC,CAAA;YAC7C,IAAI,gBAAgB;gBAClB,OAAO,UAAU,iBAAiB,IAAI,CAAC,iBAAiB,QAAQ,CAAC,UAAU,iBAAiB;YAC9F,OAAO;gBACL,OAAO,iBAAiB,QAAQ,CAAC,UAAU,iBAAiB;YAC9D;QACF;QACA,QAAQ,GAAG,CAAC,CAAC,uCAAuC,EAAE,mBAAmB,MAAM,EAAE;QAEjF,IAAI,mBAAmB,MAAM,KAAK,GAAG;YACnC,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,wBAAwB,6BAA6B,oBAAoB,aAAa;QAE5F,sBAAsB,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,UAAU,GAAG,EAAE,UAAU;QAEhE,IAAI;QACJ,IAAI,gBAAgB;YAClB,MAAM,iBAAiB,EAAE;YACzB,MAAM,YAAY,IAAI;YACtB,KAAK,MAAM,OAAO,sBAAuB;gBACvC,IAAI,IAAI,iBAAiB,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,iBAAiB,GAAG;oBAClE,UAAU,GAAG,CAAC,IAAI,iBAAiB;oBACnC,eAAe,IAAI,CAAC;oBACpB,IAAI,eAAe,MAAM,KAAK,GAAG;gBACnC;YACF;YACA,qBAAqB;QACvB,OAAO;YACL,qBAAqB,sBAAsB,KAAK,CAAC,GAAG;QACtD;QAEA,MAAM,0BAA0B,MAAM,QAAQ,GAAG,CAC/C,mBAAmB,GAAG,CAAC,OAAO;YAC5B,IAAI;gBACF,MAAM,gBAAgB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CACnC,CAAC,mCAAmC,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,cAAa,2BAA2B,CAAC,EACjG;gBAEF,OAAO;oBACL,GAAG,cAAc,IAAI;oBACrB,YAAY,IAAI,UAAU;oBAC1B,cAAc,IAAI,YAAY;oBAC9B,kBAAkB,IAAI,gBAAgB;oBACtC,QAAQ,IAAI,MAAM;oBAClB,YAAY,IAAI,UAAU,IAAI;oBAC9B,mBAAmB,IAAI,iBAAiB;gBAC1C;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,GAAG,CAAC,CAAC,kCAAkC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,OAAO;gBACzE,OAAO;YACT;QACF;QAGF,MAAM,uBAAuB,wBAAwB,MAAM,CAAC,CAAA,MAAO,QAAQ;QAE3E,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,qBAAqB,MAAM,EAAE;QAEnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,oBAAoB;YACpB;YACA,oBAAoB,cAAc,OAAO;YACzC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,cAAc;YAC1B,SAAS,MAAM,OAAO;YACtB,MAAM,MAAM,IAAI;YAChB,QAAQ,MAAM,QAAQ,EAAE;YACxB,MAAM,MAAM,QAAQ,EAAE;QACxB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,CAAC,iCAAiC,EAAE,MAAM,OAAO,EAAE;QAAC,GAC7D;YAAE,QAAQ,MAAM,QAAQ,EAAE,UAAU;QAAI;IAE5C;AACF;AAEA,SAAS,2BAA2B,WAAW;IAC7C,MAAM,WAAW;QACf,YAAY;QACZ,SAAS;QACT,gBAAgB;QAChB,eAAe;QACf,kBAAkB;QAClB,mBAAmB,EAAE;QACrB,QAAQ,EAAE;QACV,WAAW;QACX,SAAS;QACT,eAAe;YACb,gBAAgB,EAAE;YAClB,gBAAgB,CAAC;YACjB,cAAc,CAAC;YACf,cAAc;YACd,iBAAiB,EAAE;YACnB,YAAY;QACd;QACA,kBAAkB;YAChB,gBAAgB,EAAE;YAClB,kBAAkB,EAAE;YACpB,gBAAgB,EAAE;QACpB;QACA,mBAAmB;YACjB,WAAW;YACX,eAAe;YACf,aAAa;gBAAC;gBAAG;aAAE;YACnB,aAAa;QACf;IACF;IAEA,MAAM,YAAY,YAAY,OAAO,CAAC,CAAA,IAAK,EAAE,MAAM,IAAI,EAAE;IACzD,MAAM,cAAc,CAAC;IACrB,MAAM,WAAW,CAAC;IAElB,UAAU,OAAO,CAAC,CAAA;QAChB,WAAW,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI;QAC3D,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,MAAM,EAAE;IACjC;IAEA,MAAM,eAAe,OAAO,OAAO,CAAC,aACjC,IAAI,CAAC,CAAC,GAAE,EAAE,EAAE,GAAE,EAAE,GAAK,IAAI,GACzB,GAAG,CAAC,CAAC,CAAC,MAAM,MAAM,GAAK,CAAC;YAAE;YAAM;YAAO,IAAI,QAAQ,CAAC,KAAK;QAAC,CAAC;IAE9D,SAAS,aAAa,CAAC,cAAc,GAAG;IACxC,SAAS,aAAa,CAAC,cAAc,GAAG;IAExC,IAAI,aAAa,MAAM,GAAG,GAAG;QAC3B,SAAS,aAAa,CAAC,YAAY,GAAG,YAAY,CAAC,EAAE;QACrD,SAAS,aAAa,CAAC,eAAe,GAAG,aAAa,KAAK,CAAC,GAAG;QAE/D,MAAM,WAAW,YAAY,CAAC,EAAE,CAAC,KAAK;QACtC,aAAa,OAAO,CAAC,CAAA;YACnB,SAAS,aAAa,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,GAAG,MAAM,KAAK,GAAG;QAClE;QAEA,IAAI,aAAa,MAAM,GAAG,KAAK,YAAY,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG;YACxD,SAAS,aAAa,CAAC,UAAU,GAAG,aACjC,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,GAAG,GACtB,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,EACf,IAAI,CAAC;QACV;IACF;IAEA,MAAM,cAAc,YAAY,OAAO,CAAC,CAAA,IAAK,EAAE,QAAQ,IAAI,EAAE;IAC7D,MAAM,gBAAgB,CAAC;IAEvB,YAAY,OAAO,CAAC,CAAA;QAClB,MAAM,UAAU,QAAQ,IAAI,CAAC,WAAW;QACxC,aAAa,CAAC,QAAQ,GAAG,CAAC,aAAa,CAAC,QAAQ,IAAI,CAAC,IAAI;IAC3D;IAEA,SAAS,gBAAgB,CAAC,cAAc,GAAG,OAAO,OAAO,CAAC,eACvD,MAAM,CAAC,CAAC,GAAG,MAAM,GAAK,QAAQ,GAC9B,IAAI,CAAC,CAAC,GAAE,EAAE,EAAE,GAAE,EAAE,GAAK,IAAI,GACzB,GAAG,CAAC,CAAC,CAAC,MAAM,MAAM,GAAK,CAAC;YAAE;YAAM;QAAM,CAAC,GACvC,KAAK,CAAC,GAAG;IAEZ,MAAM,UAAU,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,YAAY,IAAI;IACvD,MAAM,eAAe,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,UAAU,IAAI;IAE1D,SAAS,iBAAiB,CAAC,SAAS,GAAG,QAAQ,MAAM,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG,KAAK,QAAQ,MAAM;IAC1F,SAAS,iBAAiB,CAAC,aAAa,GAAG,aAAa,MAAM,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG,KAAK,aAAa,MAAM;IACxG,SAAS,iBAAiB,CAAC,WAAW,GAAG;QAAC,KAAK,GAAG,IAAI;QAAU,KAAK,GAAG,IAAI;KAAS;IAErF,IAAI,SAAS,iBAAiB,CAAC,SAAS,IAAI,KAAK;QAC/C,SAAS,iBAAiB,CAAC,WAAW,GAAG;IAC3C,OAAO,IAAI,SAAS,iBAAiB,CAAC,SAAS,IAAI,KAAK;QACtD,SAAS,iBAAiB,CAAC,WAAW,GAAG;IAC3C,OAAO;QACL,SAAS,iBAAiB,CAAC,WAAW,GAAG;IAC3C;IAEA,MAAM,gBAAgB;QAAC;QAAS;QAAS;KAAqB;IAC9D,MAAM,kBAAkB,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,WAAW;IAC/D,MAAM,gBAAgB,UAAU,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI,CAAC,WAAW;IAE3D,SAAS,UAAU,GAAG,cAAc,IAAI,CAAC,CAAA,IAAK,EAAE,QAAQ,CAAC;IAEzD,SAAS,OAAO,GAAG,AAAC,SAAS,UAAU,IACpB,YAAY,IAAI,CAAC,CAAA,IAAK,EAAE,iBAAiB,KAAK,SAC/C,gBAAgB,IAAI,CAAC,CAAA,IAAK,cAAc,IAAI,CAAC,CAAA,KAAM,EAAE,QAAQ,CAAC;IAEhF,IAAI,CAAC,SAAS,UAAU,IAAI,gBAAgB,IAAI,CAAC,CAAA,IAAK,cAAc,IAAI,CAAC,CAAA,KAAM,EAAE,QAAQ,CAAC,OAAO;QAC/F,SAAS,OAAO,GAAG;QACnB,SAAS,UAAU,GAAG;IACxB;IAEA,+BAA+B;IAC/B,MAAM,YAAY;QAAC;QAAO;QAAM;QAAO;QAAM;QAAM;QAAK;QAAM;QAAO;QAAM;QAAQ;QAAM;KAAK;IAE9F,eAAe;QACb,MAAM,cAAc,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,qBAAqB,EAAE,MAAM,CAAC,CAAA,IAAK;QAC9E,MAAM,mBAAmB,CAAC;QAE1B,YAAY,OAAO,CAAC,CAAA;YAClB,IAAI,YAAY;gBACd,gBAAgB,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI;YAC7E;QACF;QAEA,MAAM,uBAAuB,OAAO,OAAO,CAAC,kBACzC,IAAI,CAAC,CAAC,GAAE,EAAE,EAAE,GAAE,EAAE,GAAK,IAAI,GACzB,IAAI,CAAC,CAAC,GAAG,MAAM,GAAK,SAAS;QAEhC,IAAI,sBAAsB;YACxB,MAAM,eAAe,oBAAoB,CAAC,EAAE;YAC5C,MAAM,aAAa,YAAY,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,IAAI;YACjD,QAAQ,GAAG,CAAC,CAAC,iBAAiB,EAAE,WAAW,IAAI,CAAC,MAAM,EAAE,aAAa,OAAO,EAAE,oBAAoB,CAAC,EAAE,CAAC,OAAO,CAAC;YAC9G,OAAO;gBACL,kBAAkB,WAAW,IAAI,CAAC,OAAO,CAAC,4BAA4B,IAAI,IAAI;gBAC9E,mBAAmB,WAAW,IAAI,CAAC,KAAK,CAAC,OAAO,MAAM,CAAC,CAAA,IAAK,CAAC,UAAU,QAAQ,CAAC,EAAE,WAAW,OAAO,EAAE,MAAM,GAAG;YACjH;QACF;QAEA,uDAAuD;QACvD,MAAM,WAAW,YAAY,OAAO,CAAC,CAAA,IACnC,EAAE,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,eAAe,MAAM,CAAC,CAAA,OAChD,KAAK,MAAM,GAAG,KAAK,CAAC,UAAU,QAAQ,CAAC;QAI3C,MAAM,aAAa,CAAC;QACpB,SAAS,OAAO,CAAC,CAAA;YACf,UAAU,CAAC,KAAK,GAAG,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,IAAI;QAC/C;QAEA,MAAM,0BAA0B,OAAO,OAAO,CAAC,YAC5C,MAAM,CAAC,CAAC,CAAC,MAAM,MAAM,GAAK,SAAS,GACnC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAK;QAEnB,KAAK,MAAM,QAAQ,wBAAyB;YAC1C,IAAI;gBACF,MAAM,mBAAmB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CACtC,CAAC,uDAAuD,EAAE,aAAa,OAAO,EAAE,mBAAmB,OAAO,EAC1G;gBAGF,MAAM,sBAAsB,iBAAiB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA,IAC/D,EAAE,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,KAAK,WAAW;gBAGhD,KAAK,MAAM,cAAc,oBAAqB;oBAC5C,MAAM,oBAAoB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CACvC,CAAC,wCAAwC,EAAE,WAAW,EAAE,CAAC,SAAS,EAAE,cAAc,EAClF;oBAGF,MAAM,mBAAmB,kBAAkB,IAAI,CAAC,KAAK,IAAI,EAAE;oBAC3D,MAAM,sBAAsB,YAAY,MAAM,CAAC,CAAA,IAC7C,iBAAiB,IAAI,CAAC,CAAA,KAAM,GAAG,EAAE,KAAK,EAAE,EAAE;oBAG5C,IAAI,oBAAoB,MAAM,IAAI,GAAG;wBACnC,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,WAAW,IAAI,CAAC,MAAM,EAAE,oBAAoB,MAAM,CAAC,gBAAgB,CAAC;wBAC/G,OAAO;4BACL,kBAAkB,WAAW,IAAI,CAAC,OAAO,CAAC,4BAA4B,IAAI,IAAI;4BAC9E,mBAAmB,WAAW,IAAI,CAAC,KAAK,CAAC,OAAO,MAAM,CAAC,CAAA,IAAK,CAAC,UAAU,QAAQ,CAAC,EAAE,WAAW,OAAO,EAAE,MAAM,GAAG;wBACjH;oBACF;gBACF;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,GAAG,CAAC,CAAC,2CAA2C,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,OAAO;YACnF;QACF;QAEA,OAAO;YAAE,kBAAkB;YAAM,mBAAmB,EAAE;QAAC;IACzD;IAEA,MAAM,kBAAkB,0BAA0B,KAAK,CAAC,CAAA;QACtD,QAAQ,KAAK,CAAC,+BAA+B,MAAM,OAAO;QAC1D,OAAO;YAAE,kBAAkB;YAAM,mBAAmB,EAAE;QAAC;IACzD;IAEA,OAAO,gBAAgB,IAAI,CAAC,CAAC,EAAE,gBAAgB,EAAE,iBAAiB,EAAE;QAClE,SAAS,gBAAgB,GAAG;QAC5B,SAAS,iBAAiB,GAAG;QAE7B,MAAM,YAAY,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,iBAAiB;QAC1D,MAAM,iBAAiB,CAAC;QACxB,UAAU,OAAO,CAAC,CAAA;YAChB,cAAc,CAAC,KAAK,GAAG,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC,IAAI;QACvD;QACA,MAAM,iBAAiB,OAAO,OAAO,CAAC,gBAAgB,IAAI,CAAC,CAAC,GAAE,EAAE,EAAE,GAAE,EAAE,GAAK,IAAI,EAAE,CAAC,EAAE;QACpF,IAAI,kBAAkB,cAAc,CAAC,EAAE,IAAI,GAAG;YAC5C,SAAS,cAAc,GAAG,cAAc,CAAC,EAAE;QAC7C;QAEA,MAAM,YAAY,YAAY,OAAO,CAAC,CAAA,IAAK,EAAE,oBAAoB,EAAE,IAAI,CAAA,IAAK,EAAE,UAAU,KAAK,EAAE;QAC/F,MAAM,gBAAgB,CAAC;QACvB,UAAU,OAAO,CAAC,CAAA;YAChB,aAAa,CAAC,QAAQ,GAAG,CAAC,aAAa,CAAC,QAAQ,IAAI,CAAC,IAAI;QAC3D;QACA,MAAM,oBAAoB,OAAO,OAAO,CAAC,eAAe,IAAI,CAAC,CAAC,GAAE,EAAE,EAAE,GAAE,EAAE,GAAK,IAAI,EAAE,CAAC,EAAE;QACtF,IAAI,qBAAqB,iBAAiB,CAAC,EAAE,IAAI,GAAG;YAClD,SAAS,aAAa,GAAG,iBAAiB,CAAC,EAAE;QAC/C;QAEA,SAAS,SAAS,GAAG,SAAS,iBAAiB,CAAC,SAAS;QACzD,SAAS,OAAO,GAAG,KAAK,KAAK,CAAC,YAAY,MAAM,CAAC,CAAC,KAAK;YACrD,MAAM,OAAO,IAAI,KAAK,EAAE,YAAY,EAAE,WAAW;YACjD,OAAO,MAAM;QACf,GAAG,KAAK,YAAY,MAAM;QAE1B,OAAO;IACT;AACF;AAEA,eAAe,8BAA8B,WAAW,EAAE,QAAQ,EAAE,aAAY,EAAE,YAAW,EAAE,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,cAAc;IAC/I,MAAM,SAAS,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,MAAM,IAAI,EAAE;IAClD,MAAM,YAAY,YAAY,GAAG,CAAC,CAAA,IAChC,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAA,IAAK,EAAE,GAAG,KAAK,eAAe,EAAE;IAEzD,MAAM,UAAU,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,oBAAoB,IAAI,EAAE;IACjE,MAAM,WAAW,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,QAAQ,IAAI,EAAE;IAEtD,MAAM,aAAa,EAAE;IAErB,IAAI,SAAS,cAAc,IAAI,CAAC,gBAAgB;QAC9C,WAAW,IAAI,CAAC;YACd,MAAM,GAAG,SAAS,cAAc,CAAC,WAAW,GAAG,eAAe,CAAC;YAC/D,UAAU;YACV,WAAW,CAAC,kBAAkB;gBAC5B,MAAM,SAAS;oBACb,SAAS;oBACT,kBAAkB;gBACpB;gBACA,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;oBAClD,OAAO,sBAAsB,GAAG,iBAAiB,IAAI,CAAC;gBACxD;gBACA,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;oBACvC,OAAO,WAAW,GAAG,SAAS,aAAa,CAAC,YAAY,CAAC,EAAE;gBAC7D;gBACA,IAAI,SAAS,iBAAiB,CAAC,WAAW,KAAK,WAAW;oBACxD,MAAM,CAAC,mBAAmB,GAAG;gBAC/B,OAAO,IAAI,SAAS,iBAAiB,CAAC,WAAW,KAAK,QAAQ;oBAC5D,MAAM,CAAC,mBAAmB,GAAG;gBAC/B;gBACA,IAAI,SAAS,UAAU,KAAK,OAAO;oBACjC,OAAO,cAAc,GAAG;gBAC1B;gBACA,OAAO;YACT;QACF;IACF;IAEA,IAAI,SAAS,aAAa,CAAC,YAAY,IAAI,SAAS,aAAa,CAAC,YAAY,CAAC,KAAK,GAAG,GAAG;QACxF,MAAM,eAAe,SAAS,aAAa,CAAC,YAAY;QAExD,WAAW,IAAI,CAAC;YACd,MAAM,CAAC,SAAS,EAAE,aAAa,IAAI,CAAC,MAAM,CAAC;YAC3C,UAAU;YACV,WAAW,CAAC,kBAAkB;gBAC5B,MAAM,SAAS;oBACb,aAAa,aAAa,EAAE;oBAC5B,SAAS;oBACT,kBAAkB,SAAS,iBAAiB,CAAC,WAAW,KAAK,YAAY,OAAO;gBAClF;gBACA,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;oBAClD,OAAO,sBAAsB,GAAG,iBAAiB,IAAI,CAAC;gBACxD;gBACA,MAAM,2BAA2B,SAAS,aAAa,CAAC,eAAe,CACpE,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,GAAG,GACtB,KAAK,CAAC,GAAG;gBACZ,IAAI,yBAAyB,MAAM,GAAG,GAAG;oBACvC,OAAO,WAAW,IAAI,MAAM,yBAAyB,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE,EAAE,IAAI,CAAC;gBAC3E;gBACA,IAAI,SAAS,iBAAiB,CAAC,WAAW,KAAK,WAAW;oBACxD,MAAM,CAAC,mBAAmB,GAAG;gBAC/B,OAAO,IAAI,SAAS,iBAAiB,CAAC,WAAW,KAAK,QAAQ;oBAC5D,MAAM,CAAC,mBAAmB,GAAG;gBAC/B;gBACA,IAAI,SAAS,UAAU,KAAK,OAAO;oBACjC,OAAO,cAAc,GAAG;gBAC1B;gBACA,OAAO;YACT;QACF;QAEA,IAAI,SAAS,aAAa,CAAC,UAAU,EAAE;YACrC,WAAW,IAAI,CAAC;gBACd,MAAM,GAAG,SAAS,aAAa,CAAC,UAAU,CAAC,YAAY,CAAC;gBACxD,UAAU;gBACV,WAAW,CAAC,kBAAkB;oBAC5B,MAAM,kBAAkB,SAAS,aAAa,CAAC,cAAc,CAC1D,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,GAAG,GACtB,KAAK,CAAC,GAAG;oBAEZ,MAAM,SAAS;wBACb,aAAa,gBAAgB,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE,EAAE,IAAI,CAAC;wBACjD,SAAS;wBACT,kBAAkB;oBACpB;oBACA,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;wBAClD,OAAO,sBAAsB,GAAG,iBAAiB,IAAI,CAAC;oBACxD;oBACA,IAAI,SAAS,UAAU,KAAK,OAAO;wBACjC,OAAO,cAAc,GAAG;oBAC1B;oBACA,OAAO;gBACT;YACF;QACF;IACF;IAEA,IAAI,SAAS,gBAAgB,IAAI,SAAS,iBAAiB,CAAC,MAAM,GAAG,GAAG;QACtE,MAAM,eAAe,SAAS,gBAAgB,GAAG,KAAK;QAEtD,WAAW,IAAI,CAAC;YACd,MAAM;YACN,UAAU;YACV,cAAc,OAAO,QAAQ,QAAQ,YAAY,SAAS,SAAS,kBAAkB;gBACnF,MAAM,iBAAiB,SAAS,iBAAiB,CAAC,MAAM,GAAG,IACvD,SAAS,iBAAiB,GAC1B;oBAAC,SAAS,gBAAgB;iBAAC;gBAE/B,QAAQ,GAAG,CAAC,kCAAkC;gBAE9C,MAAM,gBAAgB,EAAE;gBAExB,KAAK,MAAM,QAAQ,eAAe,KAAK,CAAC,GAAG,GAAI;oBAC7C,IAAI;wBACF,IAAI,YAAY,CAAC,kDAAkD,EAAE,OAAO,OAAO,EAAE,mBAAmB,MAAM,oDAAoD,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;wBAC7N,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;4BAClD,aAAa,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;wBACtE;wBACA,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;4BACvC,aAAa,CAAC,aAAa,EAAE,SAAS,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE;wBACvE;wBAEA,MAAM,iBAAiB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,WAAW;wBAElD,IAAI,UAAU,eAAe,IAAI,CAAC,OAAO,CACtC,MAAM,CAAC,CAAA;4BACN,IAAI,WAAW,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,KAAK,OAAO;4BACrD,IAAI,MAAM,UAAU,GAAG,IAAI,OAAO;4BAClC,IAAI,CAAC,MAAM,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,KAAK,WAAW,KAAK,OAAO;4BACpE,IAAI,SAAS,UAAU,KAAK,SAAS,MAAM,SAAS,EAAE,SAAS,KAAK,OAAO;4BAC3E,OAAO;wBACT;wBAEF,cAAc,IAAI,IAAI,QAAQ,KAAK,CAAC,GAAG;wBACvC,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,QAAQ,MAAM,CAAC,kBAAkB,EAAE,KAAK,UAAU,EAAE,QAAQ,KAAK,EAAE,SAAS;oBACnG,EAAE,OAAO,OAAO;wBACd,QAAQ,GAAG,CAAC,CAAC,kCAAkC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,OAAO;oBAC1E;gBACF;gBAEA,MAAM,gBAAgB,cAAc,MAAM,CAAC,CAAC,OAAO,OAAO,OACxD,UAAU,KAAK,SAAS,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,MAAM,EAAE;gBAGjD,OAAO,cACJ,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,YAAY,GAAG,EAAE,YAAY,EAC9C,KAAK,CAAC,GAAG;YACd;QACF;IACF;IAEA,IAAI,SAAS,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA,IAChD;YAAC;YAAS;YAAa;YAAU;YAAM;SAAiB,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,WAAW,MACnF;QACD,WAAW,IAAI,CAAC;YACd,MAAM;YACN,UAAU;YACV,cAAc,OAAO,QAAQ,QAAQ,YAAY,SAAS,SAAS,kBAAkB;gBACnF,IAAI;oBACF,MAAM,oBAAoB;wBAAC;wBAAQ;wBAAU;qBAAM;oBACnD,MAAM,kBAAkB;wBAAC;wBAAO;qBAAO;oBACvC,MAAM,cAAc;wBAAC;wBAAQ;qBAAS;oBAEtC,MAAM,WAAW,EAAE;oBAEnB,KAAK,MAAM,aAAa,kBAAmB;wBACzC,IAAI,MAAM,CAAC,oDAAoD,EAAE,OAAO,eAAe,EAAE,UAAU,oDAAoD,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,wBAAwB,CAAC;wBACpO,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;4BAClD,OAAO,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;wBAChE;wBACA,SAAS,IAAI,CAAC,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,KAAK;oBAC/B;oBAEA,MAAM,eAAe;2BAAI;2BAAoB;qBAAY;oBACzD,KAAK,MAAM,aAAa,aAAc;wBACpC,IAAI,MAAM,CAAC,oDAAoD,EAAE,OAAO,gBAAgB,EAAE,UAAU,oDAAoD,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,wBAAwB,CAAC;wBACrO,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;4BAClD,OAAO,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;wBAChE;wBACA,SAAS,IAAI,CAAC,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,KAAK;oBAC/B;oBAEA,MAAM,UAAU,MAAM,QAAQ,UAAU,CAAC;oBACzC,MAAM,qBAAqB,EAAE;oBAE7B,QAAQ,OAAO,CAAC,CAAA;wBACd,IAAI,OAAO,MAAM,KAAK,aAAa;4BACjC,mBAAmB,IAAI,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO;wBACtD;oBACF;oBAEA,MAAM,eAAe,mBAClB,MAAM,CAAC,CAAA,QAAS,CAAC,WAAW,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,KACtD,MAAM,CAAC,CAAC,OAAO,OAAO,OAAS,UAAU,KAAK,SAAS,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,MAAM,EAAE,GAC9E,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,YAAY,IAAI,IAAI,KAAK,EAAE,YAAY,GACjE,KAAK,CAAC,GAAG;oBAEZ,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,aAAa,MAAM,CAAC,0BAA0B,EAAE,QAAQ,KAAK,EAAE,SAAS;oBAC7F,OAAO;gBACT,EAAE,OAAO,OAAO;oBACd,QAAQ,GAAG,CAAC,CAAC,wBAAwB,CAAC,EAAE,MAAM,OAAO;oBACrD,OAAO,EAAE;gBACX;YACF;QACF;IACF;IAEA,IAAI,SAAS,gBAAgB,CAAC,cAAc,CAAC,MAAM,GAAG,GAAG;QACvD,MAAM,aAAa,SAAS,gBAAgB,CAAC,cAAc,CAAC,EAAE;QAE9D,WAAW,IAAI,CAAC;YACd,MAAM,CAAC,gBAAgB,EAAE,WAAW,IAAI,EAAE;YAC1C,UAAU;YACV,cAAc,OAAO,QAAQ,QAAQ,YAAY,SAAS,SAAS,kBAAkB;gBACnF,IAAI;oBACF,MAAM,gBAAgB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CACnC,CAAC,oDAAoD,EAAE,OAAO,OAAO,EAAE,mBAAmB,WAAW,IAAI,GAAG,EAC5G;oBAGF,IAAI,cAAc,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG;wBACzC,MAAM,YAAY,cAAc,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;wBAElD,IAAI,YAAY,CAAC,oDAAoD,EAAE,OAAO,eAAe,EAAE,UAAU,uEAAuE,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;wBAC3O,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;4BAClD,aAAa,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;wBACtE;wBACA,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;4BACvC,aAAa,CAAC,aAAa,EAAE,SAAS,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE;wBACvE;wBACA,IAAI,SAAS,UAAU,KAAK,OAAO;4BACjC,aAAa,CAAC,kBAAkB,CAAC;wBACnC;wBAEA,MAAM,iBAAiB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,WAAW;wBAElD,OAAO,eAAe,IAAI,CAAC,OAAO,CAC/B,MAAM,CAAC,CAAA,QAAS,CAAC,WAAW,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,KACtD,KAAK,CAAC,GAAG;oBACd;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,WAAW,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,OAAO;gBAC/E;gBACA,OAAO,EAAE;YACX;QACF;IACF;IAEA,IAAI,SAAS,OAAO,EAAE;QACpB,WAAW,IAAI,CAAC;YACd,MAAM;YACN,UAAU;YACV,cAAc,OAAO,QAAQ,QAAQ,YAAY,SAAS,SAAS,kBAAkB;gBACnF,MAAM,WAAW;oBACf,CAAC,oDAAoD,EAAE,OAAO,+GAA+G,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;oBACxO,CAAC,oDAAoD,EAAE,OAAO,uEAAuE,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;oBAChM,CAAC,oDAAoD,EAAE,OAAO,8EAA8E,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;iBACxM,CAAC,GAAG,CAAC,CAAA,MAAO,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,KAAK;gBAE5B,MAAM,UAAU,MAAM,QAAQ,UAAU,CAAC;gBACzC,MAAM,YAAY,EAAE;gBAEpB,QAAQ,OAAO,CAAC,CAAA;oBACd,IAAI,OAAO,MAAM,KAAK,aAAa;wBACjC,UAAU,IAAI,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO;oBAC7C;gBACF;gBAEA,OAAO,UACJ,MAAM,CAAC,CAAA,QAAS,CAAC,WAAW,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,KACtD,MAAM,CAAC,CAAC,OAAO,OAAO,OAAS,UAAU,KAAK,SAAS,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,MAAM,EAAE,GAC9E,KAAK,CAAC,GAAG;YACd;QACF;IACF,OAAO,IAAI,SAAS,UAAU,EAAE;QAC9B,WAAW,IAAI,CAAC;YACd,MAAM;YACN,UAAU;YACV,WAAW,CAAC,kBAAkB;gBAC5B,MAAM,SAAS;oBACb,aAAa;oBACb,SAAS;oBACT,kBAAkB;gBACpB;gBACA,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;oBAClD,OAAO,sBAAsB,GAAG,iBAAiB,IAAI,CAAC;gBACxD;gBACA,OAAO;YACT;QACF;IACF;IAEA,MAAM,iBAAiB,qBAAqB;IAC5C,QAAQ,GAAG,CAAC,oCAAoC,UAAU,IAAI,GAAG,GAAG,CAAC,CAAA,IAAK,CAAC;YAAE,MAAM,EAAE,IAAI;YAAE,IAAI,EAAE,EAAE;QAAC,CAAC;IACrG,QAAQ,GAAG,CAAC,yBAAyB;IAErC,IAAI,gBAAgB;QAClB,MAAM,eAAe,UAAU,IAAI,GAAG,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK;QAC3D,MAAM,aAAa,cAAc;QAEjC,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,eAAe,MAAM,EAAE,WAAW,CAAC,CAAC;QAEjF,IAAI,YAAY;YACd,WAAW,IAAI,CAAC;gBACd,MAAM,CAAC,eAAe,EAAE,gBAAgB;gBACxC,UAAU;gBACV,cAAc,OAAO,QAAQ,QAAQ,YAAY,SAAS,SAAS,kBAAkB;oBACnF,IAAI;wBACF,QAAQ,GAAG,CAAC,CAAC,iCAAiC,EAAE,eAAe,EAAE,EAAE,WAAW,UAAU,EAAE,QAAQ,KAAK,EAAE,SAAS;wBAElH,IAAI,cAAc,CAAC,oDAAoD,EAAE,OAAO,WAAW,EAAE,WAAW,oDAAoD,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;wBAEvN,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;4BAClD,eAAe,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;wBACxE;wBACA,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;4BACvC,eAAe,CAAC,aAAa,EAAE,SAAS,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE;wBACzE;wBACA,IAAI,SAAS,UAAU,KAAK,OAAO;4BACjC,eAAe,CAAC,kBAAkB,CAAC;wBACrC;wBAEA,QAAQ,GAAG,CAAC,wBAAwB;wBACpC,MAAM,mBAAmB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,aAAa;wBAEtD,IAAI,iBAAiB,iBAAiB,IAAI,CAAC,OAAO,CAC/C,MAAM,CAAC,CAAA,QAAS,CAAC,WAAW,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ;wBAEzD,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,eAAe,MAAM,CAAC,yBAAyB,EAAE,eAAe,oBAAoB,CAAC;wBAE1G,MAAM,iBAAiB,EAAE;wBACzB,KAAK,MAAM,SAAS,eAAgB;4BAClC,IAAI;gCACF,MAAM,kBAAkB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CACrC,CAAC,mCAAmC,EAAE,MAAM,EAAE,CAAC,iBAAiB,EAAE,QAAQ,EAC1E;gCAEF,MAAM,eAAe,gBAAgB,IAAI,CAAC,IAAI,CAAC,IAAI,CACjD,CAAA,OAAQ,KAAK,EAAE,KAAK,cAAc,KAAK,GAAG,KAAK;gCAEjD,IAAI,cAAc;oCAChB,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,MAAM,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,iBAAiB,EAAE,gBAAgB;oCACxF,eAAe,IAAI,CAAC;gCACtB,OAAO;oCACL,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,MAAM,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,oBAAoB,EAAE,gBAAgB;gCAC7F;4BACF,EAAE,OAAO,OAAO;gCACd,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,MAAM,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,OAAO;4BAC5F;wBACF;wBAEA,IAAI,eAAe,MAAM,KAAK,GAAG;4BAC/B,QAAQ,GAAG,CAAC,CAAC,6DAA6D,EAAE,gBAAgB;4BAE5F,MAAM,YAAY,CAAC,oCAAoC,EAAE,WAAW,uBAAuB,EAAE,QAAQ;4BACrG,MAAM,iBAAiB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,WAAW;4BAElD,eAAe,IAAI,IAAI,eAAe,IAAI,CAAC,IAAI,CAC5C,MAAM,CAAC,CAAA;gCACN,MAAM,aAAa,MAAM,GAAG,KAAK;gCACjC,MAAM,iBAAiB,MAAM,YAAY;gCACzC,MAAM,gBAAgB,kBACpB,IAAI,KAAK,MAAM,YAAY,EAAE,WAAW,MAAM,WAC9C,IAAI,KAAK,MAAM,YAAY,EAAE,WAAW,MAAM;gCAChD,MAAM,cAAc,CAAC,WAAW,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ;gCAE1D,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,aAAa,EAAE,WAAW,QAAQ,EAAE,iBAAiB,IAAI,KAAK,MAAM,YAAY,EAAE,WAAW,KAAK,MAAM,WAAW,EAAE,cAAc,iBAAiB,aAAa;gCAEnM,OAAO,cAAc,iBAAiB;4BACxC,GACC,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,YAAY,IAAI,IAAI,KAAK,EAAE,YAAY;4BAGpE,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,eAAe,MAAM,CAAC,aAAa,EAAE,eAAe,cAAc,CAAC;wBAC1F;wBAEA,OAAO,eAAe,KAAK,CAAC,GAAG;oBACjC,EAAE,OAAO,OAAO;wBACd,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,eAAe,CAAC,CAAC,EAAE,MAAM,OAAO;wBAC1E,OAAO,EAAE;oBACX;gBACF;YACF;QACF;IACF;IAEA,MAAM,eAAe,qBAAqB;IAC1C,IAAI,cAAc;QAChB,MAAM,WAAW,QAAQ,IAAI,GAAG,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,eAAe;QACpE,IAAI,UAAU;YACZ,WAAW,IAAI,CAAC;gBACd,MAAM;gBACN,UAAU;gBACV,WAAW,CAAC,kBAAkB;oBAC5B,MAAM,SAAS;wBACb,gBAAgB;wBAChB,SAAS;oBACX;oBACA,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;wBAClD,OAAO,sBAAsB,GAAG,iBAAiB,IAAI,CAAC;oBACxD;oBACA,IAAI,SAAS,UAAU,KAAK,OAAO;wBACjC,OAAO,cAAc,GAAG;oBAC1B;oBACA,OAAO;gBACT;YACF;QACF;IACF;IAEA,OAAO;AACT;AAEA,SAAS,6BAA6B,kBAAkB,EAAE,WAAW,EAAE,QAAQ;IAC7E,uFAAuF;IACvF,MAAM,8BAA8B,EAAE;IACtC,MAAM,eAAe,IAAI;IAEzB,yEAAyE;IACzE,MAAM,wBAAwB,mBAAmB,IAAI,CAAC,CAAC,GAAG,IACxD,CAAC,EAAE,gBAAgB,IAAI,CAAC,IAAI,CAAC,EAAE,gBAAgB,IAAI,CAAC;IAGtD,KAAK,MAAM,kBAAkB,sBAAuB;QAClD,IAAI,CAAC,aAAa,GAAG,CAAC,eAAe,EAAE,GAAG;YACxC,aAAa,GAAG,CAAC,eAAe,EAAE;YAClC,4BAA4B,IAAI,CAAC;QACnC;IACF;IAEA,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,mBAAmB,MAAM,CAAC,IAAI,EAAE,4BAA4B,MAAM,EAAE;IAEjH,wDAAwD;IACxD,MAAM,mBAAmB,YAAY,MAAM,CAAC,CAAA;QAC1C,MAAM,oBAAoB;YAAC;YAAQ;YAAU;SAAM,EAAE,mCAAmC;QACxF,MAAM,kBAAkB;YAAC;YAAO;SAAO,EAAE,SAAS;QAClD,MAAM,cAAc;YAAC;YAAQ;SAAS,EAAE,KAAK;QAC7C,MAAM,WAAW,MAAM,QAAQ,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE;QAC7C,MAAM,YAAY,MAAM,oBAAoB,EAAE,IAAI,CAAA,IAAK,EAAE,EAAE,KAAK,EAAE;QAClE,OAAO,kBAAkB,IAAI,CAAC,CAAA,IAAK,SAAS,QAAQ,CAAC,OAC9C,gBAAgB,MAAM,CAAC,aAAa,IAAI,CAAC,CAAA,IAAK,UAAU,QAAQ,CAAC;IAC1E,GAAG,MAAM,IAAI;IAEb,OAAO,4BAA4B,GAAG,CAAC,CAAA;QACrC,IAAI,aAAa;QACjB,IAAI,oBAAoB;YACtB,oBAAoB;YACpB,uBAAuB;YACvB,mBAAmB;YACnB,eAAe;QACjB;QAEA,mDAAmD;QACnD,cAAc,CAAC,UAAU,YAAY,IAAI,CAAC,IAAI;QAC9C,cAAc,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,UAAU,UAAU,IAAI,KAAK,IAAI,KAAK,2BAA2B;QAEnG,oBAAoB;QACpB,cAAc,CAAC,UAAU,gBAAgB,IAAI,CAAC,IAAI;QAElD,sBAAsB;QACtB,IAAI,UAAU,UAAU,EAAE;YACxB,cAAc,CAAC,UAAU,UAAU,CAAC,WAAW,IAAI,CAAC,IAAI;YACxD,cAAc,CAAC,UAAU,UAAU,CAAC,QAAQ,IAAI,CAAC,IAAI;YACrD,cAAc,CAAC,UAAU,UAAU,CAAC,UAAU,IAAI,CAAC,IAAI;YACvD,cAAc,UAAU,UAAU,CAAC,UAAU,EAAE,UAAU,IAAI;QAC/D;QAEA,oBAAoB;QACpB,MAAM,iBAAiB,YAAY,OAAO,CAAC,CAAA,IACzC,EAAE,OAAO,EAAE,MAAM,OAAO,CAAA,IAAK,EAAE,GAAG,KAAK,YAAY,IAAI,CAAA,IAAK,EAAE,IAAI,KAAK,EAAE;QAG3E,IAAI,UAAU,YAAY,IAAI,UAAU,YAAY,CAAC,UAAU,CAAC,kBAAkB;YAChF,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,UAAU,KAAK,EAAE;YAC5D,cAAc;YAEd,MAAM,cAAc,UAAU,SAAS,EAAE,KAAK,CAAA,KAAM;oBAAC;oBAAI;iBAAI,CAAC,QAAQ,CAAC,QACpD,UAAU,QAAQ,EAAE,cAAc,SAAS,gBAC3C,UAAU,QAAQ,EAAE,cAAc,SAAS,eAC3C,UAAU,QAAQ,EAAE,cAAc,SAAS;YAE9D,IAAI,oBAAoB,aAAa;gBACnC,QAAQ,GAAG,CAAC,CAAC,mCAAmC,EAAE,UAAU,KAAK,EAAE;gBACnE,cAAc;YAChB;QACF;QAEA,2BAA2B;QAC3B,IAAI,UAAU,YAAY,KAAK,+BAA+B;YAC5D,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,UAAU,KAAK,EAAE;YACtE,cAAc;YAEd,IAAI,UAAU,YAAY,EAAE;gBAC1B,MAAM,cAAc,IAAI,KAAK,UAAU,YAAY,EAAE,WAAW;gBAChE,IAAI,eAAe,MAAM;oBACvB,cAAc;gBAChB;YACF;QACF;QAEA,6BAA6B;QAC7B,MAAM,sBAAsB;YAC1B;YAAY;YAAU;YAAa;YAAc;YAAU;YAC3D;YAAQ;YAAU;YAAQ;YAAW;YAAW;SACjD;QAED,IAAI,UAAU,QAAQ,EAAE;YACtB,MAAM,gBAAgB,UAAU,QAAQ,CAAC,WAAW;YACpD,MAAM,mBAAmB,oBAAoB,MAAM,CAAC,CAAA,YAClD,cAAc,QAAQ,CAAC,YACvB,MAAM;YAER,IAAI,mBAAmB,GAAG;gBACxB,MAAM,aAAa,KAAK,GAAG,CAAC,mBAAmB,IAAI;gBACnD,IAAI,kBAAkB;oBACpB,cAAc;oBACd,kBAAkB,aAAa,IAAI;oBACnC,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,iBAAiB,+BAA+B,EAAE,UAAU,KAAK,CAAC,GAAG,EAAE,YAAY;gBAC5G;YACF;QACF;QAEA,iBAAiB;QACjB,IAAI,SAAS,aAAa,CAAC,YAAY,IAAI,UAAU,SAAS,EAAE;YAC9D,MAAM,kBAAkB,UAAU,SAAS;YAE3C,IAAI,gBAAgB,QAAQ,CAAC,SAAS,aAAa,CAAC,YAAY,CAAC,EAAE,GAAG;gBACpE,MAAM,qBAAqB,MAAM,SAAS,aAAa,CAAC,YAAY,CAAC,SAAS,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC;gBAC9G,cAAc;gBACd,kBAAkB,kBAAkB,GAAG;gBACvC,kBAAkB,iBAAiB,IAAI;YACzC;YAEA,SAAS,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;gBAC7C,IAAI,gBAAgB,QAAQ,CAAC,eAAe,EAAE,GAAG;oBAC/C,MAAM,iBAAiB,KAAK,SAAS,aAAa,CAAC,YAAY,CAAC,eAAe,IAAI,CAAC;oBACpF,cAAc;oBACd,kBAAkB,qBAAqB;oBACvC,kBAAkB,iBAAiB,IAAI;gBACzC;YACF;YAEA,MAAM,wBAAwB,SAAS,aAAa,CAAC,cAAc,CAChE,MAAM,CAAC,CAAA,IAAK,EAAE,KAAK,GAAG,KAAK,gBAAgB,QAAQ,CAAC,EAAE,EAAE,GACxD,MAAM;YAET,IAAI,yBAAyB,GAAG;gBAC9B,MAAM,aAAa,KAAK;gBACxB,cAAc;gBACd,kBAAkB,iBAAiB,IAAI;YACzC;QACF;QAEA,6BAA6B;QAC7B,MAAM,iBAAiB;YAAC;YAAU;YAAe;YAAO;SAAU;QAClE,MAAM,gBAAgB,SAAS,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA,IAClE,eAAe,QAAQ,CAAC,EAAE,IAAI,CAAC,WAAW;QAG5C,IAAI,SAAS,gBAAgB,CAAC,cAAc,CAAC,MAAM,GAAG,KAAK,UAAU,QAAQ,EAAE;YAC7E,MAAM,gBAAgB,UAAU,QAAQ,CAAC,WAAW;YACpD,SAAS,gBAAgB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA;gBAC/C,IAAI,cAAc,QAAQ,CAAC,QAAQ,IAAI,CAAC,WAAW,KAAK;oBACtD,MAAM,gBAAgB,MAAM,QAAQ,KAAK,EAAE,oBAAoB;oBAC/D,cAAc;oBACd,kBAAkB,aAAa,IAAI;oBACnC,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,QAAQ,IAAI,CAAC,KAAK,EAAE,UAAU,KAAK,CAAC,GAAG,EAAE,eAAe;gBACrG;YACF;YAEA,uDAAuD;YACvD,MAAM,iBAAiB,eAAe,IAAI,CAAC,CAAA,IAAK,cAAc,QAAQ,CAAC,OACjD,SAAS,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA,IAC5C,cAAc,QAAQ,CAAC,EAAE,IAAI,CAAC,WAAW;YAGjE,IAAI,iBAAiB,CAAC,gBAAgB;gBACpC,cAAc,KAAK,uCAAuC;gBAC1D,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,UAAU,KAAK,CAAC,+BAA+B,CAAC;YAC5E;QACF;QAEA,qBAAqB;QACrB,IAAI,SAAS,gBAAgB,EAAE;YAC7B,MAAM,aAAa,CAAC,UAAU,KAAK,IAAI,EAAE,EAAE,WAAW;YACtD,MAAM,2BAA2B,YAAY,MAAM,CAAC,CAAA,IAClD,EAAE,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,SAAS,gBAAgB,CAAC,WAAW,KACpE,MAAM;YAER,IAAI,WAAW,QAAQ,CAAC,SAAS,gBAAgB,CAAC,WAAW,KAAK;gBAChE,IAAI,iBAAiB,4BAA4B,IAAI,OAAO,4BAA4B,IAAI,MAAM,KAAK,oBAAoB;gBAC3H,IAAI,kBAAkB,kBAAkB,EAAE;oBACxC,kBAAkB;gBACpB;gBACA,cAAc;gBACd,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,UAAU,KAAK,CAAC,GAAG,EAAE,gBAAgB;YAClF;YAEA,SAAS,iBAAiB,EAAE,QAAQ,CAAA;gBAClC,IAAI,WAAW,QAAQ,CAAC,QAAQ,WAAW,KAAK;oBAC9C,IAAI,eAAe,4BAA4B,IAAI,MAAM,4BAA4B,IAAI,MAAM;oBAC/F,IAAI,kBAAkB,kBAAkB,EAAE;wBACxC,gBAAgB;oBAClB;oBACA,cAAc;oBACd,QAAQ,GAAG,CAAC,CAAC,oCAAoC,EAAE,UAAU,KAAK,CAAC,MAAM,EAAE,QAAQ,IAAI,EAAE,cAAc;gBACzG;YACF;QACF;QAEA,oBAAoB;QACpB,MAAM,mBAAmB,0BAA0B,WAAW,SAAS,iBAAiB;QACxF,cAAc,mBAAmB;QAEjC,IAAI,SAAS,iBAAiB,CAAC,WAAW,KAAK,aAAa,UAAU,YAAY,IAAI,KAAK;YACzF,cAAc;QAChB;QAEA,mBAAmB;QACnB,MAAM,aAAa,KAAK,GAAG,CAAC,CAAC,UAAU,YAAY,IAAI,CAAC,IAAI,SAAS,SAAS;QAC9E,IAAI,cAAc,KAAK,cAAc;aAChC,IAAI,cAAc,GAAG,cAAc;aACnC,IAAI,cAAc,KAAK,cAAc;QAE1C,oBAAoB;QACpB,IAAI,SAAS,cAAc,IAAI,UAAU,iBAAiB,KAAK,SAAS,cAAc,EAAE;YACtF,IAAI,YAAY;YAChB,IAAI,SAAS,cAAc,KAAK,MAAM;gBACpC,aAAa;YACf;YACA,cAAc;QAChB;QAEA,yBAAyB;QACzB,IAAI,SAAS,OAAO,IAAI,UAAU,iBAAiB,KAAK,MAAM;YAC5D,cAAc;QAChB;QACA,IAAI,SAAS,UAAU,IAAI,UAAU,SAAS,EAAE,SAAS,KAAK;YAC5D,cAAc;QAChB;QACA,IAAI,SAAS,UAAU,KAAK,SAAS,CAAC,UAAU,SAAS,EAAE,SAAS,KAAK;YACvE,cAAc;QAChB;QAEA,gDAAgD;QAChD,IAAI,CAAC,UAAU,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,SAAS,gBAAgB,EAAE,iBAAiB,KAAK;YAC3F,IAAI,UAAU,YAAY,EAAE;gBAC1B,MAAM,cAAc,IAAI,KAAK,UAAU,YAAY,EAAE,WAAW;gBAChE,MAAM,oBAAoB,SAAS,iBAAiB,CAAC,WAAW,KAAK,YAAY,MAAM;gBAEvF,IAAI,eAAe,MAAM,cAAc,KAAK;qBACvC,IAAI,eAAe,MAAM,cAAc,KAAK;qBAC5C,IAAI,eAAe,MAAM,cAAc,IAAI;YAClD;QACF;QAEA,gCAAgC;QAChC,MAAM,kBAAkB,KAAK,KAAK,CAAE,UAAU,UAAU,IAAI,KAAM;QAClE,MAAM,eAAe,CAAC,UAAU,YAAY,IAAI,CAAC,IAAI;QACrD,MAAM,uBAAuB,UAAU,UAAU,IAAI,MAAM,KAC/B,UAAU,UAAU,IAAI,MAAM,KAC9B,UAAU,UAAU,IAAI,KAAK,IAAI;QAE7D,cAAc,kBAAkB,eAAe;QAE/C,8BAA8B;QAC9B,MAAM,gBAAgB,YAAY,OAAO,CAAC,CAAA,IAAK,EAAE,MAAM,EAAE,IAAI,CAAA,IAAK,EAAE,EAAE,KAAK,EAAE;QAC7E,MAAM,oBAAoB,UAAU,SAAS,IAAI,EAAE;QACnD,MAAM,eAAe,kBAAkB,MAAM,CAAC,CAAA,IAAK,cAAc,QAAQ,CAAC,IAAI,MAAM;QACpF,MAAM,iBAAiB,kBAAkB,MAAM,GAAG;QAElD,cAAc,eAAe;QAC7B,cAAc,KAAK,GAAG,CAAC,iBAAiB,GAAG;QAE3C,mBAAmB;QACnB,IAAI,UAAU,UAAU,IAAI,MAAM,cAAc;aAC3C,IAAI,UAAU,UAAU,IAAI,MAAM,cAAc;aAChD,IAAI,UAAU,UAAU,IAAI,KAAK,cAAc;QAEpD,sEAAsE;QACtE,IAAI,UAAU,SAAS,IAAI,CAAC,UAAU,SAAS,CAAC,IAAI,CAAC,CAAA,KAAM;gBAAC;gBAAI;gBAAK;aAAG,CAAC,QAAQ,CAAC,MAAM;YACtF,IAAI,CAAC,UAAU,YAAY,EAAE,WAAW,oBACpC,UAAU,YAAY,KAAK,+BAA+B;gBAC5D,cAAc;YAChB;QACF;QAEA,QAAQ,GAAG,CAAC,GAAG,UAAU,KAAK,CAAC,aAAa,EAAE,UAAU,YAAY,CAAC,UAAU,EAAE,KAAK,KAAK,CAAC,aAAa;QAEzG,OAAO;YACL,GAAG,SAAS;YACZ,YAAY,KAAK,KAAK,CAAC;YACvB;QACF;IACF;AACF;AAEA,SAAS,0BAA0B,SAAS,EAAE,iBAAiB;IAC7D,MAAM,kBAAkB,UAAU,YAAY,IAAI;IAClD,MAAM,sBAAsB,UAAU,UAAU,IAAI;IAEpD,IAAI,iBAAiB;IAErB,MAAM,aAAa,KAAK,GAAG,CAAC,kBAAkB,kBAAkB,SAAS;IACzE,IAAI,cAAc,KAAK,kBAAkB;SACpC,IAAI,cAAc,KAAK,kBAAkB;SACzC,IAAI,cAAc,KAAK,kBAAkB;IAE9C,IAAI,kBAAkB,WAAW,KAAK,aAAa,mBAAmB,KAAK;QACzE,kBAAkB;IACpB,OAAO,IAAI,kBAAkB,WAAW,KAAK,UAAU,mBAAmB,KAAK;QAC7E,kBAAkB;IACpB,OAAO,IAAI,kBAAkB,WAAW,KAAK,cAAc,mBAAmB,KAAK;QACjF,kBAAkB;IACpB;IAEA,IAAI,kBAAkB,aAAa,GAAG,MAAM,sBAAsB,IAAI;QACpE,kBAAkB;IACpB;IAEA,OAAO;AACT;AAEA,eAAe,iCAAiC,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,YAAW;IACxG,MAAM,cAAc,MAAM,qBAAqB,UAAU,cAAc;IACvE,MAAM,kBAAkB,IAAI;IAE5B,IAAI,aAAa;QAAC;QAAoB;KAAS;IAE/C,IAAI,SAAS,OAAO,EAAE;QACpB,aAAa;YAAC;YAAS;YAAgB;SAAmB;IAC5D,OAAO,IAAI,SAAS,UAAU,EAAE;QAC9B,aAAa;YAAC;YAAoB;YAAU;SAAY;IAC1D,OAAO,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;QAC9C,MAAM,YAAY,SAAS,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW;QACtE,IAAI,cAAc,UAAU,WAAW,IAAI,CAAC;QAC5C,IAAI,cAAc,mBAAmB,WAAW,IAAI,CAAC;QACrD,IAAI,cAAc,aAAa,WAAW,IAAI,CAAC;IACjD;IAEA,MAAM,gBAAgB,8BAA8B,aAAa;IAEjE,QAAQ,GAAG,CAAC,0BAA0B;IACtC,QAAQ,GAAG,CAAC,sBAAsB;IAElC,MAAM,iBAAiB,EAAE;IAEzB,KAAK,MAAM,aAAa,WAAW,KAAK,CAAC,GAAG,GAAI;QAC9C,KAAK,MAAM,SAAS,cAAc,KAAK,CAAC,GAAG,GAAI;YAC7C,MAAM,YAAY,CAAC,2BAA2B,EAAE,UAAU,UAAU,EAAE,mBAAmB,OAAO,uCAAuC,CAAC;YAExI,eAAe,IAAI,CACjB,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,WAAW;gBACnB,GAAG,YAAW;gBACd,SAAS;gBACT,SAAS;oBACP,iBAAiB,CAAC,OAAO,EAAE,aAAa;oBACxC,cAAc;gBAChB;YACF,GAAG,IAAI,CAAC,CAAA,WAAY,CAAC;oBAAE;oBAAW;oBAAO,OAAO,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ;gBAAC,CAAC,GAC5E,KAAK,CAAC,CAAA,QAAS,CAAC;oBAAE;oBAAW;oBAAO,OAAO,EAAE;oBAAE,OAAO,MAAM,OAAO;gBAAC,CAAC;QAE1E;IACF;IAEA,MAAM,gBAAgB,MAAM,QAAQ,GAAG,CAAC;IAExC,KAAK,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,cAAe;QAChD,KAAK,MAAM,QAAQ,MAAO;YACxB,MAAM,WAAW,KAAK,IAAI;YAC1B,IAAI,SAAS,KAAK,GAAG,GAAG;YAExB,MAAM,kBAAkB,oCAAoC,UAAU,aAAa;YAEnF,gBAAgB,OAAO,CAAC,CAAA;gBACtB,MAAM,MAAM,MAAM,KAAK,CAAC,WAAW;gBACnC,IAAI,CAAC,gBAAgB,GAAG,CAAC,MAAM;oBAC7B,gBAAgB,GAAG,CAAC,KAAK;wBACvB,OAAO,MAAM,KAAK;wBAClB,aAAa;wBACb,SAAS;wBACT,UAAU;wBACV,YAAY,IAAI;wBAChB,YAAY;wBACZ,YAAY,MAAM,UAAU,IAAI,EAAE;oBACpC;gBACF;gBAEA,MAAM,MAAM,gBAAgB,GAAG,CAAC;gBAChC,IAAI,WAAW,IAAI,MAAM,KAAK;gBAC9B,IAAI,OAAO,IAAI,MAAM,OAAO;gBAC5B,IAAI,QAAQ,IAAI;gBAChB,IAAI,UAAU,IAAI,MAAM,UAAU,IAAI;gBACtC,IAAI,UAAU,CAAC,GAAG,CAAC;gBACnB,IAAI,MAAM,UAAU,EAAE;oBACpB,IAAI,UAAU,CAAC,IAAI,IAAI,MAAM,UAAU;gBACzC;YACF;QACF;IACF;IAEA,QAAQ,GAAG,CAAC,qCAAqC,gBAAgB,IAAI;IAErE,OAAO,MAAM,IAAI,CAAC,gBAAgB,MAAM,IACrC,MAAM,CAAC,CAAA,MAAO,IAAI,QAAQ,IAAI,GAC9B,IAAI,CAAC,CAAC,GAAG,IAAM,AAAC,EAAE,WAAW,GAAG,EAAE,UAAU,GAAK,EAAE,WAAW,GAAG,EAAE,UAAU,EAC7E,KAAK,CAAC,GAAG;AACd;AAEA,SAAS,8BAA8B,WAAW,EAAE,QAAQ;IAC1D,MAAM,UAAU,EAAE;IAElB,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;QACvC,MAAM,YAAY,SAAS,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW;QACtE,QAAQ,IAAI,CAAC,CAAC,KAAK,EAAE,UAAU,OAAO,CAAC;QACvC,QAAQ,IAAI,CAAC,GAAG,UAAU,gBAAgB,CAAC;QAE3C,IAAI,SAAS,aAAa,CAAC,UAAU,EAAE;YACrC,QAAQ,IAAI,CAAC,GAAG,SAAS,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC;QAC9E;IACF;IAEA,IAAI,SAAS,gBAAgB,EAAE;QAC7B,QAAQ,IAAI,CAAC,GAAG,SAAS,gBAAgB,CAAC,sBAAsB,CAAC;QACjE,QAAQ,IAAI,CAAC,CAAC,KAAK,EAAE,SAAS,gBAAgB,CAAC,MAAM,CAAC;IACxD;IAEA,QAAQ,IAAI,CAAC,CAAC,YAAY,EAAE,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE;IAClD,QAAQ,IAAI,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE;IAEjD,IAAI,SAAS,gBAAgB,CAAC,cAAc,CAAC,MAAM,GAAG,GAAG;QACvD,MAAM,aAAa,SAAS,gBAAgB,CAAC,cAAc,CAAC,EAAE;QAC9D,QAAQ,IAAI,CAAC,GAAG,WAAW,IAAI,CAAC,OAAO,CAAC;IAC1C;IAEA,IAAI,SAAS,cAAc,IAAI,SAAS,cAAc,KAAK,MAAM;QAC/D,QAAQ,IAAI,CAAC,GAAG,SAAS,cAAc,CAAC,gBAAgB,CAAC;IAC3D;IAEA,OAAO,QAAQ,KAAK,CAAC,GAAG;AAC1B;AAEA,SAAS,oCAAoC,QAAQ,EAAE,WAAW,EAAE,QAAQ;IAC1E,MAAM,kBAAkB,EAAE;IAC1B,MAAM,WAAY,SAAS,KAAK,GAAG,MAAM,CAAC,SAAS,QAAQ,IAAI,EAAE;IACjE,MAAM,YAAY,SAAS,WAAW;IACtC,MAAM,cAAc,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,KAAK,CAAC,WAAW;IAE5D,MAAM,oBAAoB,YAAY,IAAI,CAAC,CAAA,QAAS,UAAU,QAAQ,CAAC;IACvE,IAAI,qBAAqB,CAAC,UAAU,QAAQ,CAAC,gBAAgB,CAAC,UAAU,QAAQ,CAAC,YAAY;QAC3F,OAAO,EAAE;IACX;IAEA,MAAM,WAAW;QACf;YAAE,OAAO;YAAmB,YAAY;QAAE;QAC1C;YAAE,OAAO;YAAmB,YAAY;QAAE;QAC1C;YAAE,OAAO;YAAyB,YAAY;QAAE;QAChD;YAAE,OAAO;YAAqB,YAAY;QAAE;QAC5C;YAAE,OAAO;YAA8C,YAAY;QAAE;QACrE;YAAE,OAAO;YAAoE,YAAY;QAAE;QAC3F;YAAE,OAAO;YAAwE,YAAY;QAAE;QAC/F;YAAE,OAAO;YAA6C,YAAY;QAAE;QACpE;YAAE,OAAO;YAA6C,YAAY;QAAE;QACpE;YAAE,OAAO;YAA6D,YAAY;QAAE;KACrF;IAED,SAAS,OAAO,CAAC,CAAA;QACf,IAAI;QACJ,MAAO,CAAC,QAAQ,QAAQ,KAAK,CAAC,IAAI,CAAC,SAAS,MAAM,KAAM;YACtD,IAAI,QAAQ,KAAK,CAAC,EAAE,CAAC,IAAI;YAEzB,QAAQ,MAAM,OAAO,CAAC,aAAa;YAEnC,IAAI,MAAM,MAAM,GAAG,KAAK,MAAM,MAAM,GAAG,IAAI;YAC3C,IAAI,YAAY,IAAI,CAAC,CAAA,aACnB,MAAM,WAAW,GAAG,QAAQ,CAAC,eAAe,WAAW,QAAQ,CAAC,MAAM,WAAW,MAChF;YAEH,MAAM,iBAAiB;gBACrB;gBAAS;gBAAQ;gBAAU;gBAAW;gBAAW;gBAAQ;gBAAU;gBACnE;gBAAS;gBAAQ;gBAAa;gBAAc;gBAAW;gBAAW;gBAClE;gBAAS;gBAAY;gBAAS;gBAAQ;gBAAQ;gBAAS;gBAAQ;gBAC/D;gBAAQ;gBAAS;gBAAO;gBAAQ;gBAAS;gBAAQ;gBAAQ;gBAAS;aACnE;YAED,IAAI,eAAe,IAAI,CAAC,CAAA,KAAM,MAAM,WAAW,OAAO,MAAM,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAK,OAAO;gBACnG;YACF;YAEA,IAAI,kBAAkB;YACtB,MAAM,aAAa,EAAE;YAErB,IAAI,SAAS,gBAAgB,IAAI,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,gBAAgB,CAAC,WAAW,KAAK;gBACtG,mBAAmB;YACrB;YAEA,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;gBACvC,MAAM,YAAY,SAAS,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW;gBACtE,MAAM,eAAe,SAAS,WAAW,GAAG,KAAK,CAAC;gBAClD,MAAM,aAAa,aAAa,SAAS,CAAC,CAAA,OAAQ,KAAK,QAAQ,CAAC,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;gBAEjG,IAAI,eAAe,CAAC,GAAG;oBACrB,MAAM,gBAAgB,aAAa,KAAK,CAAC,KAAK,GAAG,CAAC,GAAG,aAAa,IAAI,aAAa;oBACnF,IAAI,cAAc,IAAI,CAAC,CAAA,OAAQ,KAAK,QAAQ,CAAC,aAAa;wBACxD,mBAAmB;wBACnB,WAAW,IAAI,CAAC;oBAClB;gBACF;YACF;YAEA,gBAAgB,IAAI,CAAC;gBACnB,OAAO;gBACP,OAAO,SAAS,KAAK;gBACrB,SAAS,SAAS,GAAG,IAAI,SAAS,KAAK;gBACvC,YAAY,QAAQ,UAAU,GAAG;gBACjC,YAAY;YACd;QACF;IACF;IAEA,MAAM,aAAa,EAAE;IACrB,MAAM,aAAa,IAAI;IAEvB,gBACG,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,UAAU,GAAG,EAAE,UAAU,EAC1C,OAAO,CAAC,CAAA;QACP,MAAM,WAAW,IAAI,KAAK,CAAC,WAAW;QACtC,IAAI,CAAC,WAAW,GAAG,CAAC,WAAW;YAC7B,WAAW,GAAG,CAAC;YACf,WAAW,IAAI,CAAC;QAClB;IACF;IAEF,OAAO,WAAW,KAAK,CAAC,GAAG;AAC7B;AAEA,eAAe,oBAAoB,WAAW,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAW,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,cAAc;IAC5I,IAAI;QACF,IAAI,SAAS,gBAAgB,EAAE;YAC7B,QAAQ,GAAG,CAAC,kCAAkC,SAAS,gBAAgB;YACvE,IAAI,YAAY,CAAC,kDAAkD,EAAE,OAAO,OAAO,EAAE,mBAAmB,SAAS,gBAAgB,EAAE,oDAAoD,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;YAClP,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;gBAClD,aAAa,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;YACtE;YACA,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;gBACvC,aAAa,CAAC,aAAa,EAAE,SAAS,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE;YACvE;YACA,IAAI,SAAS,UAAU,KAAK,OAAO;gBACjC,aAAa,CAAC,kBAAkB,CAAC;YACnC;YACA,MAAM,iBAAiB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,WAAW;YAClD,MAAM,YAAY,eAAe,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA,QACjD,CAAC,YAAY,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,OACvC,MAAM,UAAU,GAAG,OACnB,MAAM,KAAK,CAAC,WAAW,GAAG,QAAQ,CAAC,SAAS,gBAAgB,CAAC,WAAW,OACxE,MAAM,YAAY,IAAK,SAAS,SAAS,GAAG;YAE9C,IAAI,WAAW;gBACb,QAAQ,GAAG,CAAC,6BAA6B,UAAU,KAAK;gBACxD,OAAO;YACT;QACF;QAEA,IAAI,SAAS,OAAO,EAAE;YACpB,QAAQ,GAAG,CAAC;YAEZ,IAAI,aAAa,CAAC,oDAAoD,EAAE,OAAO,+GAA+G,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;YAEzP,MAAM,eAAe,SAAS,iBAAiB,CAAC,WAAW,KAAK,YAAY,OACxD,SAAS,iBAAiB,CAAC,WAAW,KAAK,SAAS,MAAM;YAE9E,cAAc,CAAC,gBAAgB,EAAE,cAAc;YAE/C,MAAM,gBAAgB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,YAAY;YAElD,MAAM,YAAY,cAAc,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA,QAChD,CAAC,YAAY,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,OACvC,MAAM,YAAY,IAAK,SAAS,SAAS,GAAG;YAG9C,IAAI,WAAW;gBACb,QAAQ,GAAG,CAAC,yBAAyB,UAAU,KAAK;gBACpD,OAAO;YACT;QACF;QAEA,IAAI,SAAS,cAAc,IAAI,iBAAiB,MAAM,GAAG,GAAG;YAC1D,QAAQ,GAAG,CAAC;YAEZ,IAAI,YAAY,CAAC,oDAAoD,EAAE,OAAO,uEAAuE,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;YAEhN,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;gBAClD,aAAa,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;YACtE;YAEA,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;gBACvC,aAAa,CAAC,aAAa,EAAE,SAAS,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE;YACvE;YACA,IAAI,SAAS,UAAU,KAAK,OAAO;gBACjC,aAAa,CAAC,kBAAkB,CAAC;YACnC;YAEA,MAAM,eAAe,SAAS,iBAAiB,CAAC,WAAW,KAAK,YAAY,OACxD,SAAS,iBAAiB,CAAC,WAAW,KAAK,SAAS,MAAM;YAE9E,aAAa,CAAC,gBAAgB,EAAE,cAAc;YAE9C,MAAM,eAAe,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,WAAW;YAEhD,MAAM,YAAY,aAAa,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA,QAC/C,CAAC,YAAY,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,OACvC,MAAM,YAAY,IAAK,SAAS,SAAS,GAAG;YAG9C,IAAI,WAAW;gBACb,QAAQ,GAAG,CAAC,kCAAkC,UAAU,KAAK;gBAC7D,OAAO;YACT;QACF;QAEA,IAAI,SAAS,aAAa,CAAC,YAAY,EAAE;YACvC,QAAQ,GAAG,CAAC,mCAAmC,SAAS,aAAa,CAAC,YAAY,CAAC,IAAI;YAEvF,MAAM,eAAe,SAAS,iBAAiB,CAAC,WAAW,KAAK,YAAY,OACxD,SAAS,iBAAiB,CAAC,WAAW,KAAK,SAAS,MAAM;YAE9E,IAAI,aAAa,CAAC,oDAAoD,EAAE,OAAO,aAAa,EAAE,SAAS,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,0CAA0C,EAAE,aAAa,0BAA0B,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;YACnR,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;gBAClD,cAAc,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;YACvE;YACA,IAAI,SAAS,UAAU,KAAK,OAAO;gBACjC,cAAc,CAAC,kBAAkB,CAAC;YACpC;YAEA,MAAM,gBAAgB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,YAAY;YAElD,MAAM,YAAY,cAAc,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA,QAChD,CAAC,YAAY,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,OACvC,MAAM,YAAY,IAAK,SAAS,SAAS,GAAG;YAG9C,IAAI,WAAW;gBACb,QAAQ,GAAG,CAAC,+BAA+B,UAAU,KAAK;gBAC1D,OAAO;YACT;QACF;QAEA,IAAI,SAAS,UAAU,EAAE;YACvB,IAAI,YAAY,CAAC,oDAAoD,EAAE,OAAO,sFAAsF,EAAE,QAAQ,gCAAgC,EAAE,QAAQ,MAAM,CAAC;YAE/N,IAAI,CAAC,kBAAkB,iBAAiB,MAAM,GAAG,GAAG;gBAClD,aAAa,CAAC,wBAAwB,EAAE,iBAAiB,IAAI,CAAC,MAAM;YACtE;YAEA,MAAM,eAAe,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,WAAW;YAChD,MAAM,YAAY,aAAa,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA,QAC/C,CAAC,YAAY,QAAQ,CAAC,MAAM,EAAE,CAAC,QAAQ,OACvC,MAAM,YAAY,IAAK,SAAS,SAAS,GAAG;YAE9C,IAAI,WAAW;gBACb,QAAQ,GAAG,CAAC,6BAA6B,UAAU,KAAK;gBACxD,OAAO;YACT;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO;IACT;AACF;AAEA,eAAe,qBAAqB,QAAQ,EAAE,YAAY,EAAE,YAAW;IACrE,MAAM,OAAO,OAAO,IAAI,CAAC,GAAG,SAAS,CAAC,EAAE,cAAc,EAAE,QAAQ,CAAC;IAEjE,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,8CACA,iCACA;QACE,GAAG,YAAW;QACd,SAAS;QACT,SAAS;YACP,iBAAiB,CAAC,MAAM,EAAE,MAAM;YAChC,gBAAgB;YAChB,cAAc;QAChB;IACF;IAEF,OAAO,SAAS,IAAI,CAAC,YAAY;AACnC;AAEA,eAAe,qCAAqC,UAAU,EAAE,MAAM,EAAE,YAAW,EAAE,aAAa;IAChG,MAAM,eAAe,EAAE;IAEvB,MAAM,kBAAkB,WAAW,GAAG,CAAC,OAAO;QAC5C,IAAI;YACF,IAAI,iBAAiB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAClC,CAAC,kDAAkD,EAAE,OAAO,OAAO,EAAE,mBAAmB,IAAI,KAAK,GAAG,EACpG;gBAAE,GAAG,YAAW;gBAAE,SAAS;YAAK;YAGlC,IAAI,cAAc,eAAe,IAAI,CAAC,OAAO;YAE7C,IAAI,YAAY,MAAM,KAAK,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM;gBACvD,MAAM,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC;gBAC9B,MAAM,eAAe,MAAM,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,MAAM,MAAM,GAAG,IAAI,CAAC;gBACpE,iBAAiB,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAC9B,CAAC,kDAAkD,EAAE,OAAO,OAAO,EAAE,mBAAmB,eAAe,EACvG;oBAAE,GAAG,YAAW;oBAAE,SAAS;gBAAK;gBAElC,cAAc,eAAe,IAAI,CAAC,OAAO;YAC3C;YAEA,IAAI,YAAY,MAAM,GAAG,GAAG;gBAC1B,MAAM,YAAY,YACf,MAAM,CAAC,CAAA,QAAS,MAAM,UAAU,GAAG,KACnC,MAAM,CAAC,CAAC,MAAM;oBACb,MAAM,iBAAiB,yBAAyB,IAAI,KAAK,EAAE,KAAK,KAAK;oBACrE,MAAM,oBAAoB,yBAAyB,IAAI,KAAK,EAAE,QAAQ,KAAK;oBAE3E,MAAM,YAAY,iBAAiB,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,IAAI;oBAClE,MAAM,eAAe,oBAAoB,MAAM,CAAC,QAAQ,UAAU,IAAI,CAAC,IAAI;oBAE3E,OAAO,eAAe,YAAY,UAAU;gBAC9C,GAAG,WAAW,CAAC,EAAE;gBAEnB,MAAM,aAAa,UAAU,KAAK,CAAC,WAAW;gBAC9C,MAAM,mBAAmB,cAAc,gBAAgB,IAAI,WAAW,QAAQ,CAAC,cAAc,gBAAgB,CAAC,WAAW;gBACzH,MAAM,eAAe,cAAc,aAAa,CAAC,YAAY,IAAI,UAAU,SAAS,EAAE,SAAS,cAAc,aAAa,CAAC,YAAY,CAAC,EAAE;gBAE1I,IAAI,cAAc,OAAO,IACrB,CAAC,UAAU,iBAAiB,KAAK,QAAQ,UAAU,SAAS,EAAE,SAAS,GAAG,KAC1E,yBAAyB,IAAI,KAAK,EAAE,UAAU,KAAK,IAAI,KAAK;oBAC9D,OAAO;wBACL,GAAG,SAAS;wBACZ,YAAY;4BACV,eAAe,IAAI,KAAK;4BACxB,aAAa,IAAI,WAAW;4BAC5B,UAAU,IAAI,QAAQ;4BACtB,SAAS,IAAI,OAAO;4BACpB,YAAY,IAAI,UAAU;4BAC1B,YAAY,MAAM,IAAI,CAAC,IAAI,UAAU;4BACrC,YAAY,IAAI,UAAU,IAAI,EAAE;wBAClC;oBACF;gBACF,OAAO,IAAI,CAAC,cAAc,UAAU,IACzB,CAAC,UAAU,SAAS,EAAE,SAAS,OAC/B,UAAU,YAAY,IAAI,CAAC,cAAc,iBAAiB,CAAC,WAAW,KAAK,YAAY,MAAM,GAAG,KAChG,CAAC,oBAAoB,YAAY,KACjC,yBAAyB,IAAI,KAAK,EAAE,UAAU,KAAK,IAAI,KAAK;oBACrE,OAAO;wBACL,GAAG,SAAS;wBACZ,YAAY;4BACV,eAAe,IAAI,KAAK;4BACxB,aAAa,IAAI,WAAW;4BAC5B,UAAU,IAAI,QAAQ;4BACtB,SAAS,IAAI,OAAO;4BACpB,YAAY,IAAI,UAAU;4BAC1B,YAAY,MAAM,IAAI,CAAC,IAAI,UAAU;4BACrC,YAAY,IAAI,UAAU,IAAI,EAAE;wBAClC;oBACF;gBACF;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,GAAG,CAAC,CAAC,sCAAsC,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,OAAO;QAClF;QACA,OAAO;IACT;IAEA,MAAM,UAAU,MAAM,QAAQ,UAAU,CAAC;IACzC,OAAO,QACJ,MAAM,CAAC,CAAA,SAAU,OAAO,MAAM,KAAK,eAAe,OAAO,KAAK,KAAK,MACnE,GAAG,CAAC,CAAA,SAAU,OAAO,KAAK;AAC/B;AAEA,SAAS,yBAAyB,MAAM,EAAE,MAAM;IAC9C,MAAM,KAAK,OAAO,WAAW,GAAG,OAAO,CAAC,gBAAgB,IAAI,IAAI;IAChE,MAAM,KAAK,OAAO,WAAW,GAAG,OAAO,CAAC,gBAAgB,IAAI,IAAI;IAEhE,IAAI,OAAO,IAAI,OAAO;IAEtB,MAAM,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,OAAO,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,GAAG;IAC9D,MAAM,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,OAAO,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,GAAG;IAE9D,IAAI,OAAO,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,GAAG,OAAO;IAEnD,MAAM,eAAe,IAAI,IAAI;WAAI;KAAO,CAAC,MAAM,CAAC,CAAA,IAAK,OAAO,GAAG,CAAC;IAChE,MAAM,QAAQ,IAAI,IAAI;WAAI;WAAW;KAAO;IAE5C,OAAO,aAAa,IAAI,GAAG,MAAM,IAAI;AACvC;AAEA,SAAS,qBAAqB,YAAY;IACxC,MAAM,YAAY,aAAa,IAAI;IACnC,MAAM,eAAe,CAAC;IAEtB,UAAU,OAAO,CAAC,CAAA;QAChB,YAAY,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI;IACjE;IAEA,MAAM,aAAa,OAAO,OAAO,CAAC,cAC/B,IAAI,CAAC,CAAC,GAAE,EAAE,EAAE,GAAE,EAAE,GAAK,IAAI,EAAE,CAAC,EAAE;IAEjC,OAAO,cAAc,UAAU,CAAC,EAAE,GAAG,IAAI,UAAU,CAAC,EAAE,GAAG;AAC3D;AAEA,SAAS,qBAAqB,YAAY;IACxC,MAAM,aAAa,aAAa,IAAI;IACpC,MAAM,eAAe,CAAC;IAEtB,WAAW,OAAO,CAAC,CAAA;QACjB,YAAY,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI;IACjE;IAEA,MAAM,aAAa,OAAO,OAAO,CAAC,cAC/B,IAAI,CAAC,CAAC,GAAE,EAAE,EAAE,GAAE,EAAE,GAAK,IAAI,EAAE,CAAC,EAAE;IAEjC,OAAO,cAAc,UAAU,CAAC,EAAE,GAAG,IAAI,UAAU,CAAC,EAAE,GAAG;AAC3D","debugId":null}}]
}