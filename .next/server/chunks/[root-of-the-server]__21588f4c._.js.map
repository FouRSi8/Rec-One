{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///D:/Coding/Rec%27One/rec-one/src/app/api/recommendations/route.js"],"sourcesContent":["import Reddit from \"reddit.js\";\r\n\r\nexport async function GET(request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const movieIds = searchParams.get(\"movieIds\")?.split(\",\");\r\n  const year = searchParams.get(\"year\");\r\n\r\n  if (!movieIds || movieIds.length !== 3 || !year) {\r\n    return NextResponse.json(\r\n      { error: \"Please provide exactly 3 movie IDs and a year\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const TMDB_API_KEY = process.env.TMDB_API_KEY;\r\n  const REDDIT_CLIENT_ID = process.env.REDDIT_CLIENT_ID;\r\n  const REDDIT_CLIENT_SECRET = process.env.REDDIT_CLIENT_SECRET;\r\n  const REDDIT_USER_AGENT = process.env.REDDIT_USER_AGENT;\r\n\r\n  if (!TMDB_API_KEY || !REDDIT_CLIENT_ID || !REDDIT_CLIENT_SECRET || !REDDIT_USER_AGENT) {\r\n    return NextResponse.json({ error: \"API keys or credentials are missing\" }, { status: 500 });\r\n  }\r\n\r\n  try {\r\n    // Instantiate Reddit client\r\n    const reddit = new Reddit({\r\n      clientId: REDDIT_CLIENT_ID,\r\n      clientSecret: REDDIT_CLIENT_SECRET,\r\n      userAgent: REDDIT_USER_AGENT,\r\n    });\r\n\r\n    // Rest of your logic...\r\n    const movieDetails = await Promise.all(\r\n      movieIds.map((id) =>\r\n        axios\r\n          .get(`https://api.themoviedb.org/3/movie/${id}?api_key=${TMDB_API_KEY}&language=en-US&append_to_response=credits`)\r\n          .then((res) => res.data)\r\n      )\r\n    );\r\n\r\n    const commonTraits = analyzeCommonTraits(movieDetails);\r\n    const positiveMatch = await getPositiveRecommendation(commonTraits, year, movieIds, reddit);\r\n    const oppositeMatch = await getOppositeRecommendation(movieDetails, positiveMatch, reddit);\r\n\r\n    return NextResponse.json({\r\n      positiveMatch,\r\n      oppositeMatch,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error generating recommendations:\", error);\r\n    return NextResponse.json({ error: \"Failed to generate recommendations\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Keep your existing functions (analyzeCommonTraits, getPositiveRecommendation, etc.)..."],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAO;IAC/B,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,WAAW,aAAa,GAAG,CAAC,aAAa,MAAM;IACrD,MAAM,OAAO,aAAa,GAAG,CAAC;IAE9B,IAAI,CAAC,YAAY,SAAS,MAAM,KAAK,KAAK,CAAC,MAAM;QAC/C,OAAO,aAAa,IAAI,CACtB;YAAE,OAAO;QAAgD,GACzD;YAAE,QAAQ;QAAI;IAElB;IAEA,MAAM,eAAe,QAAQ,GAAG,CAAC,YAAY;IAC7C,MAAM,mBAAmB,QAAQ,GAAG,CAAC,gBAAgB;IACrD,MAAM,uBAAuB,QAAQ,GAAG,CAAC,oBAAoB;IAC7D,MAAM,oBAAoB,QAAQ,GAAG,CAAC,iBAAiB;IAEvD,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,mBAAmB;QACrF,OAAO,aAAa,IAAI,CAAC;YAAE,OAAO;QAAsC,GAAG;YAAE,QAAQ;QAAI;IAC3F;IAEA,IAAI;QACF,4BAA4B;QAC5B,MAAM,SAAS,IAAI,+IAAA,CAAA,UAAM,CAAC;YACxB,UAAU;YACV,cAAc;YACd,WAAW;QACb;QAEA,wBAAwB;QACxB,MAAM,eAAe,MAAM,QAAQ,GAAG,CACpC,SAAS,GAAG,CAAC,CAAC,KACZ,MACG,GAAG,CAAC,CAAC,mCAAmC,EAAE,GAAG,SAAS,EAAE,aAAa,0CAA0C,CAAC,EAChH,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI;QAI7B,MAAM,eAAe,oBAAoB;QACzC,MAAM,gBAAgB,MAAM,0BAA0B,cAAc,MAAM,UAAU;QACpF,MAAM,gBAAgB,MAAM,0BAA0B,cAAc,eAAe;QAEnF,OAAO,aAAa,IAAI,CAAC;YACvB;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,aAAa,IAAI,CAAC;YAAE,OAAO;QAAqC,GAAG;YAAE,QAAQ;QAAI;IAC1F;AACF,EAEA,yFAAyF","debugId":null}}]
}